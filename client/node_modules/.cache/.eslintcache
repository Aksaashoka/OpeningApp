[{"/home/alan/Escritorio/Integra/IntegraApp/src/index.js":"1","/home/alan/Escritorio/Integra/IntegraApp/src/firebaseConfig.js":"2","/home/alan/Escritorio/Integra/IntegraApp/src/components/App.jsx":"3","/home/alan/Escritorio/Integra/IntegraApp/src/store/root.store.js":"4","/home/alan/Escritorio/Integra/IntegraApp/src/components/Routes/RoutesAffiliate.jsx":"5","/home/alan/Escritorio/Integra/IntegraApp/src/components/Routes/RoutesGuest.jsx":"6","/home/alan/Escritorio/Integra/IntegraApp/src/components/Routes/RoutesAdmin.jsx":"7","/home/alan/Escritorio/Integra/IntegraApp/src/components/Routes/RoutesLogin.jsx":"8","/home/alan/Escritorio/Integra/IntegraApp/src/components/Routes/RoutesMedic.jsx":"9","/home/alan/Escritorio/Integra/IntegraApp/src/reducers/index.reducer.js":"10","/home/alan/Escritorio/Integra/IntegraApp/src/reducers/plans.reducers.js":"11","/home/alan/Escritorio/Integra/IntegraApp/src/reducers/specialities.reducer.js":"12","/home/alan/Escritorio/Integra/IntegraApp/src/reducers/users.reducer.js":"13","/home/alan/Escritorio/Integra/IntegraApp/src/reducers/affiliates.reducer.js":"14","/home/alan/Escritorio/Integra/IntegraApp/src/actions/constants.actions.js":"15","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserMedRec/RenderPDF.jsx":"16","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserNav/UserNav.jsx":"17","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Footer/Footer.jsx":"18","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Faqs/FaqsPage.jsx":"19","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/LandingPage/LandingPage.jsx":"20","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/NavBar/navBar.jsx":"21","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/ComparativaP/ComparativaP.jsx":"22","/home/alan/Escritorio/Integra/IntegraApp/src/components/Login-Ref/Login/Login.jsx":"23","/home/alan/Escritorio/Integra/IntegraApp/src/actions/plans.actions.js":"24","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/Payment/PaymentStatus.jsx":"25","/home/alan/Escritorio/Integra/IntegraApp/src/supabase.config.js":"26","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/About/About.jsx":"27","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/RegStepForm/RegStepper.jsx":"28","/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/Consults/Consult.jsx":"29","/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/MedicNav/MedicNav.jsx":"30","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminNav/AdminNav.jsx":"31","/home/alan/Escritorio/Integra/IntegraApp/src/actions/getter.action.js":"32","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/Payment/PlanPayments.jsx":"33","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/ComparativaP/AcccessibleTable.jsx":"34","/home/alan/Escritorio/Integra/IntegraApp/src/components/Status/NotFound.jsx":"35","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminOrders/AdminOrders.jsx":"36","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/ComparativaP/InfoPlanCard.jsx":"37","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/Payment/PaymentsTable.jsx":"38","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/RegStepForm/Declaration.jsx":"39","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminsUsers/FormUsers.jsx":"40","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Speciality/FormSpecialities.jsx":"41","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminRegistration/AdminRegistration.jsx":"42","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminAffiliate/AdminAffiliate.jsx":"43","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/MedicsTable/AdminTabs.jsx":"44","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/Payment/PaymentButton.jsx":"45","/home/alan/Escritorio/Integra/IntegraApp/src/functions/calculateAge.js":"46","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Aplications/AplicationsTabs.jsx":"47","/home/alan/Escritorio/Integra/IntegraApp/src/actions/users.action.js":"48","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminsUsers/TableUsers.jsx":"49","/home/alan/Escritorio/Integra/IntegraApp/src/functions/states.js":"50","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/MedicsTable/MedicsTable.jsx":"51","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminMedics/AdminMedicEdit.jsx":"52","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminMedics/AdminMedicAdd.jsx":"53","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Speciality/TableSpecialities.jsx":"54","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Aplications/PartnersAffiliationRequests.jsx":"55","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Aplications/PartnersAplications.jsx":"56","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Aplications/GuestsAplications.jsx":"57","/home/alan/Escritorio/Integra/IntegraApp/src/actions/specialities.actions.js":"58","/home/alan/Escritorio/Integra/IntegraApp/src/actions/elgetter.js":"59","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Speciality/InputSpecialities.jsx":"60","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Speciality/PopUpEdit.jsx":"61","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminHome/AdminHome.jsx":"62","/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/PrescriptionsAndOrders/PrescriptionsAndOrders.jsx":"63","/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/ConsultsTable/ConsultsTable.jsx":"64","/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/MedicPatients/MedicPatients.jsx":"65","/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/MedicHome/MedicHome.jsx":"66","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminOrders/AdminOrderPop.jsx":"67","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminOrders/AdminOrdersEdit.jsx":"68","/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/Consults/PrintMeds/PrintMeds.jsx":"69","/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/Consults/PrintOrders/PrintOrders.jsx":"70","/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/Consults/Orders/Orders.jsx":"71","/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/Consults/Medicines/Medicines.jsx":"72","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminProfile/AdminProfile.jsx":"73","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlansManage.jsx":"74","/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/MedicProfile/MedicProfile.jsx":"75","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Chatbot/Chatbot.jsx":"76","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/LandingPage/StarsBackground.jsx":"77","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/LandingPage/Carousel.jsx":"78","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/RegStepForm/DatosRevision.jsx":"79","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/RegStepForm/DatosEmpresa.jsx":"80","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/NewBenef/NewBenef.jsx":"81","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/NewPlan/NewPlan.jsx":"82","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/AdminPlans.jsx":"83","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/RegStepForm/DatosTitular.jsx":"84","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Footer/Iconos.jsx":"85","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/ContactForm/ContactForm.jsx":"86","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/InfoPlans/InfoPlanes.jsx":"87","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserProfile/UserProfile.jsx":"88","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserMedRec/UserMedRec.jsx":"89","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/RegStepForm/Validator.js":"90","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserHome/UserHome.jsx":"91","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/FamilyMembers.jsx":"92","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/PlansTable.jsx":"93","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/ModifyPlan.jsx":"94","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/PlanDetails.jsx":"95","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/DeletePlan.jsx":"96","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/PlanState.jsx":"97","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Chatbot/Config.jsx":"98","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Chatbot/MessageParser.jsx":"99","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Chatbot/ActionProvider.jsx":"100","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/AffiliateOrdersAndPrescriptions/AffiliateOrdersAndPrescriptions.jsx":"101","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/MyOrders/MyOrders.jsx":"102","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/MyPlan/MyPlan.jsx":"103","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/LandingPage/MediaCard.jsx":"104","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/FamilyMembersList.jsx":"105","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/FamilyStepper.jsx":"106","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/AffiliateDoctors/AffiliateDoctors.jsx":"107","/home/alan/Escritorio/Integra/IntegraApp/src/hooks/query.js":"108","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/InfoPlans/InfoCard.jsx":"109","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Chatbot/LinkList.jsx":"110","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Chatbot/Options.jsx":"111","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/LandingPage/PopUp.jsx":"112","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/Declaration.jsx":"113","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/DatosRevision.jsx":"114","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/DatosFamiliar.jsx":"115","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/MyPlan/CompareMyPlan.jsx":"116","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/AffiliateDoctors/Favs.jsx":"117","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/AffiliateDoctors/SearchDoctors.jsx":"118","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/Validator.js":"119"},{"size":739,"mtime":1623339020067,"results":"120","hashOfConfig":"121"},{"size":559,"mtime":1623339020067,"results":"122","hashOfConfig":"121"},{"size":523,"mtime":1623339020051,"results":"123","hashOfConfig":"121"},{"size":874,"mtime":1623339020067,"results":"124","hashOfConfig":"121"},{"size":818,"mtime":1623339020067,"results":"125","hashOfConfig":"121"},{"size":1166,"mtime":1623341128078,"results":"126","hashOfConfig":"121"},{"size":455,"mtime":1623339020067,"results":"127","hashOfConfig":"121"},{"size":513,"mtime":1623339020067,"results":"128","hashOfConfig":"121"},{"size":668,"mtime":1623339020067,"results":"129","hashOfConfig":"121"},{"size":1735,"mtime":1623339020067,"results":"130","hashOfConfig":"121"},{"size":654,"mtime":1623339020067,"results":"131","hashOfConfig":"121"},{"size":733,"mtime":1623339020067,"results":"132","hashOfConfig":"121"},{"size":402,"mtime":1623339020067,"results":"133","hashOfConfig":"121"},{"size":427,"mtime":1623339020067,"results":"134","hashOfConfig":"121"},{"size":962,"mtime":1623339019899,"results":"135","hashOfConfig":"121"},{"size":1977,"mtime":1623339020051,"results":"136","hashOfConfig":"121"},{"size":19740,"mtime":1623339020051,"results":"137","hashOfConfig":"121"},{"size":1570,"mtime":1623339020059,"results":"138","hashOfConfig":"121"},{"size":8322,"mtime":1623339020059,"results":"139","hashOfConfig":"121"},{"size":12819,"mtime":1623339020059,"results":"140","hashOfConfig":"121"},{"size":1121,"mtime":1623339020059,"results":"141","hashOfConfig":"121"},{"size":2099,"mtime":1623339020059,"results":"142","hashOfConfig":"121"},{"size":15672,"mtime":1623339020063,"results":"143","hashOfConfig":"121"},{"size":397,"mtime":1623339019899,"results":"144","hashOfConfig":"121"},{"size":1826,"mtime":1623339020051,"results":"145","hashOfConfig":"121"},{"size":302,"mtime":1623339020067,"results":"146","hashOfConfig":"121"},{"size":9060,"mtime":1623416164736,"results":"147","hashOfConfig":"121"},{"size":10446,"mtime":1623339020063,"results":"148","hashOfConfig":"121"},{"size":25949,"mtime":1623339020063,"results":"149","hashOfConfig":"121"},{"size":11691,"mtime":1623339020063,"results":"150","hashOfConfig":"121"},{"size":20697,"mtime":1623339020035,"results":"151","hashOfConfig":"121"},{"size":2379,"mtime":1623339019899,"results":"152","hashOfConfig":"121"},{"size":3271,"mtime":1623339020051,"results":"153","hashOfConfig":"121"},{"size":5716,"mtime":1623339020059,"results":"154","hashOfConfig":"121"},{"size":623,"mtime":1623339020067,"results":"155","hashOfConfig":"121"},{"size":26611,"mtime":1623339020035,"results":"156","hashOfConfig":"121"},{"size":512,"mtime":1623339020059,"results":"157","hashOfConfig":"121"},{"size":7122,"mtime":1623339020051,"results":"158","hashOfConfig":"121"},{"size":32304,"mtime":1623339020063,"results":"159","hashOfConfig":"121"},{"size":1239,"mtime":1623339020039,"results":"160","hashOfConfig":"121"},{"size":1959,"mtime":1623339020047,"results":"161","hashOfConfig":"121"},{"size":16445,"mtime":1623339020039,"results":"162","hashOfConfig":"121"},{"size":54431,"mtime":1623339020035,"results":"163","hashOfConfig":"121"},{"size":3553,"mtime":1623339020047,"results":"164","hashOfConfig":"121"},{"size":1915,"mtime":1623339020051,"results":"165","hashOfConfig":"121"},{"size":235,"mtime":1623339020067,"results":"166","hashOfConfig":"121"},{"size":3457,"mtime":1623339020039,"results":"167","hashOfConfig":"121"},{"size":394,"mtime":1623339019899,"results":"168","hashOfConfig":"121"},{"size":31502,"mtime":1623339020039,"results":"169","hashOfConfig":"121"},{"size":210,"mtime":1623339020067,"results":"170","hashOfConfig":"121"},{"size":34276,"mtime":1623339020047,"results":"171","hashOfConfig":"121"},{"size":14271,"mtime":1623339020035,"results":"172","hashOfConfig":"121"},{"size":15153,"mtime":1623339020035,"results":"173","hashOfConfig":"121"},{"size":18312,"mtime":1623339020047,"results":"174","hashOfConfig":"121"},{"size":27238,"mtime":1623339020039,"results":"175","hashOfConfig":"121"},{"size":21960,"mtime":1623339020039,"results":"176","hashOfConfig":"121"},{"size":16741,"mtime":1623339020039,"results":"177","hashOfConfig":"121"},{"size":1775,"mtime":1623339019899,"results":"178","hashOfConfig":"121"},{"size":296,"mtime":1623339019899,"results":"179","hashOfConfig":"121"},{"size":1789,"mtime":1623339020047,"results":"180","hashOfConfig":"121"},{"size":2953,"mtime":1623339020047,"results":"181","hashOfConfig":"121"},{"size":11957,"mtime":1623339020035,"results":"182","hashOfConfig":"121"},{"size":11776,"mtime":1623339020063,"results":"183","hashOfConfig":"121"},{"size":18243,"mtime":1623339020063,"results":"184","hashOfConfig":"121"},{"size":19223,"mtime":1623339020063,"results":"185","hashOfConfig":"121"},{"size":5569,"mtime":1623339020063,"results":"186","hashOfConfig":"121"},{"size":5147,"mtime":1623339020035,"results":"187","hashOfConfig":"121"},{"size":5453,"mtime":1623339020035,"results":"188","hashOfConfig":"121"},{"size":4399,"mtime":1623339020063,"results":"189","hashOfConfig":"121"},{"size":4203,"mtime":1623339020063,"results":"190","hashOfConfig":"121"},{"size":5257,"mtime":1623339020063,"results":"191","hashOfConfig":"121"},{"size":5549,"mtime":1623339020063,"results":"192","hashOfConfig":"121"},{"size":35757,"mtime":1623339020039,"results":"193","hashOfConfig":"121"},{"size":2906,"mtime":1623339020039,"results":"194","hashOfConfig":"121"},{"size":35756,"mtime":1623339020063,"results":"195","hashOfConfig":"121"},{"size":539,"mtime":1623339020059,"results":"196","hashOfConfig":"121"},{"size":2505,"mtime":1623339020059,"results":"197","hashOfConfig":"121"},{"size":973,"mtime":1623339020059,"results":"198","hashOfConfig":"121"},{"size":9761,"mtime":1623339020059,"results":"199","hashOfConfig":"121"},{"size":9951,"mtime":1623339020059,"results":"200","hashOfConfig":"121"},{"size":8462,"mtime":1623339020039,"results":"201","hashOfConfig":"121"},{"size":12901,"mtime":1623339020039,"results":"202","hashOfConfig":"121"},{"size":8515,"mtime":1623339020035,"results":"203","hashOfConfig":"121"},{"size":24563,"mtime":1623339020063,"results":"204","hashOfConfig":"121"},{"size":1204,"mtime":1623339020059,"results":"205","hashOfConfig":"121"},{"size":15083,"mtime":1623339020059,"results":"206","hashOfConfig":"121"},{"size":1002,"mtime":1623339020059,"results":"207","hashOfConfig":"121"},{"size":35062,"mtime":1623339020051,"results":"208","hashOfConfig":"121"},{"size":13212,"mtime":1623339020051,"results":"209","hashOfConfig":"121"},{"size":3146,"mtime":1623339020063,"results":"210","hashOfConfig":"121"},{"size":28156,"mtime":1623339020051,"results":"211","hashOfConfig":"121"},{"size":5693,"mtime":1623339020051,"results":"212","hashOfConfig":"121"},{"size":21146,"mtime":1623339020039,"results":"213","hashOfConfig":"121"},{"size":5555,"mtime":1623339020039,"results":"214","hashOfConfig":"121"},{"size":2657,"mtime":1623339020039,"results":"215","hashOfConfig":"121"},{"size":7160,"mtime":1623339020039,"results":"216","hashOfConfig":"121"},{"size":3193,"mtime":1623339020039,"results":"217","hashOfConfig":"121"},{"size":1443,"mtime":1623339020059,"results":"218","hashOfConfig":"121"},{"size":3383,"mtime":1623339020059,"results":"219","hashOfConfig":"121"},{"size":6002,"mtime":1623339020059,"results":"220","hashOfConfig":"121"},{"size":19497,"mtime":1623339020051,"results":"221","hashOfConfig":"121"},{"size":24067,"mtime":1623339020051,"results":"222","hashOfConfig":"121"},{"size":4084,"mtime":1623339020051,"results":"223","hashOfConfig":"121"},{"size":1913,"mtime":1623339020059,"results":"224","hashOfConfig":"121"},{"size":12615,"mtime":1623339020051,"results":"225","hashOfConfig":"121"},{"size":9134,"mtime":1623339020051,"results":"226","hashOfConfig":"121"},{"size":3169,"mtime":1623339020047,"results":"227","hashOfConfig":"121"},{"size":153,"mtime":1623339020067,"results":"228","hashOfConfig":"121"},{"size":2099,"mtime":1623339020059,"results":"229","hashOfConfig":"121"},{"size":524,"mtime":1623339020059,"results":"230","hashOfConfig":"121"},{"size":1226,"mtime":1623339020059,"results":"231","hashOfConfig":"121"},{"size":1689,"mtime":1623339020059,"results":"232","hashOfConfig":"121"},{"size":33845,"mtime":1623339020051,"results":"233","hashOfConfig":"121"},{"size":10284,"mtime":1623339020051,"results":"234","hashOfConfig":"121"},{"size":27126,"mtime":1623339020051,"results":"235","hashOfConfig":"121"},{"size":9363,"mtime":1623339020051,"results":"236","hashOfConfig":"121"},{"size":21976,"mtime":1623339020047,"results":"237","hashOfConfig":"121"},{"size":37664,"mtime":1623339020051,"results":"238","hashOfConfig":"121"},{"size":3146,"mtime":1623339020051,"results":"239","hashOfConfig":"121"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},"1k7hp55",{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"295","messages":"296","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"242"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"242"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"242"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"242"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"242"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"242"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"242"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"242"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"242"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"242"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"242"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"242"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"242"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"242"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"242"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},"/home/alan/Escritorio/Integra/IntegraApp/src/index.js",[],["494","495"],"/home/alan/Escritorio/Integra/IntegraApp/src/firebaseConfig.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/App.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/store/root.store.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Routes/RoutesAffiliate.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Routes/RoutesGuest.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Routes/RoutesAdmin.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Routes/RoutesLogin.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Routes/RoutesMedic.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/reducers/index.reducer.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/reducers/plans.reducers.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/reducers/specialities.reducer.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/reducers/users.reducer.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/reducers/affiliates.reducer.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/actions/constants.actions.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserMedRec/RenderPDF.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserNav/UserNav.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Footer/Footer.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Faqs/FaqsPage.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/LandingPage/LandingPage.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/NavBar/navBar.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/ComparativaP/ComparativaP.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Login-Ref/Login/Login.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/actions/plans.actions.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/Payment/PaymentStatus.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/supabase.config.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/About/About.jsx",["496","497","498","499","500","501","502","503","504","505","506","507"],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/RegStepForm/RegStepper.jsx",["508","509"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport DatosTitular from './DatosTitular';\nimport DatosEmpresa from './DatosEmpresa';\nimport DatosRevision from './DatosRevision';\nimport supabase from '../../../supabase.config';\nimport style from './RegStepper.module.css';\nimport swal from 'sweetalert2';\nimport Declaration from './Declaration';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    backButton: {\n        marginRight: theme.spacing(1),\n        marginLeft: theme.spacing(5),\n        color: '#fafafa',\n        width: 'fit-content',\n        border: '3px solid #2c7f7b',\n        borderRadius: '5px',\n        backgroundColor: '#2c7f7b',\n        fontWeight: 'bold',\n        fontSize: '15px',\n        '&:hover': {\n            backgroundColor: '#fafafa',\n            color: '#2c7f7b',\n        },\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    popupBtn: {\n        color: '#fafafa',\n        width: 'fit-content',\n        marginLeft: '40px',\n        border: '3px solid #2c7f7b',\n        borderRadius: '5px',\n        backgroundColor: '#2c7f7b',\n        fontWeight: 'bold',\n        fontSize: '15px',\n        '&:hover': {\n            backgroundColor: '#fafafa',\n            color: '#2c7f7b',\n        },\n    },\n}));\n\nfunction getSteps() {\n    return [\n        'Datos del Titular',\n        'Datos de la Empresa',\n        'Antecedentes de Salud',\n        'Resumen',\n    ];\n}\n\nfunction getStepContent(stepIndex) {\n    switch (stepIndex) {\n        case 0:\n            return <DatosTitular />;\n        case 1:\n            return <DatosEmpresa />;\n        case 2:\n            return <Declaration />;\n        case 3:\n            return <DatosRevision />;\n        default:\n            return 'Unknown stepIndex';\n    }\n}\n\nexport default function RegStepper() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = useState(0);\n    const steps = getSteps();\n\n    const alltrue = (obj) => {\n        let completeError = true;\n        for (let error in obj) {\n            completeError =\n                completeError &&\n                typeof Object.values(obj[error])[0] !== 'string';\n        }\n        return completeError;\n    };\n\n    const handleNext = async () => {\n        switch (activeStep.toString()) {\n            case '0':\n                const errorsTitular = JSON.parse(\n                    localStorage.getItem('errorsTitular')\n                );\n                if (errorsTitular) {\n                    alltrue(errorsTitular)\n                        ? setActiveStep((prevActiveStep) => prevActiveStep + 1)\n                        : new swal('Ups!', 'Debes completar todos los campos');\n                } else new swal('Ups!', 'Por favor complete el formulario.');\n                break;\n            case '1':\n                const errorsEmpresa = JSON.parse(\n                    localStorage.getItem('errorsEmpresa')\n                );\n                if (errorsEmpresa) {\n                    alltrue(errorsEmpresa)\n                        ? setActiveStep((prevActiveStep) => prevActiveStep + 1)\n                        : new swal('Ups!', 'Debes completar todos los campos');\n                } else\n                    new swal('Error', 'Complete el formulario para continuar');\n                break;\n            case '2':\n                const datosDeclaration = JSON.parse(\n                    localStorage.getItem('datosDeclaration')\n                );\n                if (datosDeclaration) {\n                    if (datosDeclaration.accept)\n                        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n                    else new swal('Ups!', 'Debe aceptar la declaracion Jurada');\n                } else new swal('Ups!', 'No se registraron datos');\n                break;\n\n            default:\n                break;\n        }\n\n        if (activeStep === steps.length - 1) {\n            const datosTitular = JSON.parse(\n                localStorage.getItem('datosTitular')\n            );\n            const datosEmpresa = JSON.parse(\n                localStorage.getItem('datosEmpresa')\n            );\n            const datosDeclaration = JSON.parse(\n                localStorage.getItem('datosDeclaration')\n            );\n\n            const { data: idPartners } = await supabase\n                .from('partners')\n                .select('family_group');\n\n            const lastId =\n                idPartners\n                    .sort(function (a, b) {\n                        if (a.family_group < b.family_group) {\n                            return 1;\n                        }\n                        if (a.family_group > b.family_group) {\n                            return -1;\n                        }\n                        return 0;\n                    })\n                    .shift().family_group + 1;\n\n            let idCompany = null;\n\n            const { data: companyData } = await supabase\n                .from('companies')\n                .select('id')\n                .eq('cuit', datosEmpresa.company_cuit);\n            console.log(companyData, 'companyData');\n\n            if (companyData.length === 0) {\n                const { data: newId, error: errorInsertCompany } =\n                    await supabase.from('companies').insert([\n                        {\n                            business_name: datosEmpresa.bussines_name,\n                            cuit: datosEmpresa.company_cuit,\n                            phone_number: datosEmpresa.company_phone,\n                            email: datosEmpresa.company_email,\n                        },\n                    ]);\n                console.log(errorInsertCompany, 'errorInsertCompany');\n                console.log(newId, 'newId');\n\n                idCompany = newId[0].id;\n            } else {\n                idCompany = companyData[0].id;\n            }\n\n            const { error: partner } = await supabase.from('partners').insert([\n                {\n                    dni: datosTitular.dni,\n                    name: datosTitular.first_name,\n                    lastname: datosTitular.last_name,\n                    birthdate: datosTitular.birth_date,\n                    phone_number: datosTitular.phone_number,\n                    titular: true,\n                    family_bond: 'titular',\n                    family_group: lastId,\n                    state: 'revision pendiente',\n                    email: datosTitular.email,\n                    company_id: idCompany,\n                    gender: datosTitular.gender,\n                },\n            ]);\n\n            const { error: address } = await supabase.from('address').insert([\n                {\n                    street: datosTitular.street_name,\n                    street_number: datosTitular.number,\n                    floor: datosTitular.floor && datosTitular.floor,\n                    medic_id: null,\n                    locality_id: datosTitular.locality.split('-')[0],\n                    partner_dni: datosTitular.dni,\n                    department:\n                        datosTitular.apartment && datosTitular.apartment,\n                },\n            ]);\n\n            await supabase.from('medical_records').insert([\n                {\n                    partner_dni: datosTitular.dni,\n                    declaration: JSON.stringify(datosDeclaration),\n                },\n            ]);\n            localStorage.removeItem('datosTitular');\n            localStorage.removeItem('datosDeclaration');\n            localStorage.removeItem('datosEmpresa');\n            localStorage.removeItem('errorsTitular');\n            localStorage.removeItem('errorsDeclaration');\n            localStorage.removeItem('errorsEmpresa');\n\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        }\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    return (\n        <div className={classes.root}>\n            <Stepper activeStep={activeStep} alternativeLabel >\n                {steps.map((label) => (\n                    <Step key={label}>\n                        <StepLabel>{label}</StepLabel>\n                    </Step>\n                ))}\n            </Stepper>\n            <div>\n                {activeStep === steps.length ? (\n                    <div>\n                        <div className={style.cartel}>\n                            <img\n                                src='../../assets/icons/medicrecordd.png'\n                                alt='medicRecord'\n                            />\n\n                            <div className={style.text}>\n                                <h3 className={style.title}>\n                                    Su Registro esta Completo\n                                </h3>\n\n                                <h4 className={style.subtitle}>\n                                    Muchas gracias por su tiempo.\n                                </h4>\n                            </div>\n                        </div>\n                    </div>\n                ) : (\n                    <div classname={style.btn}>\n                        <Typography className={classes.instructions}>\n                            {getStepContent(activeStep)}\n                        </Typography>\n                        <div >\n                            <Button\n                                disabled={activeStep === 0}\n                                onClick={handleBack}\n                                className={classes.backButton}\n                            >\n                                Back\n                            </Button>\n                            <Button\n                                className={classes.popupBtn}\n                                variant='contained'\n                                color='primary'\n                                onClick={handleNext}\n                            >\n                                {activeStep === 3 ? 'Finish' : 'Next'}\n                            </Button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/Consults/Consult.jsx",["510","511"],"import React, { useState, useEffect } from 'react';\nimport emailjs from 'emailjs-com';\nimport {\n    Button,\n    List,\n    ListItem,\n    Divider,\n    Card,\n    Avatar,\n    TextField,\n    Typography,\n} from '@material-ui/core';\nimport 'firebase/auth';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport Medicines from './Medicines/Medicines.jsx';\nimport PrintMeds from './PrintMeds/PrintMeds.jsx';\nimport Orders from './Orders/Orders.jsx';\nimport PrintOrders from './PrintOrders/PrintOrders.jsx';\n// import NewOrderDialog from './NewOrderDialog/NewOrderDialog.jsx';\n// import NewOrder from './NewOrderDialog/NewOrder';\nimport supabase from '../../../supabase.config.js';\nimport Swal from 'sweetalert2';\nimport styles from './Consult.module.css';\n\nconst useStyles = makeStyles((theme) => ({\n    dividerFullWidth: {\n        margin: `5px 0 0 ${theme.spacing(9)}px`,\n    },\n    card: {\n        // maxWidth: '90%',\n        width:'100%',\n    },\n    textField: {\n        width: '84%',\n    },\n    largeAvatar: {\n        width: theme.spacing(7),\n        height: theme.spacing(7),\n    },\n    divider:{\n        listStyleType:'none',\n    },\n    title:{\n        color:'#fafafa',\n    },\n    mainButton:{\n        color:'#fafafa',\n    }\n}));\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            // Purple and green play nicely together.\n            main: '#41aea9',\n        },\n        secondary: {\n            // This is green.A700 as hex.\n            main: '#11cb5f',\n        },\n    },\n});\n\nexport default function Consult({ firebase }) {\n    let classes = useStyles();\n\n    // Inicialmente se trae los medicamentos del localstorage\n    let meds = JSON.parse(localStorage.getItem('medicines')) || [];\n    let [medicines, setMedicines] = useState(meds);\n\n    // Inicialmente se trae las ordenes del localstorage\n    let ords = JSON.parse(localStorage.getItem('orders')) || [];\n    let [orders, setOrders] = useState(ords);\n\n    var today = new Date();\n    let date =\n        today.getFullYear() +\n        '-' +\n        (today.getMonth() + 1) +\n        '-' +\n        today.getDate();\n\n    // Se trae la info del doc del localstorage\n    let [medic] = useState(JSON.parse(localStorage.getItem('medicdata')));\n\n    // Estado local con los datos del paciente\n    let [patient, setPatient] = useState(null);\n\n    // Cuando recarga la página setea los datos del paciente\n    // que obtiene por query.\n    useEffect(() => {\n        // Se trae x query la info del paciente\n        let search = window.location.search;\n        let params = new URLSearchParams(search);\n        setPatient({\n            dni: params.get('dni'),\n            name: params.get('name'),\n            lastname: params.get('lastname'),\n            birthdate: params.get('birthdate'),\n            gender: params.get('gender'),\n            email: params.get('email'),\n        });\n    }, []);\n\n    // La información de la consulta se guarda en infObj\n    let infObj = {\n        date,\n        doctor: {\n            name: medic.name,\n            lastname: medic.lastname,\n            medical_specialities: medic.medical_specialities,\n            medic_license: medic.medic_license,\n        },\n        patient: null,\n        diagnosis: null,\n        medicines,\n        orders,\n    };\n\n    // Una vez seteados los datos del paciente los guarda\n    // en la info a compartir.\n    useEffect(() => {\n        if (patient) {\n            infObj.patient = {\n                name: patient.name,\n                lastname: patient.lastname,\n                plan: patient.plan,\n                affiliate_number: patient.dni,\n            };\n        }\n        //eslint-disable-next-line\n    }, [patient]);\n\n    const getAge = () =>\n        Math.floor(\n            (new Date() - new Date(patient.birthdate).getTime()) / 3.15576e10\n        );\n\n    function sendEmailConsult(props) {\n        emailjs\n            .send(\n                'service_wcpzjw7',\n                'template_qkdom45',\n                props,\n                'user_mgft1j53RDkaGc1EWyKNK'\n            )\n            .then(\n                (result) => {\n                    console.log('resultado:', result.text);\n                },\n                (error) => {\n                    console.log('error:', error.text);\n                }\n            );\n    }\n\n    // let [diagnoses, setDiagnoses] = useState([]);\n\n    let [input, setInput] = useState({\n        reason: '',\n        diagnosis: '',\n        observations: '',\n        posology: '',\n    });\n\n    let [errors, setErrors] = useState({\n        reason: false,\n        diagnosis: false,\n        observations: false,\n    });\n\n    function validate(inputName, value) {\n        const pattern = /^[A-Za-z0-9\\s]+$/g;\n        let errors = {};\n\n        switch (inputName) {\n            case 'reason': {\n                if (!pattern.test(value) && value.length > 0) {\n                    errors.reason = true;\n                } else {\n                    errors.reason = false;\n                }\n                break;\n            }\n            case 'diagnosis': {\n                if (!pattern.test(value) && value.length > 0) {\n                    errors.diagnosis = true;\n                } else {\n                    errors.diagnosis = false;\n                }\n                break;\n            }\n            case 'observations': {\n                if (!pattern.test(value)) {\n                    errors.observations = true;\n                } else {\n                    errors.observations = false;\n                }\n                break;\n            }\n            default:\n                return null;\n        }\n        return errors;\n    }\n\n    const handleInputChange = (e) => {\n        setErrors(validate(e.target.name, e.target.value));\n        setInput({\n            ...input,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    const handleSubmit = async () => {\n        let medicines = JSON.parse(localStorage.getItem('medicines'));\n        let orders = JSON.parse(localStorage.getItem('orders'));\n        if (!errors.reason && !errors.diagnosis && !errors.observations) {\n            const { data: newConsult } = await supabase\n                .from('medical_consultations')\n                .insert([\n                    {\n                        partner_dni: patient.dni,\n                        medic_dni: medic.dni,\n                        reason: input.reason,\n                        diagnosis: input.diagnosis,\n                        observations: input.observations,\n                    },\n                ]);\n\n            let consultationId = newConsult[0].id;\n            if (newConsult) {\n                if (medicines.length) {\n                    sendEmailConsult({\n                        dr: medic,\n                        patient: patient,\n                        date,\n                        consult: input,\n                        prescriptions: medicines.join(' '),\n                    });\n                } else {\n                    sendEmailConsult({\n                        dr: medic,\n                        patient: patient,\n                        date,\n                        consult: input,\n                        prescriptions: 'nada',\n                    });\n                }\n            }\n            if (medicines.length) {\n                await supabase.from('prescriptions').insert([\n                    {\n                        medical_consultation_id: consultationId,\n                        drug_name: medicines[0],\n                        date: date,\n                        drug_name_2: medicines.length > 1 ? medicines[1] : '',\n                        partner_dni: patient.dni,\n                    },\n                ]);\n            }\n            if (orders) {\n                await supabase.from('orders').insert([\n                    {\n                        medical_consultation_id: consultationId,\n                        study_name: orders[0],\n                        date: date,\n                        partner_dni: patient.dni,\n                        status: 'en espera de autorizacion',\n                        medic_dni: medic.dni,\n                    },\n                ]);\n            }\n            Swal.fire({\n                title: 'Hecho!',\n                text: 'La consulta fué subida correctamente',\n                icon: 'success',\n                showConfirmButton: true,\n                reverseButtons: true,\n            }).then((el) => {\n                if (el.isConfirmed) {\n                    localStorage.removeItem('medicines');\n                    localStorage.removeItem('orders');\n                    let new_window = window.open(window.location, '_self');\n                    new_window.close();\n                }\n            });\n\n            // sendEmailConsult({dr:medic, patient: patientData, date:today, consult: input})\n        } else {\n            Swal.fire({\n                icon: 'error',\n                title: 'Error',\n                text: 'Revisa los campos!',\n            });\n        }\n    };\n\n    // Al cambiar una medicina guarda\n    // en la info a compartir a Medicines.jsx.\n    useEffect(() => {\n        if (medicines.length) {\n            infObj.medicines = medicines;\n        }\n        //eslint-disable-next-line\n    }, [medicines]);\n\n    // Función que obtiene las modificaciones de los medicamentos\n    // traidas del componente Medicines\n    function getterMed(arr) {\n        setMedicines(arr);\n        return;\n    }\n\n    // Una vez seteados los cambios de medicamentos los guarda\n    // en la info a compartir.\n    useEffect(() => {\n        if (medicines.length) {\n            infObj.medicines = medicines;\n        }\n        //eslint-disable-next-line\n    }, [medicines]);\n\n    // Función que obtiene las modificaciones de las órdenes\n    // traidas del componente Medicines\n    function getterOrder(arr) {\n        setOrders(arr);\n        return;\n    }\n\n    // Una vez seteados los cambios de medicamentos los guarda\n    // en la info a compartir.\n    useEffect(() => {\n        if (orders.length) {\n            infObj.orders = orders;\n        }\n        //eslint-disable-next-line\n    }, [orders]);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className={styles.cardContainer}>\n                <section className={styles.section}>\n                    <h2>Consulta</h2>\n                </section>\n                <div className={styles.formContainer}>\n                    <Card className={classes.card}>\n                        {/* <List> */}\n                            {medic && (\n                                <div className={styles.medicData}>\n                                    <div className={styles.medicFirstColumn}>\n                                        <div>\n                                            <ListItem>\n                                                <Avatar\n                                                    alt={medic.name}\n                                                    src={medic.profilePic}\n                                                    className={classes.largeAvatar}\n                                                />\n                                            </ListItem>\n                                        </div>\n                                        <div>\n                                            <ListItem>\n                                                <Typography\n                                                    gutterBottom\n                                                    variant='h5'\n                                                    component='h2'\n                                                >\n                                                    {medic.name} {medic.lastname}\n                                                </Typography>\n                                            </ListItem>\n                                        </div>\n                                    </div>\n                                    <div className={styles.medicSecondColumn}>\n                                        <div>\n                                            <ListItem>\n                                                <Typography\n                                                    gutterBottom\n                                                    variant='subtitle1'\n                                                    component='h2'\n                                                >\n                                                    {medic.medic_license}\n                                                </Typography>\n                                            </ListItem>\n                                        </div>\n                                        <div>\n                                            <ListItem>\n                                                <Typography\n                                                    gutterBottom\n                                                    variant='subtitle1'\n                                                    component='h2'\n                                                >\n                                                    {medic.medical_specialities[0].name}\n                                                </Typography>\n                                            </ListItem>\n                                        </div>\n                                    </div>\n                                </div>\n                            )}\n                            <Divider component='li' className={classes.divider}/>\n                            {patient && (\n                                <div className={styles.patientData}>\n                                    <div className={styles.patientFirstColumn}>\n                                        <div>\n                                            <ListItem>\n                                                <Typography\n                                                    gutterBottom\n                                                    variant='h6'\n                                                    component='h2'\n                                                >\n                                                    Paciente:\n                                                </Typography>\n                                            </ListItem>\n                                        </div>\n                                        <div>\n                                            <ListItem>\n                                                <Typography\n                                                    gutterBottom\n                                                    variant='h5'\n                                                    component='h2'\n                                                >\n                                                    {patient.name} {patient.lastname}\n                                                </Typography>\n                                            </ListItem>\n                                        </div>\n                                    </div>\n                                    <div className={styles.patientSecondColumn}>\n                                        <div>\n                                            <ListItem>\n                                                <Typography\n                                                    gutterBottom\n                                                    variant='subtitle1'\n                                                    component='h2'\n                                                >\n                                                    DNI: {patient.dni}\n                                                </Typography>\n                                            </ListItem>\n                                        </div>\n                                        <div>\n                                            <ListItem>\n                                                <Typography\n                                                    gutterBottom\n                                                    variant='subtitle1'\n                                                    component='h2'\n                                                >\n                                                    Edad: {getAge()}\n                                                </Typography>\n                                            </ListItem>\n                                        </div>\n                                        <div>\n                                            <ListItem>\n                                                <Typography\n                                                    gutterBottom\n                                                    variant='subtitle1'\n                                                    component='h2'\n                                                >\n                                                    Sexo: {patient.gender}\n                                                </Typography>\n                                            </ListItem>\n                                        </div>\n                                    </div>\n                                </div>\n                            )}\n                            <Divider component='li' className={classes.divider} />\n                            <div className={styles.form}>\n                                <div className={styles.input}>\n                                    <TextField\n                                        id='reason-input'\n                                        name='reason'\n                                        label='Razón de consulta'\n                                        variant='outlined'\n                                        multiline\n                                        value={input.reason}\n                                        rows={6}\n                                        className={classes.textField}\n                                        onChange={handleInputChange}\n                                    />\n                                </div>\n                                <div className={styles.input}>\n                                    <TextField\n                                        id='diagnosis-input'\n                                        name='diagnosis'\n                                        className={classes.textField}\n                                        label='Diagnóstico'\n                                        variant='outlined'\n                                        // value={input.diagnosis}\n                                        multiline\n                                        rows={6}\n                                        className={classes.textField}\n                                        onChange={handleInputChange}\n                                    />\n                                </div>\n                                <div className={styles.input}>\n                                    <TextField\n                                        id='ovservations-input'\n                                        name='observations'\n                                        label='Observaciones'\n                                        variant='outlined'\n                                        value={input.observations}\n                                        multiline\n                                        rows={6}\n                                        className={classes.textField}\n                                        onChange={handleInputChange}\n                                    />\n                                </div>\n                            </div>\n                            <Divider component='li' className={classes.divider} />\n                            <div className={styles.medicines}>\n                                <div className={styles.mydiv} autoFocus>\n                                    <p className={styles.mydivt}>Medicación indicada:</p>\n                                    {medicines && (\n                                        <div>\n                                            <ul>\n                                                {!!medicines.length &&\n                                                    medicines.map((med, index) => (\n                                                        <li\n                                                            className={styles.limed}\n                                                            key={index}\n                                                        >\n                                                            {med}\n                                                        </li>\n                                                    ))}\n                                            </ul>\n                                        </div>\n                                    )}\n                                    <div className={styles.onelinebtns}>\n                                        <Medicines handleEvent={getterMed} />\n                                        {patient && <PrintMeds info={infObj} />}\n                                    </div>\n                                </div>\n                                <div className={styles.mydiv2} autoFocus>\n                                    <p className={styles.mydivt2}>\n                                        Posología y administración:\n                                    </p>\n                                    <input\n                                        id='posologia-input'\n                                        name='posology'\n                                        className={styles.posinput}\n                                        onChange={handleInputChange}\n                                    />\n                                    <Button\n                                        name='guardar'\n                                        className={styles.btnprint}\n                                        size='small'\n                                        variant='outlined'\n                                        color='primary'\n                                    >\n                                        Imprimir\n                                    </Button>\n                                </div>\n                            </div>\n                            <Divider component='li' className={classes.divider} />\n                            <div className={styles.orders}>\n                                <div className={styles.mydiv} autoFocus>\n                                    <p className={styles.mydivt}>Estudios solicitados:</p>\n                                    {orders && (\n                                        <div>\n                                            <ul>\n                                                {!!orders.length &&\n                                                    orders.map((med, index) => (\n                                                        <li\n                                                            className={styles.limed}\n                                                            key={index}\n                                                        >\n                                                            {med}\n                                                        </li>\n                                                    ))}\n                                            </ul>\n                                        </div>\n                                    )}\n                                    <div className={styles.onelinebtns}>\n                                        <Orders handleEvent={getterOrder} />\n                                        {patient && <PrintOrders info={infObj} />}\n                                    </div>\n                                </div>\n                                <div className={styles.mydiv2} autoFocus>\n                                    <p className={styles.mydivt2}>\n                                        Indicaciones para la realización de los estudios:\n                                    </p>\n                                    <input\n                                        id='indicaciones-input'\n                                        name='instructions'\n                                        className={styles.posinput}\n                                        onChange={handleInputChange}\n                                    />\n                                    <Button\n                                        name='guardar'\n                                        className={styles.btnprint}\n                                        size='small'\n                                        variant='outlined'\n                                        color='primary'\n                                    >\n                                        Imprimir\n                                    </Button>\n                                </div>\n                            </div>\n                            <Divider component='li' className={classes.divider} />\n                            <div className={styles.buttons}>\n                                <div className={styles.btn}>\n                                    <Button\n                                        className={classes.mainButton}\n                                        variant='contained'\n                                        size='large'\n                                        color='primary'\n                                        onClick={handleSubmit}\n                                    >\n                                        Subir consulta\n                                    </Button>\n                                </div>\n                            </div>\n                        {/* </List> */}\n                    </Card>\n                </div>\n            </div>\n        </ThemeProvider>\n    );\n}\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/MedicNav/MedicNav.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminNav/AdminNav.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/actions/getter.action.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/Payment/PlanPayments.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/ComparativaP/AcccessibleTable.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Status/NotFound.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminOrders/AdminOrders.jsx",["512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ClearAllIcon from '@material-ui/icons/ClearAll';\nimport EditIcon from '@material-ui/icons/Edit';\nimport blue from '@material-ui/core/colors/blue';\nimport 'firebase/auth';\nimport AdminMedicAdd from '../AdminMedics/AdminMedicAdd';\nimport AdminOrdersEdit from './AdminOrdersEdit';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nimport PopUp from './AdminOrderPop';\n\nimport {\n    Avatar,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    FormControl,\n    InputLabel,\n    Select,\n    Input,\n    DialogActions,\n    TextField,\n} from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport calculateAge from '../../../functions/calculateAge';\nimport supabase from '../../../supabase.config';\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n    { id: 'actions', numeric: false, disablePadding: true, label: 'ACCIONES' },\n    { id: 'date', numeric: false, disablePadding: true, label: 'FECHA' },\n    { id: 'lastname', numeric: false, disablePadding: false, label: 'MEDICO' },\n    {\n        id: 'lastname',\n        numeric: false,\n        disablePadding: false,\n        label: 'PACIENTE',\n    },\n    { id: 'dni', numeric: true, disablePadding: false, label: 'DNI SOCIO' },\n    { id: 'status', numeric: false, disablePadding: false, label: 'ESTADO' },\n    { id: 'view', numeric: false, disablePadding: false, label: 'VER' },\n];\n\nfunction EnhancedTableHead(props) {\n    const {\n        classes,\n        onSelectAllClick,\n        order,\n        orderBy,\n        numSelected,\n        rowCount,\n        onRequestSort,\n    } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead className={classes.title}>\n            <TableRow>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align='left'\n                        padding='default'\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            className={classes.title}\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc'\n                                        ? 'sorted descending'\n                                        : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n        backgroundColor: lighten('#34a7a1', 0.3),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                  color: '#fafafa',\n                  backgroundColor: lighten(blue[500], 0.5), //color barra superior cuando selecciono item\n                  fontWeight: 'bold',\n                  fontSize: '30px',\n              }\n            : {\n                  color: theme.palette.text.primary,\n                  backgroundColor: lighten('#34a7a1', 0.3),\n              },\n    title: {\n        flex: '1 1 100%',\n        fontWeight: 'bold',\n        fontSize: '1.4rem',\n        color: '#fafafa',\n        textAlign: 'center',\n    },\n    filters: {\n        display: 'flex',\n    },\n    iconFilter: {\n        color: '#fafafa',\n        fontWeight: 'bold',\n        '&:hover': {\n            backgroundColor: '#34a7a1',\n        },\n    },\n    iconBlock: {\n        color: '#fafafa',\n        fontWeight: 'bold',\n        '&:hover': {\n            backgroundColor: blue[500],\n        },\n    },\n    popup: {\n        color: '#fafafa',\n        backgroundColor: '#2c7f7b',\n        fontWeight: 'bold',\n        fontSize: '30px',\n        marginBottom: '2rem',\n    },\n    popupBtn: {\n        color: '#fafafa',\n        padding: theme.spacing(0.5),\n        border: '3px solid #2c7f7b',\n        backgroundColor: '#2c7f7b',\n        fontWeight: 'bold',\n        fontSize: '15px',\n        '&:hover': {\n            backgroundColor: lighten('#fafafa', 0.2),\n            color: '#2c7f7b',\n            padding: theme.spacing(0.5),\n        },\n    },\n    select: {\n        width: '100%',\n        marginBottom: '2rem',\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected, setToShowRows, toShowRows, rows, setRows } = props;\n    const [open, setOpen] = React.useState(false);\n    const [selectedOption, setSelectedOption] = React.useState('');\n    const [selectedState, setSelectedState] = React.useState('activo');\n\n    const handleChange = (event) => {\n        event.target.name === 'state'\n            ? setSelectedState(event.target.value) &&\n              setSelectedOption(event.target.value)\n            : setSelectedOption(event.target.value);\n    };\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        setToShowRows(rows);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        selectedOption === 'state'\n            ? filter(e.target[0].value, e.target[1].value)\n            : filter(e.target[0].value, e.target[2].value);\n    };\n\n    const filter = (value) => {\n        let show = [];\n        setToShowRows(rows);\n        if (value === 'autorizada') {\n            value\n                ? setToShowRows(\n                      (show = rows.filter(\n                          (r) => r.order_status.name === 'autorizada'\n                      ))\n                  )\n                : setToShowRows(rows);\n        } else if (value === 'rechazada') {\n            value\n                ? setToShowRows(\n                      (show = rows.filter(\n                          (r) => r.order_status.name === 'rechazada'\n                      ))\n                  )\n                : setToShowRows(rows);\n        } else if (value === 'en proceso') {\n            value\n                ? setToShowRows(\n                      (show = rows.filter(\n                          (r) => r.order_status.name === 'en proceso'\n                      ))\n                  )\n                : setToShowRows(rows);\n        } else if (value === 'recibida') {\n            value\n                ? setToShowRows(\n                      (show = rows.filter(\n                          (r) => r.order_status.name === 'recibida'\n                      ))\n                  )\n                : setToShowRows(rows);\n        } else setToShowRows(rows);\n        setOpen(false);\n    };\n\n    return (\n        <Toolbar className={classes.root}>\n            <Typography\n                className={classes.title}\n                variant='h6'\n                id='tableTitle'\n                component='div'\n            >\n                AUTORIZACIONES\n            </Typography>\n            <Tooltip title='Clear' onClick={handleClose}>\n                <IconButton aria-label='reset' className={classes.iconFilter}>\n                    <ClearAllIcon />\n                </IconButton>\n            </Tooltip>\n            <Tooltip title='Filter list' onClick={handleClickOpen}>\n                <IconButton\n                    aria-label='filter list'\n                    className={classes.iconFilter}\n                >\n                    <FilterListIcon />\n                </IconButton>\n            </Tooltip>\n\n            <Dialog\n                disableBackdropClick\n                disableEscapeKeyDown\n                open={open}\n                onClose={handleClose}\n            >\n                <DialogTitle className={classes.popup}>\n                    FILTRADO POR ESTADO:\n                </DialogTitle>\n                <form onSubmit={handleSubmit}>\n                    <DialogContent>\n                        <FormControl className={classes.select}>\n                            {/* <InputLabel htmlFor=\"demo-dialog-native\">Filtrar por</InputLabel> */}\n                            <Select\n                                variant='outlined'\n                                size='medium'\n                                native\n                                value={selectedOption}\n                                onChange={handleChange}\n                                input={<Input id='demo-dialog-native' />}\n                            >\n                                <option aria-label='None' value='' />\n                                <option value='autorizada'>Autorizada</option>\n                                <option value='rechazada'>Rechazada</option>\n                                <option value='en proceso'>En proceso</option>\n                                <option value='recibida'>Recibida</option>\n                            </Select>\n                        </FormControl>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            onClick={handleClose}\n                            className={classes.popupBtn}\n                        >\n                            Cancelar\n                        </Button>\n                        <Button type='submit' className={classes.popupBtn}>\n                            Filtrar\n                        </Button>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\n//-------------------- Style Table Orders\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n    title: {\n        color: '#212121',\n        fontWeight: 'bold',\n        backgroundColor: lighten('#34a7a1', 0.6),\n    },\n    rowColor: {\n        backgroundColor: lighten('#e0e0e0', 0.3),\n        ':checked': {\n            color: blue[500],\n        },\n    },\n    iconFilter: {\n        color: 'rgba(0, 0, 0, 0.47)',\n        fontWeight: 'bold',\n        '&:hover': {\n            backgroundColor: lighten('#34a7a1', 0.8),\n        },\n    },\n}));\n\nexport default function EnhancedTable() {\n    const classes = useStyles();\n    const [status, setStatus] = React.useState([]);\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rows, setRows] = React.useState([]);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [listMedics, setListMedics] = React.useState([]);\n    const [medicSpecialities, setMedicSpecialities] = React.useState([]);\n    const [editActive, setEditActive] = React.useState(false);\n    const [data, setData] = React.useState(null);\n    const [toShowRows, setToShowRows] = React.useState([]);\n    const MySwal = withReactContent(Swal);\n    const [row, setRow] = React.useState({\n        date: '',\n        study_name: '',\n        partners: {\n            name: '',\n            lastname: '',\n            dni: '',\n        },\n        medics: {\n            name: '',\n            lastname: '',\n        },\n        medical_consultations: {\n            id: '',\n        },\n        order_status: {\n            name: '',\n        },\n        results: {\n            results: {\n                results: '',\n            },\n        },\n        order_status: {\n            name: '',\n        },\n    });\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = (row) => {\n        setRow(row);\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const fetchOrders = async () => {\n        const { data: orders, error: errorFetchOrders } = await supabase\n            .from('orders')\n            .select(\n                'id, date, results, study_name, order_status(name), partners(dni, name, lastname), medics(dni, name, lastname), medical_consultations(id) '\n            );\n\n        orders && setRows(orders);\n    };\n\n    const fetchOrder_status = async () => {\n        const { data: statusDB, error: errorStatus } = await supabase\n            .from('order_status')\n            .select('*');\n        setStatus(statusDB);\n    };\n\n    React.useEffect(() => {\n        fetchOrder_status();\n        fetchOrders();\n    }, []);\n    React.useEffect(() => {\n        setToShowRows(rows);\n    }, [rows]);\n\n    const handleEdit = (data) => {\n        setData(data);\n        setEditActive(true);\n        if (editActive) setEditActive(false);\n    };\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.name);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1)\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    /* const isSelected = (name) => selected.indexOf(name) !== -1; */\n\n    const emptyRows =\n        rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n    /*     setToShowRows(rows)\n     */\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar\n                    numSelected={selected.length}\n                    setToShowRows={setToShowRows}\n                    toShowRows={toShowRows}\n                    rows={rows}\n                />\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby='tableTitle'\n                        size='small'\n                        aria-label='enhanced table'\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {stableSort(\n                                toShowRows,\n                                getComparator(order, orderBy)\n                            )\n                                .slice(\n                                    page * rowsPerPage,\n                                    page * rowsPerPage + rowsPerPage\n                                )\n                                .map((row, index) => {\n                                    /* const isItemSelected = isSelected(row.name);\n                  const labelId = `enhanced-table-checkbox-${index}`; */\n                                    return (\n                                        <TableRow\n                                            hover\n                                            onClick={(event) =>\n                                                handleClick(event, row.name)\n                                            }\n                                            /* aria-checked={isItemSelected} */\n                                            tabIndex={-1}\n                                            key={row.name}\n                                            /* selected={isItemSelected} */\n                                        >\n                                            <TableCell\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                                align='left'\n                                            >\n                                                <Tooltip\n                                                    title='Edit'\n                                                    className={\n                                                        classes.iconFilter\n                                                    }\n                                                >\n                                                    <IconButton\n                                                        size='small'\n                                                        aria-label='Edit'\n                                                    >\n                                                        <EditIcon\n                                                            onClick={() =>\n                                                                handleEdit(row)\n                                                            }\n                                                        />\n                                                    </IconButton>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                                align='left'\n                                            >\n                                                {row.date}\n                                            </TableCell>\n                                            <TableCell\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                                align='left'\n                                            >\n                                                {row.medics.name}{' '}\n                                                {row.medics.lastname}\n                                            </TableCell>\n                                            <TableCell\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                                align='left'\n                                                key={index}\n                                            >\n                                                {row.partners.name}{' '}\n                                                {row.partners.lastname}\n                                            </TableCell>\n                                            <TableCell\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                                align='left'\n                                            >\n                                                {row.partners.dni}\n                                            </TableCell>\n                                            <TableCell\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                                align='left'\n                                            >\n                                                {row.order_status.name}\n                                            </TableCell>\n                                            <TableCell\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                                align='left'\n                                            >\n                                                <Button\n                                                    className={\n                                                        classes.iconFilter\n                                                    }\n                                                    variant='outlined'\n                                                    onClick={() =>\n                                                        handleClickOpen(row)\n                                                    }\n                                                >\n                                                    📝\n                                                </Button>\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: 33 * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component='div'\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n            {editActive ? (\n                <AdminOrdersEdit\n                    status={status}\n                    setEditActive={setEditActive}\n                    editActive={editActive}\n                    data={data}\n                />\n            ) : null}\n            <PopUp rows={row} handleClose={handleClose} open={open} />\n        </div>\n    );\n}\n\n//recibe l autorizada como value pero no uestra las seleccionadas\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/ComparativaP/InfoPlanCard.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/Payment/PaymentsTable.jsx",["536"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles, lighten } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport supabase from '../../../supabase.config';\nimport { Button, CircularProgress } from '@material-ui/core';\n\nimport PaymentButton from './PaymentButton.jsx';\n\nimport styles from './PaymentsTable.module.css';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        padding: '0px 0px 0px 0px',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 650,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n    title: {\n        color: '#212121',\n        fontWeight: 'bold',\n        backgroundColor: 'rgb(112, 193, 189)',\n    },\n    rowColor: {\n        backgroundColor: lighten('#e0e0e0', 0.3),\n    },\n    btn: {\n        margin: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        backgroundColor: '#2c7f7b',\n        border: '2px solid #2c7f7b',\n        size: 'small',\n        fontWeight: 'bold',\n        '&:hover': {\n            backgroundColor: '#2c7f7b',\n            border: '2px solid #fafafa',\n        },\n    },\n}));\n\nexport default function PaymentsTable({ paymentStatus }) {\n    const classes = useStyles();\n    const [debt, setDebt] = useState([]);\n    const [titular, setTitular] = useState(false);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        async function getTitularDebts() {\n            try {\n                const { data: user } = await supabase\n                    .from('partners')\n                    .select('*')\n                    .eq('dni', JSON.parse(localStorage.getItem('userdata')).dni)\n                    .eq('family_bond', 'titular');\n\n                const { data: debts } = await supabase\n                    .from('payments')\n                    .select('*')\n                    .eq('partner_dni', user[0].dni)\n                    .eq('payed', paymentStatus);\n\n                setDebt(\n                    debts.sort(function (a, b) {\n                        if (a.concept < b.concept) {\n                            return 1;\n                        }\n                        if (a.concept > b.concept) {\n                            return -1;\n                        }\n                        return 0;\n                    })\n                );\n                setTitular(true);\n            } catch (err) {\n                console.log(err);\n            }\n            setLoading(false);\n        }\n        getTitularDebts();\n        //eslint-disable-next-line\n    }, []);\n\n    if (loading) return <CircularProgress />;\n\n    if (!titular) {\n        if (paymentStatus === 'true')\n            return <p>Solo el titular puede visualizar pagos realizados.</p>;\n        return <p>Solo el titular puede realizar pagos.</p>;\n    }\n    return (\n        <TableContainer component={Paper}>\n            <Table\n                className={classes.table}\n                size='small'\n                aria-label='a dense table'\n            >\n                <TableHead className={classes.title}>\n                    <TableRow>\n                        <TableCell>CONCEPTO</TableCell>\n                        <TableCell align='left'>FECHA EMISIÓN</TableCell>\n                        <TableCell align='left'>FECHA VENCIMIENTO</TableCell>\n                        <TableCell align='left'>MONTO</TableCell>\n                        <TableCell align='left'>ESTADO</TableCell>\n                        <TableCell align='left'>ACCIONES</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {debt.map((row, index) => (\n                        <TableRow key={row.concept}>\n                            <TableCell\n                                className={\n                                    index % 2 === 1 ? classes.rowColor : null\n                                }\n                                component='th'\n                                scope='row'\n                            >\n                                {row.concept}\n                            </TableCell>\n                            <TableCell\n                                className={\n                                    index % 2 === 1 ? classes.rowColor : null\n                                }\n                                align='left'\n                            >\n                                {row.emission_date}\n                            </TableCell>\n                            <TableCell\n                                className={\n                                    index % 2 === 1 ? classes.rowColor : null\n                                }\n                                align='left'\n                            >\n                                {row.expiration_date}\n                            </TableCell>\n                            <TableCell\n                                className={\n                                    index % 2 === 1 ? classes.rowColor : null\n                                }\n                                align='left'\n                            >\n                                {row.amount}\n                            </TableCell>\n                            <TableCell\n                                className={\n                                    index % 2 === 1 ? classes.rowColor : null\n                                }\n                                align='left'\n                            >\n                                {row.payed ? 'Pagado' : 'Pendiente de pago'}\n                            </TableCell>\n                            <TableCell\n                                className={\n                                    index % 2 === 1 ? classes.rowColor : null\n                                }\n                                align='center'\n                                id={row.id}\n                            >\n                                {row.payed ? (\n                                    <Button\n                                        variant='contained'\n                                        className={classes.btn}\n                                    >\n                                        Ver detalle\n                                    </Button>\n                                ) : (\n                                    <PaymentButton product={row} />\n                                )}\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/RegStepForm/Declaration.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminsUsers/FormUsers.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Speciality/FormSpecialities.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminRegistration/AdminRegistration.jsx",["537"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport styles from './AdminRegistration.module.css';\nimport LogoNav from '../../../assets/logo-integra.png';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport supabase from '../../../supabase.config';\nimport Swal from 'sweetalert2';\nimport Styles from './AdminRegistration.module.css';\nimport withReactContent from 'sweetalert2-react-content';\nimport 'firebase/auth';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    margin: {\n        margin: theme.spacing(1),\n    },\n    withoutLabel: {\n        marginTop: theme.spacing(3),\n    },\n    textField: {\n        width: '300px',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    button: {\n        backgroundColor: '#27978b',\n        color: '#f0f0f0',\n    },\n}));\n\nfunction AdminRegistration({ firebase }) {\n    const classes = useStyles();\n    const MySwal = withReactContent(Swal);\n    const [input, setInput] = useState({\n        name: '',\n        lastname: '',\n        dni: '',\n        mail: '',\n        birthdate: '',\n        phone: '',\n        root: '',\n    });\n    const [errors, setErrors] = useState({\n        name: false,\n        lastname: false,\n        dni: false,\n        birthdate: false,\n        root: false,\n        mail: false,\n        phone: false,\n    });\n\n    const [errorRequest, setErrorRequest] = useState(false);\n\n    const handleClickOpen = async () => {\n        if (\n            !errors.name &&\n            !errors.lastname &&\n            !errors.dni &&\n            !errors.mail &&\n            !errors.birthdate &&\n            !errors.root &&\n            !errors.phone\n        ) {\n            await supabase.from('users').insert([\n                {\n                    dni: input.dni,\n                    role: 'admin',\n                    email: input.mail,\n                },\n            ]);\n\n            await supabase.from('admins').insert([\n                {\n                    name: input.name,\n                    lastname: input.lastname,\n                    birthdate: input.birthdate,\n                    dni: input.dni,\n                    root: input.root,\n                    email: input.mail,\n                    phone_number: input.phone,\n                },\n            ]);\n\n            await firebase\n                .auth()\n                .createUserWithEmailAndPassword(input.mail, input.dni);\n\n            try {\n                await firebase.auth().sendPasswordResetEmail(input.mail);\n            } catch (error) {\n                MySwal.fire({\n                    title: 'Usuario admin no pudo ser creado.',\n                    text: `Mensaje de error ${error}`,\n                    icon: 'error',\n                });\n            }\n            MySwal.fire({\n                title: 'Usuario admin creado con exito!',\n                text: 'Debera resetear su password. Le llegara el link por mail.',\n                icon: 'success',\n            });\n\n            setInput({\n                name: '',\n                lastname: '',\n                dni: '',\n                mail: '',\n                birthdate: '',\n                root: '',\n                phone: '',\n            });\n        } else {\n            setErrorRequest(true);\n        }\n    };\n\n    const handleClose = () => {\n        setErrorRequest(false);\n    };\n\n    const handleInputChange = (e) => {\n        setInput({\n            ...input,\n            [e.target.name]: e.target.value,\n        });\n        setErrors(validate(e.target.name, e.target.value));\n    };\n\n    function validate(inputName, value) {\n        const mailPattern =\n            /[a-zA-Z0-9]+[.]?([a-zA-Z0-9]+)?[@][a-z]{3,9}[.][a-z]{2,5}/g;\n        const numberPattern = /^[0-9\\b]+$/;\n        const passwordPattern =\n            /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n\n        let errors = {};\n        switch (inputName) {\n            case 'name': {\n                if (!value) {\n                    errors.name = true;\n                } else {\n                    errors.name = false;\n                }\n                break;\n            }\n            case 'lastname': {\n                if (!value) {\n                    errors.lastname = true;\n                } else {\n                    errors.lastname = false;\n                }\n                break;\n            }\n            case 'dni': {\n                if (!numberPattern.test(value) || value.length !== 8) {\n                    errors.dni = true;\n                } else {\n                    errors.dni = false;\n                }\n                break;\n            }\n            case 'phone': {\n                if (!numberPattern.test(value) || value.length !== 10) {\n                    errors.phone = true;\n                } else {\n                    errors.phone = false;\n                }\n                break;\n            }\n            case 'mail': {\n                if (!mailPattern.test(value)) {\n                    errors.mail = true;\n                } else {\n                    errors.mail = false;\n                }\n                break;\n            }\n            case 'birthdate': {\n                if (!value) {\n                    errors.birthdate = true;\n                } else {\n                    errors.birthdate = false;\n                }\n                break;\n            }\n            case 'root': {\n                if (!value) {\n                    errors.root = true;\n                } else {\n                    errors.root = false;\n                }\n                break;\n            }\n            case 'password': {\n                if (!passwordPattern.test(value)) {\n                    errors.password = true;\n                } else {\n                    errors.password = false;\n                }\n                break;\n            }\n            case 'confirmPassword': {\n                if (input.password !== value) {\n                    errors.confirmPassword = true;\n                } else {\n                    errors.confirmPassword = false;\n                }\n                break;\n            }\n            default:\n                return null;\n        }\n        return errors;\n    }\n\n    return (\n        <div className={styles.conteinerAll}>\n            <Snackbar\n                open={errorRequest}\n                autoHideDuration={6000}\n                onClose={handleClose}\n            >\n                <Alert onClose={handleClose} severity='error'>\n                    Error, verifique los datos.\n                </Alert>\n            </Snackbar>\n            <div className={styles.formConteiner}>\n                <div className={styles.imgConteiner}>\n                    <img src={LogoNav} className={styles.logo} alt='Logo' />\n                </div>\n                <div className={styles.inputs}>\n                    <div className={styles.firstColumn}>\n                        <div className={styles.textField}>\n                            <TextField\n                                label='Nombre'\n                                variant='outlined'\n                                id='name-input'\n                                type='text'\n                                name='name'\n                                autoComplete='off'\n                                className={classes.textField}\n                                // size='small'\n                                value={input.name}\n                                onChange={(e) => handleInputChange(e)}\n                                {...(errors.name && {\n                                    error: errors.name,\n                                    helperText: 'Nombre invalido',\n                                })}\n                            />\n                        </div>\n                        <div className={styles.textField}>\n                            <TextField\n                                label='Apellido'\n                                variant='outlined'\n                                id='lastname-input'\n                                type='text'\n                                name='lastname'\n                                autoComplete='off'\n                                className={classes.textField}\n                                // size='small'\n                                value={input.lastname}\n                                onChange={(e) => handleInputChange(e)}\n                                {...(errors.lastname && {\n                                    error: errors.lastname,\n                                    helperText: 'Apellido invalido',\n                                })}\n                            />\n                        </div>\n                        <div className={styles.textField}>\n                            <TextField\n                                label='DNI'\n                                variant='outlined'\n                                id='dni-input'\n                                type='tel'\n                                name='dni'\n                                autoComplete='off'\n                                className={classes.textField}\n                                // size='small'\n                                value={input.dni}\n                                onChange={(e) => handleInputChange(e)}\n                                {...(errors.dni && {\n                                    error: true,\n                                    helperText: 'Dni invalido',\n                                })}\n                                inputProps={{ maxLength: 8 }}\n                            />\n                        </div>\n                    </div>\n                    <div className={styles.secondColumn}>\n                        <div className={styles.textField}>\n                            <TextField\n                                label='Fecha de nacimiento'\n                                variant='outlined'\n                                id='date-input'\n                                type='date'\n                                name='birthdate'\n                                autoComplete='off'\n                                className={classes.textField}\n                                // size='small'\n                                value={input.birthdate}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                onChange={(e) => handleInputChange(e)}\n                            />\n                        </div>\n                        <div className={styles.textField}>\n                            <FormControl\n                                variant='outlined'\n                                className={classes.formControl}\n                            >\n                                <InputLabel htmlFor='mail-input'>\n                                    Root\n                                </InputLabel>\n                                {/* <label htmlFor='mail-input'>Root?</label> */}\n                                <Select\n                                    label='Root'\n                                    variant='outlined'\n                                    id='mail-input'\n                                    type='text'\n                                    name='root'\n                                    autoComplete='off'\n                                    className={classes.textField}\n                                    // size='small'\n                                    value={input.root}\n                                    InputLabelProps={{\n                                        shrink: false,\n                                    }}\n                                    onChange={(e) => handleInputChange(e)}\n                                >\n                                    <MenuItem value='true'>Si</MenuItem>\n                                    <MenuItem value='false'>No</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </div>\n                        <div className={styles.textField}>\n                            <TextField\n                                label='E-mail'\n                                variant='outlined'\n                                id='mail-input'\n                                type='text'\n                                name='mail'\n                                autoComplete='off'\n                                className={classes.textField}\n                                // size='small'\n                                value={input.mail}\n                                onChange={(e) => handleInputChange(e)}\n                                {...(errors.mail && {\n                                    error: true,\n                                    helperText: 'Mail invalido',\n                                })}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={Styles.textField}>\n                        <TextField\n                            label='phone'\n                            variant='outlined'\n                            id='phone-input'\n                            type='number'\n                            name='phone'\n                            autoComplete='off'\n                            size='small'\n                            value={input.phone}\n                            onChange={(e) => handleInputChange(e)}\n                            {...(errors.phoneNumber && {\n                                error: true,\n                                helperText: 'Telefono invalido',\n                            })}\n                        />\n                    </div>\n\n                    {/* <div className={Styles.textField}>\n                        <TextField\n                            id='outlined-search'\n                            label='Contraseña'\n                            variant='outlined'\n                            id='password-input'\n                            type='password'\n                            name='password'\n                            autoComplete='off'\n                            size='small'\n                            value={input.password}\n                            onChange={(e) => handleInputChange(e)}\n                            {...(errors.password && {\n                                error: true,\n                                helperText: 'Contraseña invalida',\n                            })}\n                        />\n                    </div>\n                    <div className={Styles.textField}>\n                        <TextField\n                            id='outlined-search'\n                            label='Confirmas contraseña'\n                            variant='outlined'\n                            id='confirm-password-input'\n                            type='password'\n                            name='confirmPassword'\n                            autoComplete='off'\n                            size='small'\n                            value={input.confirmPassword}\n                            onChange={(e) => handleInputChange(e)}\n                            {...(errors.confirmPassword && {\n                                error: true,\n                                helperText: 'Las contraseñas no son iguales',\n                            })}\n                        />\n                    </div> */}\n                </div>\n                <div>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        // style={{ borderRadius: 100, margin: 10 }}\n                        className={classes.button}\n                        onClick={handleClickOpen}\n                    >\n                        Agregar Admin\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default AdminRegistration;\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminAffiliate/AdminAffiliate.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/MedicsTable/AdminTabs.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/Payment/PaymentButton.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/functions/calculateAge.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Aplications/AplicationsTabs.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/actions/users.action.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminsUsers/TableUsers.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/functions/states.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/MedicsTable/MedicsTable.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminMedics/AdminMedicEdit.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminMedics/AdminMedicAdd.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Speciality/TableSpecialities.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Aplications/PartnersAffiliationRequests.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Aplications/PartnersAplications.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Aplications/GuestsAplications.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/actions/specialities.actions.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/actions/elgetter.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Speciality/InputSpecialities.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Speciality/PopUpEdit.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminHome/AdminHome.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/PrescriptionsAndOrders/PrescriptionsAndOrders.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/ConsultsTable/ConsultsTable.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/MedicPatients/MedicPatients.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/MedicHome/MedicHome.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminOrders/AdminOrderPop.jsx",["538"],"import React from \"react\";\nimport { withStyles,lighten, makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from '@material-ui/core/List';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  }\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\n\nconst useStyles = makeStyles((theme) => ({\n  popup: {\n      color: '#fafafa',\n      backgroundColor: '#2c7f7b',\n      fontWeight: 'bold',\n      fontSize: '30px',\n  },\n  popupBtn: {\n      color: '#fafafa',\n      padding: theme.spacing(0.5),\n      border: '3px solid #2c7f7b',\n      backgroundColor: '#2c7f7b',\n      fontWeight: 'bold',\n      fontSize: '15px',\n      '&:hover': {\n          backgroundColor: lighten('#fafafa', 0.2),\n          color: '#2c7f7b',\n          padding: theme.spacing(0.5),\n      },\n  },\n}));\n\nexport default function CustomizedDialogs({open, handleClose, rows}) {\n  const classes = useStyles();\n  return (\n    <div>\n      <Dialog\n        onClose={handleClose}\n        aria-labelledby=\"customized-dialog-title\"\n        open={open}\n      >\n        <DialogTitle \n        className={classes.popup}\n        id=\"form-dialog-title\">{`Autorización para el paciente: ${rows.partners.name.toUpperCase()} ${rows.partners.lastname.toUpperCase()}`}</DialogTitle>\n        <DialogContent>\n          <List>\n        <ListItemText primary={`Fecha: ${rows.date}`} fullWidth />\n        <ListItemText primary={`Nombre del estudio o medicamento: ${rows.study_name}`} fullWidth />\n        <ListItemText primary={`Estado: ${rows.order_status.name}`} fullWidth />\n            <ListItemText\n              primary={`Nombre y apellido del paciente: ${rows.partners.name} ${rows.partners.lastname}`}\n              fullWidth\n            />\n            <ListItemText\n              primary={`DNI del paciente: ${rows.partners.dni}`}\n              fullWidth\n            />\n            <ListItemText\n              primary={`Nombre y apellido del médico: ${rows.medics.name} ${rows.medics.lastname}`}\n              fullWidth\n            />\n            <ListItemText\n              primary={`Numero de consulta: ${rows.medical_consultations.id}`}\n              fullWidth\n            />\n       <ListItemText\n              primary={`Resultados: ${\n                rows.results? rows.results.results.results : \"Aun no hay resultados\"\n              }`}\n              fullWidth\n            />  \n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button \n          className={classes.popupBtn}\n          autoFocus onClick={handleClose} color=\"primary\">\n            Cerrar\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\n{\n  /* <Dialog\naria-labelledby='form-dialog-title'\n>\n<DialogTitle id='form-dialog-title'>\n    Eliminar socio\n</DialogTitle>\n<DialogContent>\n    <List>\n        <ListItemText\n            primary={`Fecha: ${rows.date}`}\n            fullWidth\n        />\n        <ListItemText\n            primary={`Nombre y apellido del paciente: ${rows.partners.name} ${rows.partners.lastname}`}\n            fullWidth\n        />\n        <ListItemText\n            primary={`DNI del paciente: ${rows.partners.dni}`}\n            fullWidth\n        />\n        <ListItemText\n            primary={`Nombre y apellido del médico ${rows.medics.name} ${rows.medics.lastname}`}\n            fullWidth\n        />\n           <ListItemText\n            primary={`Nombre y apellido del médico ${rows.medics.name} ${rows.medics.lastname}`}\n            fullWidth\n        />\n           <ListItemText\n            primary={`Numero de consulta ${rows.medical_consultation_id}`}\n            fullWidth\n        />\n              <ListItemText\n            primary={`Estudio o tratamiento requerido ${rows.study_name}`}\n            fullWidth\n        />\n         <ListItemText\n            primary={`Resultados: ${rows.result ? rows.result : 'Aun no hay resultados'}`}\n            fullWidth\n        />\n  \n    </List>\n</DialogContent>\n\n</Dialog>  */\n}\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminOrders/AdminOrdersEdit.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/Consults/PrintMeds/PrintMeds.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/Consults/PrintOrders/PrintOrders.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/Consults/Orders/Orders.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/Consults/Medicines/Medicines.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminProfile/AdminProfile.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlansManage.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/MedicProfile/MedicProfile.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Chatbot/Chatbot.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/LandingPage/StarsBackground.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/LandingPage/Carousel.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/RegStepForm/DatosRevision.jsx",["539","540","541"],"import React from 'react';\nimport * as styles from './DatosRevision.module.css';\nimport Pdf from 'react-to-pdf';\nimport { Divider, Button, makeStyles } from '@material-ui/core';\nconst ref = React.createRef();\n\nconst useStyles = makeStyles(() => ({\n    popupBtn: {\n        color: '#fafafa',\n        width: 'fit-content',\n        marginLeft: '40px',\n        border: '3px solid #2c7f7b',\n        borderRadius: '5px',\n        backgroundColor: '#2c7f7b',\n        fontWeight: 'bold',\n        fontSize: '15px',\n        '&:hover': {\n            backgroundColor: '#fafafa',\n            color: '#2c7f7b',\n        },\n    },\n}));\nconst DatosRevision = () => {\n    const datosTitular = JSON.parse(localStorage.getItem('datosTitular'));\n    const datosEmpresa = JSON.parse(localStorage.getItem('datosEmpresa'));\n    const datosDeclaration = JSON.parse(\n        localStorage.getItem('datosDeclaration')\n    );\n\n    const classes = useStyles();\n\n    return (\n        <div className={styles.form}>\n            <div className={styles.title}>\n                <h1>\n                    Revision de Datos <Divider></Divider>{' '}\n                </h1>\n            </div>\n            <div id='lacolumna' className={styles.ajuste}>\n                <div className={styles.datos}>\n                    <div className={styles.firstColumn}>\n                        <h2>Datos del Titular</h2>\n                        <Divider></Divider>\n                        <h4>Nombre: {datosTitular.first_name}</h4>\n                        <h4>Apellido: {datosTitular.last_name}</h4>\n                        <h4>Genero: {datosTitular.gender}</h4>\n                        <h4>DNI: {datosTitular.dni}</h4>\n                        <h4>CUIL: {datosTitular.cuil}</h4>\n                        <h4>Teléfono: {datosTitular.phone_number}</h4>\n                        <h4>Email: {datosTitular.email}</h4>\n                        <h4>Ocupación: {datosTitular.occupation}</h4>\n                        <h4>Estado civil: {datosTitular.marital_status}</h4>\n                        <h4>Fecha de nacimiento: {datosTitular.birth_date}</h4>\n                        <h4>Calle: {datosTitular.street_name}</h4>\n                        <h4>Numero: {datosTitular.number}</h4>\n                        {datosTitular.floor ? (\n                            <h4>Piso: {datosTitular.floor}</h4>\n                        ) : null}\n                        {datosTitular.apartment ? (\n                            <h4>Departamento: {datosTitular.apartment}</h4>\n                        ) : null}\n                        <h4>Provincia: {datosTitular.state.split('-')[1]}</h4>\n                        <h4>\n                            Localidad: {datosTitular.locality.split('-')[1]}\n                        </h4>\n                    </div>\n                    <div className={styles.datosEmpresa}>\n                        <h2>\n                            Datos del Empresa <Divider></Divider>\n                        </h2>\n\n                        <h4>Razón Social:{datosEmpresa.bussines_name}</h4>\n                        <h4>Grupo empresarial:{datosEmpresa.bussines_group}</h4>\n                        <h4>\n                            Nombre y apellido del Referente de RRHH:\n                            {datosEmpresa.rh_name}\n                        </h4>\n                        <h4>Teléfono:{datosEmpresa.company_phone}</h4>\n                        <h4>E-mail:{datosEmpresa.company_email}</h4>\n                        <h4>CUIT:{datosEmpresa.company_cuit}</h4>\n                    </div>\n\n                    <div ref={ref} id='Declaration' className={styles.salud}>\n                        <h2>\n                            Declaracion Jurada de Salud\n                            <Divider></Divider>\n                        </h2>\n\n                        <h4>DNI : {datosTitular.dni}</h4>\n                        {datosDeclaration.diabetes === 'Si' ? (\n                            <h4>\n                                Diabetes<br></br>\n                                {datosDeclaration.diabetesD}\n                            </h4>\n                        ) : null}\n                        {datosDeclaration.heart === 'Si' ? (\n                            <h4>\n                                Condiciones Cardíacas<br></br>{' '}\n                                {datosDeclaration.heartD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.hernia === 'Si' ? (\n                            <h4>\n                                Hernia<br></br> {datosDeclaration.herniaD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.allergies === 'Si' ? (\n                            <h4>\n                                Alergias <br></br>\n                                {datosDeclaration.allergiesD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.seizures === 'Si' ? (\n                            <h4>\n                                Convulsiones <br></br>\n                                {datosDeclaration.seizuresD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.asthma === 'Si' ? (\n                            <h4>\n                                Asma <br></br>\n                                {datosDeclaration.asthmaD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.sinusitis === 'Si' ? (\n                            <h4>\n                                Sinusitis, Adenoides, Otitis a repetición\n                                <br></br>\n                                {datosDeclaration.sinusitisD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.hypertension === 'Si' ? (\n                            <h4>\n                                Hipertensión<br></br>{' '}\n                                {datosDeclaration.hypertensionD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.hypotension === 'Si' ? (\n                            <h4>\n                                Hipotensión<br></br>\n                                {datosDeclaration.hypotensionD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.others === 'Si' ? (\n                            <h4>\n                                Otros<br></br>\n                                {datosDeclaration.othersD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.surgeryProt === 'Si' ? (\n                            <h4>\n                                {' '}\n                                Operaciones/Protesís <br></br>\n                                {datosDeclaration.surgeryProtD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.hearing === 'Si' ? (\n                            <h4>\n                                {' '}\n                                Dificultades Auditivas<br></br>\n                                {datosDeclaration.hearingD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.visual === 'Si' ? (\n                            <h4>\n                                Dificultades visuales<br></br>\n                                {datosDeclaration.visualD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.spine === 'Si' ? (\n                            <h4>\n                                Desviación de Columna<br></br>\n                                {datosDeclaration.spineD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.fainting === 'Si' ? (\n                            <h4>\n                                {' '}\n                                Desmayos<br></br>\n                                {datosDeclaration.faintingD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.psychological === 'Si' ? (\n                            <h4>\n                                Tratamiento Psicologico<br></br>\n                                {datosDeclaration.psychologicalD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.psychiatric === 'Si' ? (\n                            <h4>\n                                Tratamiento psiquiátrico<br></br>\n                                {datosDeclaration.psychiatricD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.medicines === 'Si' ? (\n                            <h4>\n                                {' '}\n                                Toma los siguientes medicamentos<br></br>{' '}\n                                {datosDeclaration.medicinesD}\n                            </h4>\n                        ) : null}\n                    </div>\n                </div>\n            </div>\n\n            {/* <Pdf targetRef={ref} filename={`Partner-${datosDeclaration.dni}`}>\n                {({ toPdf }) => (\n                    <Button\n                        className={classes.popupBtn}\n                        variant='contained'\n                        onClick={toPdf}\n                    >\n                        Descargar en Pdf\n                    </Button>\n                )}\n                {/* // <button onClick={}> probando ese pdf</button>} }\n            </Pdf> */}\n        </div>\n    );\n};\nexport default DatosRevision;\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/RegStepForm/DatosEmpresa.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/NewBenef/NewBenef.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/NewPlan/NewPlan.jsx",["542","543","544"],"import React, { useState, useEffect } from 'react';\nimport supabase from '../../../../supabase.config';\nimport { makeStyles, withStyles, lighten } from '@material-ui/core/styles';\nimport { Autocomplete } from '@material-ui/lab';\nimport { TextField, Button, Box } from '@material-ui/core';\nimport './NewPlan.css';\nimport Swal from 'sweetalert2';\n\n//Switch\nimport { FormGroup, Switch, Grid, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        paddingTop: 25,\n        paddingLeft: 25,\n        backgroundColor: '#fafafa',\n    },\n    root: {\n        width: '500px',\n        padding: 0,\n        alignItems: 'center',\n    },\n    planT: {\n        width: '100%',\n        marginBottom: 15,\n    },\n    importe: {\n        width: '30%',\n        marginBottom: 15,\n        backgroundColor: '#ffffff',\n    },\n    beneficio: {\n        width: '500px',\n        marginBottom: 15,\n        backgroundColor: '#ffffff',\n    },\n    activo: {\n        color: '#676161de',\n    },\n    saveButton: {\n        color: '#fafafa',\n        padding: theme.spacing(0.5),\n        border: '3px solid #2c7f7b',\n        backgroundColor: '#2c7f7b',\n        fontWeight: 'bold',\n        fontSize: '15px',\n        '&:hover': {\n            backgroundColor: lighten('#fafafa', 0.2),\n            color: '#2c7f7b',\n            padding: theme.spacing(0.5),\n        },\n    },\n}));\n\nconst AntSwitch = withStyles((theme) => ({\n    root: {\n        width: 28,\n        height: 16,\n        padding: 0,\n        display: 'flex',\n    },\n    switchBase: {\n        padding: 2,\n        color: theme.palette.grey[500],\n        '&$checked': {\n            transform: 'translateX(12px)',\n            color: theme.palette.common.white,\n            '& + $track': {\n                opacity: 1,\n                backgroundColor: '#27978b',\n                borderColor: theme.palette.primary.main,\n            },\n        },\n    },\n    thumb: {\n        width: 12,\n        height: 12,\n        boxShadow: 'none',\n    },\n    track: {\n        border: `1px solid ${theme.palette.grey[500]}`,\n        borderRadius: 16 / 2,\n        opacity: 1,\n        backgroundColor: theme.palette.common.white,\n    },\n    checked: {},\n}))(Switch);\n\nexport default function NewPlan() {\n    const classes = useStyles();\n\n    // Estado donde voy a guardar los beneficios traidos desde la base\n    // de datos para poner en el selector.\n    let [benefits, setBenefits] = useState(null);\n\n    // Función que se trae los beneficios de la base de datos\n    // y los cuarda en el estado local 'benefits'.\n    async function getBenefAsync() {\n        let { data: benefs } = await supabase.from('benefits').select('*');\n        setBenefits(benefs);\n    }\n\n    // Carga los beneficios a usar en el selector\n    useEffect(() => {\n        getBenefAsync();\n    }, []);\n\n    // recarga los beneficios a usar en el selector\n    useEffect(() => {\n        // if(benefits){\n        //   console.log(benefits); //[{id: , title: , description:}]\n        // }\n    }, [benefits]);\n\n    // Estado de información del plan a agregar\n    let [state, setState] = useState({\n        title: null,\n        price: null,\n        sbenefits: [],\n        active: true,\n    });\n\n    // Estado de errores para poder guardar el plan\n    let [error, setError] = useState({\n        title: '',\n        price: '',\n        sbenefits: '',\n        active: '',\n    });\n\n    useEffect(() => {\n        // setError({\n        //   title: 'No puede quedar incompleto o en blanco.',\n        //   price: 'Debe ser un número de 4 a 6 cifras',\n        //   sbenefits: 'Debe tener al menos un beneficio.',\n        //   active: '',\n        // });\n    }, []);\n\n    // Cambios en los inputs (excepto en beneficio)\n    let handlechange = (event) => {\n        let item = event.target.name;\n        let value = event.target.value;\n        switch (item) {\n            case 'title': // Que no esté vacío ni sean solo espacios\n                // console.log(event.target.value)\n                let titlereg =\n                    /[0-9a-zA-ZÀ-ÿ\\u00f1\\u00d1\\.]+[ ]?[0-9a-z A-ZÀ-ÿ\\u00f1\\u00d1][:punct:]*$/;\n\n                setError((error) => ({\n                    ...error,\n                    title: titlereg.test(event.target.value)\n                        ? ''\n                        : 'No puede quedar incompleto o en blanco.',\n                }));\n                setState({ ...state, title: event.target.value });\n                break;\n\n            case 'price': // Que sean solo números\n                if (value === null || value === '') {\n                    setError((error) => ({\n                        ...error,\n                        price: 'Debe ser un número de 4 a 6 cifras',\n                    }));\n                } else {\n                    setError((error) => ({\n                        ...error,\n                        price: /^[0-9]{4,6}$/.test(value)\n                            ? ''\n                            : 'Debe ser un número de 4 a 6 cifras',\n                    }));\n\n                    setState({ ...state, price: value });\n                    break;\n                }\n\n            case 'active':\n                setState({\n                    ...state,\n                    [event.target.name]: event.target.checked,\n                });\n                break;\n            default:\n                break;\n        }\n    };\n\n    useEffect(() => {\n        // if (state.sbenefits.length) {\n        //   console.log('sbenefits', state.sbenefits);\n        // }\n    }, [error, state]);\n\n    // Función que verifica que no haya errores en los inputs\n    // para habilitar el botón de guardar el plan.\n    let validate = (modInfo) => {\n        return Object.values(error).every((x) => x === '');\n        //si no tiene ningún mensaje de error devuelve true\n    };\n\n    // Función que guarda la info del nuevo plan en la base de datos.\n    async function handlesubmit(e) {\n        e.preventDefault();\n        // Agrega el plan nuevo en la tabla de planes.\n        async function addNewPlan(state) {\n            await supabase.from('plans').insert([\n                {\n                    name: state.title,\n                    price: state.price,\n                    active: state.active,\n                },\n            ]);\n        }\n        await addNewPlan(state);\n\n        //Obtiene Id del plan nuevo\n        async function GetNewPlanId(state) {\n            try {\n                let { data: idnewplan } = await supabase\n                    .from('plans')\n                    .select('id')\n                    .eq('name', state.title);\n\n                return idnewplan[0].id;\n            } catch (err) {\n                console.error(err);\n            }\n            return;\n        }\n\n        let idplan = await GetNewPlanId(state);\n\n        // Agrega cada beneficio al plan\n        // Busca el id del beneficio seleccionado y lo conecta.\n        async function addPlanBenef(idplan, sbenefits) {\n            //idbenef -> sbenefits\n            for (let i = 0; i < sbenefits.length; i++) {\n                let { error } = await supabase.from('plans_benefits').insert([\n                    {\n                        plan_id: idplan,\n                        benefit_id: sbenefits[i].id,\n                    },\n                ]);\n                if (error) console.log(error);\n            }\n        }\n        await addPlanBenef(idplan, state.sbenefits);\n\n        await Swal.fire({\n            title: 'Exito!',\n            text: 'Sus datos fueron guardados',\n            icon: 'success',\n            confirmButtonText: 'OK',\n        });\n\n        // Luego limpia\n        setState({ title: null, price: null, sbenefits: [], active: true });\n        setError({\n            title: '',\n            price: '',\n            sbenefits: '',\n            active: '',\n            // title: 'No puede quedar incompleto o en blanco.',\n            // price: 'Debe ser un número de 4 a 6 cifras',\n            // sbenefits: 'Debe tener al menos un beneficio.',\n            // active: '',\n        });\n    }\n\n    // Función que administra el selector de beneficios.\n    let handleAutoComplete = (values) => {\n        // console.log('seleccionaste :', values)\n        if (values.length === 0) {\n            setError((error) => ({\n                ...error,\n                sbenefits: 'Debe tener al menos un beneficio.',\n            }));\n        } else {\n            setError((error) => ({ ...error, sbenefits: '' }));\n        }\n        setState({ ...state, sbenefits: values });\n    };\n\n    return (\n        <div className={classes.container}>\n            <form className={classes.root} noValidate autoComplete='off'>\n                <div className={classes.inputsCont}>\n                    <TextField\n                        id='title'\n                        name='title'\n                        className={classes.planT}\n                        label='Nombre del plan'\n                        value={state.title}\n                        onChange={handlechange}\n                        error={error.title}\n                        helperText={error.title}\n                    />\n                    <TextField\n                        id='importeInput'\n                        type='number'\n                        name='price'\n                        className={classes.importe}\n                        label='Importe'\n                        variant='outlined'\n                        inputProps={{ min: 0 }}\n                        value={state.price}\n                        onChange={handlechange}\n                        error={error.price}\n                        helperText={error.price}\n                    />\n                    {benefits && (\n                        <Autocomplete\n                            multiple\n                            limitTags={2}\n                            id='benefitInputa'\n                            // name='benefit'\n                            className={classes.beneficio}\n                            //  Acá va el arreglo a mostrar en el selector\n                            options={benefits}\n                            getOptionLabel={(option) => option.title}\n                            onChange={(event, value) =>\n                                handleAutoComplete(value)\n                            }\n                            renderOption={(option) => option.title}\n                            renderInput={(params) => (\n                                <TextField\n                                    id='benefitInput'\n                                    name='benefit'\n                                    {...params}\n                                    label='Beneficios'\n                                    variant='outlined'\n                                    error={error.sbenefits}\n                                    helperText={error.sbenefits}\n                                    className={classes.textField}\n                                    inputProps={{\n                                        ...params.inputProps,\n                                        autoComplete: 'new-password', // disable autocomplete and autofill\n                                    }}\n                                />\n                            )}\n                        />\n                    )}\n                </div>\n                {/* switch */}\n                <div className={classes.activo}>\n                    <p>Activo:</p>\n                    <FormGroup>\n                        <Typography component='div'>\n                            <Grid\n                                component='label'\n                                label={'on'}\n                                container\n                                alignItems='center'\n                                spacing={1}\n                            >\n                                <Grid item>No</Grid>\n                                <Grid item>\n                                    <AntSwitch\n                                        checked={state.active}\n                                        onChange={handlechange}\n                                        name='active'\n                                    />\n                                </Grid>\n                                <Grid item>Si</Grid>\n                            </Grid>\n                        </Typography>\n                    </FormGroup>\n                </div>\n                <div width='100%' align='right'>\n                    {(!!state.title&&!!state.price && !!state.sbenefits.length) && <Button\n                        id='savebtn'\n                        disabled={!validate()}\n                        variant='contained'\n                        className={classes.saveButton}\n                        onClick={handlesubmit}\n                    >\n                        Guardar\n                    </Button>}\n                </div>\n            </form>\n        </div>\n    );\n}\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/AdminPlans.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/RegStepForm/DatosTitular.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Footer/Iconos.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/ContactForm/ContactForm.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/InfoPlans/InfoPlanes.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserProfile/UserProfile.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserMedRec/UserMedRec.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/RegStepForm/Validator.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserHome/UserHome.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/FamilyMembers.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/PlansTable.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/ModifyPlan.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/PlanDetails.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/DeletePlan.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/PlanState.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Chatbot/Config.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Chatbot/MessageParser.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Chatbot/ActionProvider.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/AffiliateOrdersAndPrescriptions/AffiliateOrdersAndPrescriptions.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/MyOrders/MyOrders.jsx",["545","546"],"import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport blue from '@material-ui/core/colors/blue';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nimport 'firebase/auth';\nimport supabase from '../../../supabase.config';\nimport { Cancel, DoneAll, HourglassEmptyOutlined } from '@material-ui/icons';\nimport { Divider } from '@material-ui/core';\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n    {\n        id: 'results',\n        numeric: false,\n        disablePadding: false,\n        label: 'Resultados',\n    },\n    {\n        id: 'date',\n        numeric: false,\n        disablePadding: false,\n        label: 'Fecha',\n    },\n    {\n        id: 'study_name',\n        numeric: false,\n        disablePadding: false,\n        label: 'Estudio',\n    },\n    {\n        id: 'namePartner',\n        numeric: false,\n        disablePadding: true,\n        label: 'Paciente',\n    },\n    { id: 'dni', numeric: false, disablePadding: true, label: 'DNI' },\n    { id: 'name', numeric: false, disablePadding: true, label: 'Médico' },\n    {\n        id: 'status',\n        numeric: false,\n        disablePadding: false,\n        label: 'Estado',\n    },\n];\n\nfunction EnhancedTableHead(props) {\n    const { classes, order, orderBy, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead className={classes.title}>\n            <TableRow>\n                {headCells.map((headCell, index) => (\n                    <TableCell\n                        key={`${headCell.id}-${index}`}\n                        align='left'\n                        padding='default'\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            className={classes.title}\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc'\n                                        ? 'sorted descending'\n                                        : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\n//------------------------makeStyle1---------------------------------------------------------------------------------------\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(0),\n        paddingRight: theme.spacing(0),\n        backgroundColor: lighten('#34a7a1', 0.3),\n\n        //color barra superior '\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                  color: '#fafafa',\n                  backgroundColor: lighten(blue[500], 0.5), //color barra superior cuando selecciono item\n                  fontWeight: 'bold',\n                  fontSize: '30px',\n              }\n            : {\n                  color: theme.palette.text.primary,\n                  backgroundColor: lighten('#34a7a1', 0.3),\n              },\n    title: {\n        flex: '1 1 100%',\n        fontWeight: 'bold',\n        fontSize: '1.4rem',\n        color: '#fafafa',\n        textAlign: 'center',\n    },\n    filters: {\n        display: 'flex',\n    },\n    iconFilter: {\n        color: '#fafafa',\n        fontWeight: 'bold',\n        '&:hover': {\n            backgroundColor: '#34a7a1',\n        },\n    },\n    iconBlock: {\n        color: '#fafafa',\n        fontWeight: 'bold',\n        '&:hover': {\n            backgroundColor: lighten('#34a7a1', 0.8),\n        },\n    },\n    input: {\n        margin: theme.spacing(1),\n        size: 'small',\n        width: '50%',\n        backgroundColor: '#ffffff',\n        borderRadius: '5px',\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected, setToShowRows } = props;\n    const [inputSearch, setInputSearch] = useState('');\n    let userFamilyGroup = JSON.parse(\n        localStorage.getItem('affiliatedata')\n    ).family_group;\n\n    const fetchOrders = async (studyName) => {\n        if (studyName) {\n            try {\n                const { data: orders } = await supabase\n                    .from('orders')\n                    .select(\n                        `study_name,date,status(name),results,partners(dni, name, lastname, family_group),medics(name,lastname)`\n                    )\n                    .ilike('study_name', `%${studyName}%`);\n                setToShowRows(\n                    orders.filter(\n                        (el) => el.partners.family_group === userFamilyGroup\n                    )\n                );\n            } catch (err) {\n                return err;\n            }\n        } else {\n            try {\n                const { data: orders } = await supabase\n                    .from('orders')\n                    .select(\n                        `study_name,date,status(name),results,partners(dni, name, lastname, family_group),medics(name,lastname)`\n                    );\n                // .eq('partner_dni',userDni)\n                setToShowRows(\n                    orders.filter(\n                        (el) => el.partners.family_group === userFamilyGroup\n                    )\n                );\n            } catch (err) {\n                return err;\n            }\n        }\n    };\n\n    const handleInputSearch = (e) => {\n        setInputSearch(e.target.value);\n    };\n\n    useEffect(() => {\n        fetchOrders();\n    }, []);\n    useEffect(() => {\n        fetchOrders(inputSearch);\n    }, [inputSearch]);\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            <TextField\n                className={classes.input}\n                size='small'\n                id='outlined-basic'\n                label='Buscar por estudio'\n                variant='outlined'\n                onChange={handleInputSearch}\n                value={inputSearch}\n            />\n            <Typography\n                className={classes.title}\n                variant='h6'\n                id='tableTitle'\n                component='div'\n            >\n                Mis autorizaciones\n            </Typography>\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\n//-------------------- EnhancedTableToolbar Style\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        position: 'relative',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n    title: {\n        color: '#212121',\n        fontWeight: 'bold',\n        backgroundColor: lighten('#34a7a1', 0.6),\n    },\n    rowColor: {\n        backgroundColor: lighten('#e0e0e0', 0.3),\n        ':checked': {\n            color: blue[500],\n        },\n    },\n    iconFilter: {\n        color: 'rgba(0, 0, 0, 0.47)',\n        fontWeight: 'bold',\n        '&:hover': {\n            backgroundColor: lighten('#34a7a1', 0.8),\n        },\n    },\n    buttonClose: {\n        color: '#00897B',\n    },\n}));\n\nexport default function MyOrders() {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [toShowRows, setToShowRows] = React.useState([]);\n    const [currentStudy, setCurrentStudy] = React.useState(false);\n    const [open, setOpen] = React.useState(false);\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n    const handleClickOpen = (study) => {\n        setOpen(true);\n        setCurrentStudy(study);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = toShowRows.map((n) => n.name);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows =\n        rowsPerPage -\n        Math.min(rowsPerPage, toShowRows.length - page * rowsPerPage);\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar\n                    numSelected={selected.length}\n                    setToShowRows={setToShowRows}\n                />\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby='tableTitle'\n                        size='small'\n                        aria-label='enhanced table'\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={toShowRows.length}\n                        />\n                        <TableBody>\n                            {stableSort(\n                                toShowRows,\n                                getComparator(order, orderBy)\n                            )\n                                .slice(\n                                    page * rowsPerPage,\n                                    page * rowsPerPage + rowsPerPage\n                                )\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(row.name);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n                                    let medicName = `${row.medics.name} ${row.medics.lastname}`;\n                                    let patientName = `${row.partners.name} ${row.partners.lastname}`;\n                                    return (\n                                        <TableRow\n                                            hover\n                                            role='checkbox'\n                                            aria-checked={isItemSelected}\n                                            tabIndex={-1}\n                                            key={row.name}\n                                            selected={isItemSelected}\n                                        >\n                                            <TableCell\n                                                align='left'\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                            >\n                                                {row.status.name ===\n                                                'Realizada' ? (\n                                                    <Tooltip\n                                                        title='Resultados'\n                                                        className={\n                                                            classes.iconFilter\n                                                        }\n                                                        onClick={() => {\n                                                            handleClickOpen(\n                                                                row\n                                                            );\n                                                        }}\n                                                    >\n                                                        <IconButton aria-label='Resultados'>\n                                                            <DoneAll />\n                                                        </IconButton>\n                                                    </Tooltip>\n                                                ) : row.status.name ===\n                                                  'Rechazada' ? (\n                                                    <Tooltip\n                                                        title='Rechazada'\n                                                        className={\n                                                            classes.iconFilter\n                                                        }\n                                                    >\n                                                        <IconButton aria-label='Rechazada'>\n                                                            <Cancel />\n                                                        </IconButton>\n                                                    </Tooltip>\n                                                ) : (\n                                                    <Tooltip\n                                                        title='En proceso...'\n                                                        className={\n                                                            classes.iconFilter\n                                                        }\n                                                    >\n                                                        <IconButton aria-label='En proceso...'>\n                                                            <HourglassEmptyOutlined />\n                                                        </IconButton>\n                                                    </Tooltip>\n                                                )}\n                                            </TableCell>\n                                            <TableCell\n                                                align='left'\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                            >\n                                                {row.date}\n                                            </TableCell>\n                                            <TableCell\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                                component='th'\n                                                id={labelId}\n                                                scope='row'\n                                                padding='default'\n                                            >\n                                                {row.study_name}\n                                            </TableCell>\n                                            <TableCell\n                                                align='left'\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                            >\n                                                {patientName}\n                                            </TableCell>\n                                            <TableCell\n                                                align='left'\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                            >\n                                                {row.partners.dni}\n                                            </TableCell>\n                                            <TableCell\n                                                align='left'\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                            >\n                                                {medicName}\n                                            </TableCell>\n                                            <TableCell\n                                                align='left'\n                                                className={\n                                                    index % 2 === 1\n                                                        ? classes.rowColor\n                                                        : null\n                                                }\n                                            >\n                                                {row.status.name}\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: 33 * emptyRows }}>\n                                    <TableCell colSpan={10} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                {!currentStudy ? null : (\n                    <Dialog\n                        fullScreen={fullScreen}\n                        open={open}\n                        onClose={handleClose}\n                        aria-labelledby='responsive-dialog-title'\n                    >\n                        <DialogTitle id='responsive-dialog-title'>\n                            {`${currentStudy.results.name} de ${currentStudy.partners.name} ${currentStudy.partners.lastname}`}\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                {`Estudio realizado el dia: ${currentStudy.results.results.date}`}\n                            </DialogContentText>\n                            <Divider />\n                            <DialogContentText>\n                                {`Estudio realizado por: ${currentStudy.results.results.medic_name}`}\n                            </DialogContentText>\n                            <Divider />\n                            <DialogContentText>{`Resultados:`}</DialogContentText>\n                            <DialogContentText style={{ whiteSpace: 'pre' }}>\n                                {`${currentStudy.results.results.results.replace(\n                                    /\\|/g,\n                                    '\\n'\n                                )}`}\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button\n                                onClick={handleClose}\n                                className={classes.buttonClose}\n                                autoFocus\n                            >\n                                Cerrar\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                )}\n                <TablePagination\n                    className={classes.root}\n                    rowsPerPageOptions={[5, 10, 15, 20]}\n                    component='div'\n                    count={toShowRows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    );\n}\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/MyPlan/MyPlan.jsx",["547"],"import React, { useEffect, useState } from 'react';\nimport supabase from '../../../supabase.config.js';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styles from './MyPlan.module.css';\nimport CompareMyPlan from './CompareMyPlan';\nimport { List, ListItem, ListItemText } from '@material-ui/core';\n\nlet useStyles = makeStyles(() => ({\n    root: {\n        width: '33%',\n    },\n}));\n\nfunction MyPlan({ affiliateData }) {\n    let classes = useStyles();\n    let [plan, setPlan] = useState(null);\n    let [numberFamiliars, setNumberFamiliars] = useState(0);\n\n    let fetchPlanDetails = async () => {\n        let { data: myPlan, error: fetchMyPlan } = await supabase\n            .from('plans')\n            .select('id, name, price,benefits(id,title)')\n            .eq('id', affiliateData.plan_id);\n        // console.log(myPlan[0])\n        setPlan(myPlan[0]);\n\n        let { data: familyGroup, error: fetchFamilyGroup } = await supabase\n            .from('partners')\n            .select('name')\n            .match({\n                family_group: affiliateData.family_group,\n                state: 'aceptado',\n            });\n        if (fetchFamilyGroup) return alert(fetchFamilyGroup.message);\n        setNumberFamiliars(familyGroup.length);\n    };\n\n    useEffect(() => {\n        fetchPlanDetails();\n        //eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {}, [plan]);\n\n    let [comp, setComp] = useState(false);\n\n    function handleCompare() {\n        comp ? setComp(false) : setComp(true);\n        // alert('clickeaste')\n        return;\n    }\n    useEffect(() => {\n        // console.log('clickeaste', comp);\n    }, [comp]);\n\n    return (\n        <div className={styles.container}>\n            {plan && !comp && (\n                <>\n                    <header\n                        className={`${styles.header} ${\n                            styles[`integra${plan.name.substring(8)}`]\n                        }`}\n                    >\n                        <h3>Mi Plan</h3>\n                        <h2>{plan.name}</h2>\n                    </header>\n                    <h3 className={styles.benefitsHeader}>\n                        Beneficios incluidos:\n                    </h3>\n                    <List className={styles.benefitsList}>\n                        {plan.benefits.map((el, idx) => (\n                            <ListItem\n                                className={classes.root}\n                                key={`benefit-${idx}`}\n                                button\n                            >\n                                <ListItemText primary={el.title} />\n                            </ListItem>\n                        ))}\n                    </List>\n                    <section className={styles.prices}>\n                        <article>\n                            <p>Costo mensual:</p>\n                            <p>Total x{numberFamiliars} socios:</p>\n                        </article>\n                        <article>\n                            <p> ${plan.price}</p>\n                            <p> ${plan.price * numberFamiliars}</p>\n                        </article>\n                    </section>\n                    <hr className={styles.divider} />\n                    <button\n                        className={styles.buttonCompare}\n                        onClick={handleCompare}\n                    >\n                        <h3>Otras opciones</h3>\n                    </button>\n                </>\n            )}\n            {plan && comp && (\n                <>\n                    <button\n                        className={styles.buttonBack}\n                        onClick={handleCompare}\n                    >\n                        <p className={styles.nuni}>Volver</p>\n                    </button>\n                    {/* <hr className={styles.divider} /> */}\n                    <CompareMyPlan\n                        plandata={plan}\n                        familymembers={numberFamiliars}\n                    />\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default MyPlan;\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/LandingPage/MediaCard.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/FamilyMembersList.jsx",["548","549","550"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\n\nimport supabase from '../../../supabase.config';\nimport { Button, CircularProgress } from '@material-ui/core';\n\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\n\nconst headCells = [\n    { id: 'name', numeric: false, disablePadding: true, label: 'NOMBRE' },\n    {\n        id: 'lastname',\n        numeric: false,\n        disablePadding: false,\n        label: 'APELLIDO',\n    },\n    {\n        id: 'birthdate',\n        numeric: false,\n        disablePadding: false,\n        label: 'FECHA DE NACIMIENTO',\n    },\n    {\n        id: 'family-bond',\n        numeric: false,\n        disablePadding: false,\n        label: 'PARENTESCO',\n    },\n    {\n        id: 'gender',\n        numeric: false,\n        disablePadding: false,\n        label: 'SEXO',\n    },\n    {\n        id: 'dni',\n        numeric: true,\n        disablePadding: false,\n        label: 'DNI',\n    },\n    {\n        id: 'email',\n        numeric: true,\n        disablePadding: false,\n        label: 'E-MAIL',\n    },\n    {\n        id: 'phone-number',\n        numeric: true,\n        disablePadding: false,\n        label: 'PHONE NUMBER',\n    },\n    {\n        id: 'actions',\n        numeric: true,\n        disablePadding: false,\n        label: 'ACTIONS',\n    },\n];\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        position: 'relative',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n    title: {\n        color: '#212121',\n        fontWeight: 'bold',\n        backgroundColor: lighten('#34a7a1', 0.6),\n    },\n    titleDos: {\n        flex: '1 1 100%',\n        fontWeight: 'bold',\n        fontSize: '1.4rem',\n        color: '#D9DCDF',\n        textAlign: 'center',\n    },\n    rowColor: {\n        backgroundColor: lighten('#e0e0e0', 0.3),\n        ':checked': {\n            color: blue[500],\n        },\n    },\n    iconFilter: {\n        color: 'rgba(0, 0, 0, 0.47)',\n        fontWeight: 'bold',\n        '&:hover': {\n            backgroundColor: lighten('#34a7a1', 0.8),\n        },\n    },\n}));\n\nfunction EnhancedTableHead(props) {\n    const { classes, order, orderBy, onRequestSort } = props;\n\n    return (\n        <TableHead className={classes.title}>\n            <TableRow>\n                {headCells.map((headCell, index) => (\n                    <TableCell\n                        key={`${headCell.id}-${index}`}\n                        align='left'\n                        padding='default'\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        {headCell.label}\n                        {orderBy === headCell.id ? (\n                            <span className={classes.visuallyHidden}>\n                                {order === 'desc'\n                                    ? 'sorted descending'\n                                    : 'sorted ascending'}\n                            </span>\n                        ) : null}\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        // paddingLeft: theme.spacing(0),\n        // paddingRight: theme.spacing(0),\n        backgroundColor: lighten('#34a7a1', 0.3),\n        padding: '0px 0px 0px 0px',\n        //color barra superior '\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                  color: '#fafafa',\n                  backgroundColor: lighten(blue[500], 0.5), //color barra superior cuando selecciono item\n                  fontWeight: 'bold',\n                  fontSize: '30px',\n              }\n            : {\n                  color: theme.palette.text.primary,\n                  backgroundColor: lighten('#34a7a1', 0.3),\n              },\n    title: {\n        flex: '1 1 100%',\n        fontWeight: 'bold',\n        fontSize: '1.4rem',\n        color: '#fafafa',\n        textAlign: 'center',\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected, setToShowRows, rows } = props;\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            <Typography\n                className={classes.title}\n                variant='h6'\n                id='tableTitle'\n                component='div'\n            >\n                GRUPO FAMILIAR\n            </Typography>\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\nexport default function FamilyMembersList() {\n    const classes = useStyles();\n    const MySwal = withReactContent(Swal);\n    const [familyGroup, setFamilyGroup] = useState([]);\n    const [titular, setTitular] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const titularDni = JSON.parse(localStorage.getItem('userdata')).dni;\n\n    useEffect(() => {\n        async function getAffiliate() {\n            try {\n                const { data: user } = await supabase\n                    .from('partners')\n                    .select('*')\n                    .eq('dni', JSON.parse(localStorage.getItem('userdata')).dni)\n                    .eq('family_bond', 'titular');\n\n                const { data: family } = await supabase\n                    .from('partners')\n                    .select('*')\n                    .eq('family_group', user[0].family_group)\n                    .eq('state', 'aceptado')\n                    .neq('dni', user[0].dni);\n\n                setFamilyGroup(family);\n                setTitular(true);\n            } catch (err) {\n                console.log(err);\n            }\n            setLoading(false);\n        }\n        getAffiliate();\n    }, []);\n\n    const handleDownFamiliar = async (familiar) => {\n        const { value: formValues } = await MySwal.fire({\n            title: `Dar de baja a ${familiar.name} ${familiar.lastname}`,\n            text: `DNI: ${familiar.dni}`,\n            input: 'textarea',\n            inputPlaceholder: 'Motivo de la baja...',\n            inputAttributes: {\n                'aria-label': 'Motivo de la baja...',\n            },\n            showCancelButton: true,\n            showConfirmButton: true,\n            reverseButtons: true,\n            confirmButtonText: 'Enviar',\n            cancelButtonText: 'Cancelar',\n        });\n        if (formValues) {\n            MySwal.fire({\n                title: 'Esta seguro/a de solicitar la baja?',\n                text: `Familiar a dar de baja:\\nDNI: ${familiar.dni}\\nNombre: ${familiar.name}\\nApellido: ${familiar.lastname}\\nMotivo: ${formValues}`,\n                reverseButtons: true,\n                icon: 'question',\n                showCancelButton: true,\n                showConfirmButton: true,\n                confirmButtonText: 'Estoy seguro',\n                cancelButtonText: 'Cancelar',\n            }).then(async (res) => {\n                const { error: errorSendingRequest } = await supabase\n                    .from('familiar_downs_request')\n                    .insert([\n                        {\n                            titular_dni: titularDni,\n                            familiar_dni: familiar.dni,\n                            familiar_name: familiar.name,\n                            familiar_lastname: familiar.lastname,\n                            familiar_birthdate: familiar.birthdate,\n                            reason: formValues,\n                        },\n                    ]);\n                if (errorSendingRequest) {\n                    return MySwal.fire({\n                        title: 'Error al enviar la solicitud',\n                        icon: 'error',\n                        text: `${\n                            errorSendingRequest.message ===\n                            'duplicate key value violates unique constraint \"familiar_downs_request_familiar_dni_key\"'\n                                ? 'Ya se envio la solicitud para este socio'\n                                : errorSendingRequest.message\n                        }`,\n                        showConfirmButton: true,\n                        confirmButtonText: 'Salir',\n                    });\n                }\n                if (res.isConfirmed) {\n                    MySwal.fire({\n                        title: 'Se solicito la baja con exito, un administrador se comunicara con usted en los proximos dias.',\n                        icon: 'success',\n                        showConfirmButton: true,\n                        confirmButtonText: 'Perfecto!',\n                    });\n                } else {\n                    MySwal.fire({\n                        title: 'Solicitud cancelada',\n                        icon: 'warning',\n                        showConfirmButton: true,\n                        confirmButtonText: 'Salir',\n                    });\n                }\n            });\n        }\n    };\n\n    if (loading) return <CircularProgress />;\n\n    if (!titular)\n        return <p>Solo el titular puede verificar esta información</p>;\n\n    return (\n        <>\n            <EnhancedTableToolbar />\n            <TableContainer component={Paper}>\n                <Table\n                    className={classes.table}\n                    size='small'\n                    aria-label='a dense table'\n                >\n                    <EnhancedTableHead classes={classes} />\n                    <TableBody>\n                        {familyGroup.map((row, idx) => (\n                            <TableRow key={`${row.name}-${idx}`}>\n                                <TableCell component='th' scope='row'>\n                                    {row.name}\n                                </TableCell>\n                                <TableCell align='left'>\n                                    {row.lastname}\n                                </TableCell>\n                                <TableCell align='left'>\n                                    {row.birthdate}\n                                </TableCell>\n                                <TableCell align='left'>\n                                    {row.family_bond}\n                                </TableCell>\n                                <TableCell align='left'>{row.gender}</TableCell>\n                                <TableCell align='left'>{row.dni}</TableCell>\n                                <TableCell align='left'>{row.email}</TableCell>\n                                <TableCell align='left'>\n                                    {row.phone_number}\n                                </TableCell>\n                                <TableCell align='left'>\n                                    <Button\n                                        variant='outlined'\n                                        size='small'\n                                        onClick={() => handleDownFamiliar(row)}\n                                    >\n                                        Dar de baja\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n}\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/FamilyStepper.jsx",["551"],"import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DatosFamiliar from \"./DatosFamiliar\";\nimport DatosRevision from \"./DatosRevision\";\nimport supabase from \"../../../supabase.config\";\nimport style from \"./FamilyStepper.module.css\";\nimport Styles from \"../../Guest/ContactForm/ContactForm.module.css\";\nimport swal from \"sweetalert2\";\nimport Declaration from \"./Declaration\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  backButton: {\n    marginRight: theme.spacing(1),\n    marginLeft: theme.spacing(5),\n    color: \"#fafafa\",\n    width: \"fit-content\",\n    border: \"3px solid #2c7f7b\",\n    borderRadius: \"5px\",\n    backgroundColor: \"#2c7f7b\",\n    fontWeight: \"bold\",\n    fontSize: \"15px\",\n    \"&:hover\": {\n      backgroundColor: \"#fafafa\",\n      color: \"#2c7f7b\",\n    },\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  popupBtn: {\n    color: \"#fafafa\",\n    width: \"fit-content\",\n    marginLeft: \"40px\",\n    border: \"3px solid #2c7f7b\",\n    borderRadius: \"5px\",\n    backgroundColor: \"#2c7f7b\",\n    fontWeight: \"bold\",\n    fontSize: \"15px\",\n    \"&:hover\": {\n      backgroundColor: \"#fafafa\",\n      color: \"#2c7f7b\",\n    },\n  },\n}));\n\nfunction getSteps() {\n  return [\n    \"Datos del Familiar\",\n    // 'Datos de la Empresa',\n    \"Antecedentes de Salud\",\n    \"Resumen\",\n  ];\n}\n\nfunction getStepContent(stepIndex) {\n  switch (stepIndex) {\n    case 0:\n      return <DatosFamiliar />;\n    // case 1:\n    //     return <DatosEmpresa />;\n    case 1:\n      return <Declaration />;\n    // case 3:\n    //   return <DatosFamiliares/>;\n    case 2:\n      return <DatosRevision />;\n    default:\n      return \"Unknown stepIndex\";\n  }\n}\n\nexport default function RegStepper() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = useState(0);\n  const steps = getSteps();\n\n  const alltrue = (obj) => {\n    let completeError = true;\n    for (let error in obj) {\n      completeError =\n        completeError && typeof Object.values(obj[error])[0] !== \"string\";\n    }\n    return completeError;\n  };\n\n  const handleNext = async () => {\n    switch (activeStep.toString()) {\n      case \"0\":\n        const errorsFamiliar = JSON.parse(\n          localStorage.getItem(\"errorsFamiliar\")\n        );\n        if (errorsFamiliar) {\n          alltrue(errorsFamiliar)\n            ? setActiveStep((prevActiveStep) => prevActiveStep + 1)\n            : new swal(\"Ups!\", \"Debes completar todos los campos\");\n        } else new swal(\"Ups!\", \"Debes completar todos los campos\");\n        break;\n      // case '1':\n      //     const errorsEmpresa = JSON.parse(\n      //         localStorage.getItem('errorsEmpresa')\n      //     );\n      //     alltrue(errorsEmpresa)\n      //         ? setActiveStep((prevActiveStep) => prevActiveStep + 1)\n      //         : new swal('Ups!', 'Debes completar todos los campos');\n      //     break;\n      case \"1\":\n        const datosDeclaration = JSON.parse(\n          localStorage.getItem(\"datosDeclaration\")\n        );\n        if (datosDeclaration) {\n          if (datosDeclaration.accept)\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n          else new swal(\"Ups!\", \"Debe aceptar la declaracion Jurada\");\n        } else new swal(\"Ups!\", \"No se registraron datos\");\n        break;\n\n      default:\n        break;\n    }\n    // setActiveStep((prevActiveStep) => prevActiveStep + 1)\n\n    if (activeStep === steps.length - 1) {\n      const datosFamiliar = JSON.parse(localStorage.getItem(\"datosFamiliar\"));\n      // const datosEmpresa = JSON.parse(\n      //     localStorage.getItem('datosEmpresa')\n      // );\n      const datosDeclaration = JSON.parse(\n        localStorage.getItem(\"datosDeclaration\")\n      );\n      const affiliatedata = JSON.parse(localStorage.getItem(\"affiliatedata\"));\n\n      // const { data: idPartners } = await supabase\n      //     .from('partners')\n      //     .select('family_group');\n\n      // const lastId =\n      //     idPartners\n      //         .sort(function (a, b) {\n      //             if (a.family_group < b.family_group) {\n      //                 return 1;\n      //             }\n      //             if (a.family_group > b.family_group) {\n      //                 return -1;\n      //             }\n      //             return 0;\n      //         })\n      //         .shift().family_group + 1;\n\n      // let idCompany = null;\n\n      // const { data: companyData } = await supabase\n      //     .from('companies')\n      //     .select('id')\n      //     .eq('cuit', datosEmpresa.company_cuit);\n      // console.log(companyData, 'companyData');\n\n      // if (companyData.length === 0) {\n      //     const { data: newId, error: errorInsertCompany } =\n      //         await supabase.from('companies').insert([\n      //             {\n      //                 business_name: datosEmpresa.bussines_name,\n      //                 cuit: datosEmpresa.company_cuit,\n      //                 phone_number: datosEmpresa.company_phone,\n      //                 email: datosEmpresa.company_email,\n      //             },\n      //         ]);\n      //     console.log(errorInsertCompany, 'errorInsertCompany');\n      //     console.log(newId, 'newId');\n\n      //     idCompany = newId[0].id;\n      // } else {\n      //     idCompany = companyData[0].id;\n      // }\n      const { error: errorP } = await supabase.from(\"partners\").insert([\n        {\n          dni: datosFamiliar.dni,\n          name: datosFamiliar.first_name,\n          lastname: datosFamiliar.last_name,\n          birthdate: datosFamiliar.birth_date,\n          phone_number: datosFamiliar.phone_number,\n          titular: false,\n          family_bond: datosFamiliar.familyBond,\n          family_group: affiliatedata.family_group,\n          state: \"revision pendiente\",\n          email: datosFamiliar.email,\n          plan_id: affiliatedata.plan_id,\n          // // company_id: idCompany,\n          gender: datosFamiliar.gender,\n        },\n      ]);\n      if (errorP) {\n        localStorage.removeItem(\"datosFamiliar\");\n        localStorage.removeItem(\"datosDeclaration\");\n        localStorage.removeItem(\"errorsFamiliar\");\n        setActiveStep(0);\n        return new swal(\"El DNI ya se encuentra Registrado\");\n      }\n      await supabase.from(\"address\").insert([\n        {\n          street: datosFamiliar.street_name,\n          street_number: datosFamiliar.number,\n          floor: datosFamiliar.floor && datosFamiliar.floor,\n          locality_id: datosFamiliar.locality.split(\"-\")[0],\n          partner_dni: datosFamiliar.dni,\n          department: datosFamiliar.apartment && datosFamiliar.apartment,\n        },\n      ]);\n\n      await supabase.from(\"medical_records\").insert([\n        {\n          partner_dni: datosFamiliar.dni,\n          declaration: JSON.stringify(datosDeclaration),\n        },\n      ]);\n      localStorage.removeItem(\"datosFamiliar\");\n      localStorage.removeItem(\"datosDeclaration\");\n      localStorage.removeItem(\"errorsFamiliar\");\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    }\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  // const handleReset = () => {\n  //     setActiveStep(0);\n  //     localStorage.clear();\n  // };\n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep} alternativeLabel>\n        {steps.map((label) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n      <div>\n        {activeStep === steps.length ? (\n          <div>\n            <div className={style.cartel}>\n              <img\n                src=\"../../assets/icons/medicrecordd.png\"\n                alt=\"medicRecord\"\n              />\n\n              <div className={style.text}>\n                <h3 className={style.title}>Su Registro esta Completo</h3>\n\n                <h4 className={style.subtitle}>\n                  Muchas gracias por su tiempo.\n                </h4>\n              </div>\n            </div>\n\n            {/* <Button onClick={handleReset}>Reset</Button> */}\n          </div>\n        ) : (\n          <div classname={style.btn}>\n            <Typography className={classes.instructions}>\n              {getStepContent(activeStep)}\n            </Typography>\n            <div>\n              <Button\n                disabled={activeStep === 0}\n                onClick={handleBack}\n                className={classes.backButton}\n              >\n                Back\n              </Button>\n              <Button\n                className={classes.popupBtn}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleNext}\n              >\n                {activeStep === 2 ? \"Finish\" : \"Next\"}\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/AffiliateDoctors/AffiliateDoctors.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/hooks/query.js",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/InfoPlans/InfoCard.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Chatbot/LinkList.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Chatbot/Options.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/LandingPage/PopUp.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/Declaration.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/DatosRevision.jsx",["552"],"import React from 'react';\nimport * as styles from './DatosRevision.module.css';\nimport Pdf from 'react-to-pdf';\nimport { Divider, Button, makeStyles } from '@material-ui/core';\nimport Declaration from './Declaration';\nconst ref = React.createRef();\n\nconst useStyles = makeStyles(() => ({\n    popupBtn: {\n        color: '#fafafa',\n        width: 'fit-content',\n        marginLeft: '40px',\n        border: '3px solid #2c7f7b',\n        borderRadius: '5px',\n        backgroundColor: '#2c7f7b',\n        fontWeight: 'bold',\n        fontSize: '15px',\n        '&:hover': {\n            backgroundColor: '#fafafa',\n            color: '#2c7f7b',\n        },\n    },\n}));    \nconst DatosRevision = () => {\n    const datosFamiliar = JSON.parse(localStorage.getItem('datosFamiliar'));\n    // const datosEmpresa = JSON.parse(localStorage.getItem('datosEmpresa'));\n    const datosDeclaration = JSON.parse(\n        localStorage.getItem('datosDeclaration')\n    );\n\n    const classes = useStyles();\n\n    return (\n        <div className={styles.form}>\n            <div className={styles.title}>\n                <h1>Revision de Datos </h1>\n            </div>\n            <div id='lacolumna' className={styles.ajuste}>\n                <div className={styles.datos}>\n                    <div className={styles.datosFamiliar}>\n                        <div className={styles.firstColumn}>\n                            <h2>Datos de Familiar</h2>\n                            <h4>Nombre: {datosFamiliar.first_name}</h4>\n                            <h4>Apellido: {datosFamiliar.last_name}</h4>\n                            <h4>Genero: {datosFamiliar.gender}</h4>\n                            <h4>DNI: {datosFamiliar.dni}</h4>\n                            <h4>CUIL: {datosFamiliar.cuil}</h4>\n                            <h4>Teléfono: {datosFamiliar.phone_number}</h4>\n                            <h4>Email: {datosFamiliar.email}</h4>\n                            <h4>Ocupación: {datosFamiliar.occupation}</h4>\n                            <h4>Estado civil: {datosFamiliar.marital_status}</h4>\n                            <h4>\n                                Fecha de nacimiento: {datosFamiliar.birth_date}\n                            </h4>\n                            <h4>Calle: {datosFamiliar.street_name}</h4>\n                            <h4>Numero: {datosFamiliar.number}</h4>\n                            {datosFamiliar.floor ? (\n                                <h4>Piso: {datosFamiliar.floor}</h4>\n                            ) : null}\n                            {datosFamiliar.apartment ? (\n                                <h4>Departamento: {datosFamiliar.apartment}</h4>\n                            ) : null}\n                            <h4>\n                                Provincia: {datosFamiliar.state.split('-')[1]}\n                            </h4>\n                            <h4>\n                                Localidad: {datosFamiliar.locality.split('-')[1]}\n                            </h4>\n                        </div>\n                        <Divider></Divider>\n                        {/* <div className={styles.datosEmpresa}>\n                            <h2>Datos del Empresa</h2>\n\n                            <h4>Razón Social:{datosEmpresa.bussines_name}</h4>\n                            <h4>\n                                Grupo empresarial:{datosEmpresa.bussines_group}\n                            </h4>\n                            <h4>\n                                Nombre y apellido del Referente de RRHH:\n                                {datosEmpresa.rh_name}\n                            </h4>\n                            <h4>Teléfono:{datosEmpresa.company_phone}</h4>\n                            <h4>E-mail:{datosEmpresa.company_email}</h4>\n                            <h4>CUIT:{datosEmpresa.company_cuit}</h4>\n                        </div> */}\n                    </div>\n\n                    <div ref={ref} id='Declaration' className={styles.salud}>\n                        <h2>Declaracion Jurada de Salud</h2>\n                        {/* <h3>{datosDeclaration.completeName}</h3>\n                        <h4>{datosFamiliar.dni}</h4> */}\n                        <h3>Parentesco: {datosFamiliar.familyBond}</h3>\n                        {datosDeclaration.diabetes === 'Si' ? (\n                            <h4>\n                                Diabetes<br></br>\n                                {datosDeclaration.diabetesD}\n                            </h4>\n                        ) : null}\n                        {datosDeclaration.heart === 'Si' ? (\n                            <h4>\n                                Condiciones Cardíacas<br></br>{' '}\n                                {datosDeclaration.heartD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.hernia === 'Si' ? (\n                            <h4>\n                                Hernia<br></br> {datosDeclaration.herniaD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.allergies === 'Si' ? (\n                            <h4>\n                                Alergias <br></br>\n                                {datosDeclaration.allergiesD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.seizures === 'Si' ? (\n                            <h4>\n                                Convulsiones <br></br>\n                                {datosDeclaration.seizuresD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.asthma === 'Si' ? (\n                            <h4>\n                                Asma <br></br>\n                                {datosDeclaration.asthmaD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.sinusitis === 'Si' ? (\n                            <h4>\n                                Sinusitis, Adenoides, Otitis a repetición\n                                <br></br>\n                                {datosDeclaration.sinusitisD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.hypertension === 'Si' ? (\n                            <h4>\n                                Hipertensión<br></br>{' '}\n                                {datosDeclaration.hypertensionD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.hypotension === 'Si' ? (\n                            <h4>\n                                Hipotensión<br></br>\n                                {datosDeclaration.hypotensionD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.others === 'Si' ? (\n                            <h4>\n                                Otros<br></br>\n                                {datosDeclaration.othersD}\n                            </h4>\n                        ) : null}\n                        <Divider></Divider>\n\n                        {datosDeclaration.surgeryProt === 'Si' ? (\n                            <h4>\n                                {' '}\n                                Operaciones/Protesís <br></br>\n                                {datosDeclaration.surgeryProtD}\n                            </h4>\n                        ) : null}\n                        <Divider></Divider>\n\n                        {datosDeclaration.hearing === 'Si' ? (\n                            <h4>\n                                {' '}\n                                Dificultades Auditivas<br></br>\n                                {datosDeclaration.hearingD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.visual === 'Si' ? (\n                            <h4>\n                                Dificultades visuales<br></br>\n                                {datosDeclaration.visualD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.spine === 'Si' ? (\n                            <h4>\n                                Desviación de Columna<br></br>\n                                {datosDeclaration.spineD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.fainting === 'Si' ? (\n                            <h4>\n                                {' '}\n                                Desmayos<br></br>\n                                {datosDeclaration.faintingD}\n                            </h4>\n                        ) : null}\n                        <Divider></Divider>\n\n                        {datosDeclaration.psychological === 'Si' ? (\n                            <h4>\n                                Tratamiento Psicologico<br></br>\n                                {datosDeclaration.psychologicalD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.psychiatric === 'Si' ? (\n                            <h4>\n                                Tratamiento psiquiátrico<br></br>\n                                {datosDeclaration.psychiatricD}\n                            </h4>\n                        ) : null}\n\n                        {datosDeclaration.medicines === 'Si' ? (\n                            <h4>\n                                {' '}\n                                Toma los siguientes medicamentos<br></br>{' '}\n                                {datosDeclaration.medicinesD}\n                            </h4>\n                        ) : null}\n                    </div>\n                </div>\n            </div>\n\n            <Pdf targetRef={ref} filename={`Partner-${datosDeclaration.dni}`}>\n                {({ toPdf }) => (\n                    <Button\n                        className={classes.popupBtn}\n                        variant='contained'\n                        onClick={toPdf}\n                    >\n                        Descargar en Pdf\n                    </Button>\n                )}\n                {/* // <button onClick={}> probando ese pdf</button>} */}\n            </Pdf>\n        </div>\n    );\n};\nexport default DatosRevision;\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/DatosFamiliar.jsx",["553"],"import React, { useEffect, useState } from 'react';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport styles from './DatosFamiliar.module.css';\nimport validator from './Validator';\n// import useQuery from '../../../hooks/query';\nimport supabase from '../../../supabase.config';\n\nconst DatosFamiliar = () => {\n    const [allStates, setAllStates] = useState([]);\n    const [allLocalities, setAllLocalities] = useState([]);\n\n    const provincias = async () => {\n        const { data: Prov, error: errorProv } = await supabase\n            .from('states')\n            .select();\n        setAllStates(Prov);\n    };\n    const localidades = async (provincia) => {\n        let idprov = provincia.split('-')[0];\n        const { data: local } = await supabase\n            .from('localities')\n            .select('id,name')\n            .eq('state_id', Number(idprov));\n        setAllLocalities(local);\n\n        return local;\n    };\n\n    useEffect(() => {\n        provincias();\n    }, []);\n\n    const [textInputs, setTextInputs] = useState({\n        first_name: '',\n        last_name: '',\n        occupation: '',\n    });\n    const [dniFamiliar, setDniFamiliar] = useState({ dni: '' });\n    const [textInputsNum, setInputsTextNum] = useState({\n        cuil: '',\n        phone_number: '',\n        number: '',\n    });\n    const [textInputsMix, setInputsTextMix] = useState({\n        street_name: '',\n    });\n    const [dateInputs, setDateInputs] = useState({\n        birth_date: '',\n    });\n    const [selectInputs, setSelectInputs] = useState({\n        marital_status: '',\n        gender: '',\n        state: '',\n        locality: '',\n        familyBond: '',\n    });\n    const [emailInputs, setEmailInputs] = useState({ email: '' });\n    const [apartmentInput, setApartmentInput] = useState({ apartment: '' });\n    const [errors, setErrors] = useState({\n        textErrors: {\n            first_name: '',\n            last_name: '',\n            occupation: '',\n        },\n        textNumErrors: {\n            cuil: '',\n            phone_number: '',\n            number: '',\n        },\n        dniErrors: {\n            dni: '',\n        },\n        textMixErrors: {\n            street_name: '',\n        },\n        dateErrors: { birth_date: '' },\n        selectErrors: {\n            marital_status: '',\n            gender: '',\n            locality: '',\n            state: '',\n            familyBond: '',\n        },\n        emailErrors: { email: '' },\n    });\n    // let dataQuery = {\n    //     name: useQuery().get('first_name'),\n    //     email: useQuery().get('email'),\n    //     dni: useQuery().get('dni'),\n    //     phone: useQuery().get('phone_number'),\n    // };\n    useEffect(() => {\n        const datosFamiliar = JSON.parse(localStorage.getItem('datosFamiliar'));\n\n        // if (dataQuery) {\n        //     setTextInputs({ ...textInputs, first_name: dataQuery.name });\n        //     setInputsTextNum({\n        //         ...textInputsNum,\n        //         dni: dataQuery.dni,\n        //         phone_number: dataQuery.phone_number,\n        //     });\n        //     setEmailInputs({\n        //         email: dataQuery.email,\n        // });\n        // }\n        if (datosFamiliar) {\n            setTextInputs({\n                first_name: datosFamiliar.first_name,\n                last_name: datosFamiliar.last_name,\n                occupation: datosFamiliar.occupation,\n            });\n            setInputsTextNum({\n                cuil: datosFamiliar.cuil,\n                phone_number: datosFamiliar.phone_number,\n                number: datosFamiliar.number,\n            });\n            setDniFamiliar({\n                dni: datosFamiliar.dni,\n            });\n            setInputsTextMix({\n                street_name: datosFamiliar.street_name,\n            });\n            setEmailInputs({\n                email: datosFamiliar.email,\n            });\n            setDateInputs({\n                birth_date: datosFamiliar.birth_date,\n            });\n            setSelectInputs({\n                marital_status: datosFamiliar.marital_status,\n                gender: datosFamiliar.gender,\n                locality: datosFamiliar.locality,\n                state: datosFamiliar.state,\n                familyBond: datosFamiliar.familyBond,\n            });\n            setApartmentInput({ apartment: datosFamiliar.apartment });\n\n            setErrors((errors) => ({\n                ...errors,\n                textErrors: validator(\n                    {\n                        first_name: datosFamiliar.first_name,\n                        last_name: datosFamiliar.last_name,\n                        occupation: datosFamiliar.occupation,\n                    },\n                    'text'\n                ),\n            }));\n            setErrors((errors) => ({\n                ...errors,\n                textNumErrors: validator(\n                    {\n                        cuil: datosFamiliar.cuil,\n                        phone_number: datosFamiliar.phone_number,\n                        number: datosFamiliar.number,\n                    },\n                    'number'\n                ),\n\n                //dni: datosFamiliar.dni,\n            }));\n            setErrors((errors) => ({\n                ...errors,\n                textMixErrors: validator(\n                    {\n                        street_name: datosFamiliar.street_name,\n                    },\n                    'mix'\n                ),\n            }));\n            setErrors((errors) => ({\n                ...errors,\n                dateErrors: validator(\n                    {\n                        birth_date: datosFamiliar.birth_date,\n                    },\n                    'date'\n                ),\n            }));\n            setErrors((errors) => ({\n                ...errors,\n                emailErrors: validator(\n                    {\n                        email: datosFamiliar.email,\n                    },\n                    'email'\n                ),\n            }));\n            setErrors(\n                (errors) => ({\n                    ...errors,\n                    selectErrors: validator(\n                        {\n                            marital_status: datosFamiliar.marital_status,\n                            gender: datosFamiliar.gender,\n                            locality: datosFamiliar.locality,\n                            state: datosFamiliar.state,\n                            familyBond: datosFamiliar.familyBond,\n                        },\n                        'radio'\n                    ),\n                }),\n                setErrors((errors) => ({\n                    ...errors,\n                    dniErrors: validateDni({\n                        dni: datosFamiliar.dni,\n                    }),\n                }))\n            );\n        }\n    }, []);\n\n    function saveInLocalStorage() {\n        localStorage.setItem(\n            'datosFamiliar',\n            JSON.stringify({\n                ...textInputs,\n                ...dniFamiliar,\n                ...textInputsNum,\n                ...textInputsMix,\n                ...dateInputs,\n                ...emailInputs,\n                ...selectInputs,\n                ...apartmentInput,\n            })\n        );\n        localStorage.setItem('errorsFamiliar', JSON.stringify({ ...errors }));\n    }\n\n    const handleTextChange = (e) => {\n        setTextInputs({ ...textInputs, [e.target.name]: e.target.value });\n\n        setErrors({\n            ...errors,\n            textErrors: validator(\n                { ...textInputs, [e.target.name]: e.target.value },\n                'text'\n            ),\n        });\n    };\n    const handleTextNumberChange = (e) => {\n        setInputsTextNum({ ...textInputsNum, [e.target.name]: e.target.value });\n\n        setErrors({\n            ...errors,\n            textNumErrors: validator(\n                { ...textInputsNum, [e.target.name]: e.target.value },\n                'number'\n            ),\n        });\n    };\n    const handleTextMixChange = (e) => {\n        setInputsTextMix({ ...textInputsMix, [e.target.name]: e.target.value });\n\n        setErrors({\n            ...errors,\n            textMixErrors: validator(\n                { ...textInputsMix, [e.target.name]: e.target.value },\n                'mix'\n            ),\n        });\n    };\n\n    const handleDateChange = (e) => {\n        setDateInputs({ ...dateInputs, [e.target.name]: e.target.value });\n\n        setErrors({\n            ...errors,\n            dateErrors: validator(\n                { ...dateInputs, [e.target.name]: e.target.value },\n                'date'\n            ),\n        });\n    };\n\n    const handleSelectChange = (e) => {\n        setSelectInputs({ ...selectInputs, [e.target.name]: e.target.value });\n\n        setErrors({\n            ...errors,\n            selectErrors: validator(\n                { ...selectInputs, [e.target.name]: e.target.value },\n                'radio'\n            ),\n        });\n    };\n\n    const handleEmailChange = (e) => {\n        setEmailInputs({\n            ...emailInputs,\n            [e.target.name]: e.target.value,\n        });\n        setErrors({\n            ...errors,\n            emailErrors: validator(\n                { ...emailInputs, [e.target.name]: e.target.value },\n                'email'\n            ),\n        });\n    };\n    const handleDni = (e) => {\n        setDniFamiliar({\n            [e.target.name]: e.target.value,\n        });\n        setErrors({\n            ...errors,\n            dniErrors: validateDni({ [e.target.name]: e.target.value }),\n        });\n    };\n\n    const validateDni = (input) => {\n        if (/^\\d*$/.test(input.dni) && input.dni.toString().length <= 8)\n            return { dniComplete: true };\n        else return { dni: 'El dni debe tener menos de 8 digitos' };\n    };\n\n    useEffect(() => {\n        localidades(selectInputs.state);\n    }, [selectInputs.state]);\n\n    const states = allStates.map((s) => {\n        return <option value={`${s.id}-${s.name}`}>{s.name}</option>;\n    });\n    //1-buenos aires\n    const localities =\n        allLocalities &&\n        allLocalities\n            // .filter((l) => l.state_id == selectInputs.state.split('-')[0])\n            .map((l) => {\n                return <option value={`${l.id}-${l.name}`}>{l.name}</option>;\n            });\n    return (\n        <div className={styles.form}>\n            <div className={styles.personalData}>\n                <div className={styles.firstColumn}>\n                    <label htmlFor=''>Datos del familiar</label>\n                    <div className={styles.input}>\n                        <TextField\n                            id='first_name-input'\n                            label='Nombre'\n                            type='text'\n                            name='first_name'\n                            autoComplete='off'\n                            value={textInputs.first_name}\n                            variant='outlined'\n                            onChange={(e) => handleTextChange(e)}\n                            {...(errors.textErrors.first_name && {\n                                error: !!errors.textErrors.first_name,\n                                helperText: 'Nombre invalido',\n                            })}\n                            onBlur={saveInLocalStorage}\n                        />\n                    </div>\n                    <div className={styles.input}>\n                        <TextField\n                            id='last_name-input'\n                            label='Apellido'\n                            type='text'\n                            name='last_name'\n                            autoComplete='off'\n                            value={textInputs.last_name}\n                            variant='outlined'\n                            onChange={(e) => handleTextChange(e)}\n                            {...(errors.textErrors.last_name && {\n                                error: !!errors.textErrors.last_name,\n                                helperText: 'Nombre invalido',\n                            })}\n                            onBlur={saveInLocalStorage}\n                        />\n                    </div>\n                    <div className={styles.input}>\n                        <FormControl\n                            variant='outlined'\n                            error={errors.selectErrors.gender}\n                        >\n                            <InputLabel htmlFor='gender-select'>\n                                Sexo\n                            </InputLabel>\n                            <Select\n                                native\n                                value={selectInputs.gender}\n                                onChange={(e) => handleSelectChange(e)}\n                                label='Genero'\n                                inputProps={{\n                                    name: 'gender',\n                                    id: 'gender-select',\n                                    style: { width: '177px' },\n                                }}\n                                onBlur={saveInLocalStorage}\n                            >\n                                <option aria-label='None' value='' />\n                                <option value={'Masculino'}>Masculino</option>\n                                <option value={'Femenino'}>Femenino</option>\n                                <option value={'Otro'}>Otro</option>\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className={styles.input}>\n                        <TextField\n                            id='dni-input'\n                            label='DNI'\n                            type='text'\n                            name='dni'\n                            autoComplete='off'\n                            value={dniFamiliar.dni}\n                            variant='outlined'\n                            onChange={handleDni}\n                            {...(errors.dniErrors.dni && {\n                                error: !!errors.dniErrors.dni,\n                                helperText: 'Dni invalido',\n                            })}\n                            inputProps={{ maxLength: 8 }}\n                            onBlur={saveInLocalStorage}\n                        />\n                    </div>\n                    <div className={styles.input}>\n                        <TextField\n                            id='cuil-input'\n                            label='CUIL'\n                            type='text'\n                            name='cuil'\n                            autoComplete='off'\n                            value={textInputsNum.cuil}\n                            variant='outlined'\n                            onChange={(e) => handleTextNumberChange(e)}\n                            {...(errors.textNumErrors.cuil && {\n                                error: !!errors.textNumErrors.cuil,\n                                helperText: 'CUIL invalida.',\n                            })}\n                            onBlur={saveInLocalStorage}\n                        />\n                    </div>\n                    <div className={styles.input}>\n                        <TextField\n                            id='phone-input'\n                            label='Teléfono'\n                            type='text'\n                            name='phone_number'\n                            autoComplete='off'\n                            value={textInputsNum.phone_number}\n                            variant='outlined'\n                            onChange={(e) => handleTextNumberChange(e)}\n                            {...(errors.textNumErrors.phone_number && {\n                                error: !!errors.textNumErrors.phone_number,\n                                helperText: 'Teléfono invalido',\n                            })}\n                            inputProps={{ maxLength: 12 }}\n                            onBlur={saveInLocalStorage}\n                        />\n                    </div>\n                </div>\n                <div className={styles.secondColumn}>\n                    <label>{` `}</label>\n                    <div className={styles.input}>\n                        <FormControl\n                            variant='outlined'\n                            error={errors.selectErrors.familyBond}\n                        >\n                            <InputLabel htmlFor='familybond-select'>\n                                Parentesco\n                            </InputLabel>\n                            <Select\n                                native\n                                value={selectInputs.familyBond}\n                                onChange={(e) => handleSelectChange(e)}\n                                label='Parentesco'\n                                inputProps={{\n                                    name: 'familyBond',\n                                    id: 'familybond-select',\n                                    style: { width: '177px' },\n                                }}\n                                onBlur={saveInLocalStorage}\n                            >\n                                <option value={''}></option>\n                                <option value={'conyuge'}>Cónyuge</option>\n                                <option value={'concubino/a'}>\n                                    Concubino/a\n                                </option>\n                                <option value={'hijo/a'}>Hijo/a</option>\n                                <option value={'Otro'}>Otro</option>\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className={styles.input}>\n                        <TextField\n                            id='mail-input'\n                            label='Email'\n                            type='text'\n                            name='email'\n                            autoComplete='off'\n                            value={emailInputs.email}\n                            variant='outlined'\n                            onChange={(e) => handleEmailChange(e)}\n                            {...(errors.emailErrors.email && {\n                                error: !!errors.emailErrors.email,\n                                helperText: 'Email invalido',\n                            })}\n                            onBlur={saveInLocalStorage}\n                        />\n                    </div>\n                    <div className={styles.input}>\n                        <TextField\n                            id='occupation-input'\n                            label='Ocupacion'\n                            type='text'\n                            name='occupation'\n                            autoComplete='off'\n                            value={textInputs.occupation}\n                            variant='outlined'\n                            onChange={(e) => handleTextChange(e)}\n                            {...(errors.textErrors.occupation && {\n                                error: !!errors.textErrors.occupation,\n                                helperText: 'Debe ingresar una ocupacion',\n                            })}\n                            onBlur={saveInLocalStorage}\n                        />\n                    </div>\n                    <div className={styles.input}>\n                        <FormControl\n                            variant='outlined'\n                            error={errors.selectErrors.marital_status}\n                        >\n                            <InputLabel htmlFor='marital_status-select'>\n                                Estado civil\n                            </InputLabel>\n                            <Select\n                                native\n                                value={selectInputs.marital_status}\n                                onChange={(e) => handleSelectChange(e)}\n                                label='Estado civil'\n                                inputProps={{\n                                    name: 'marital_status',\n                                    id: 'marital_status-select',\n                                    style: { width: '177px' },\n                                }}\n                                onBlur={saveInLocalStorage}\n                            >\n                                <option aria-label='None' value='' />\n                                <option value={'Casado/a'}>Casado/a</option>\n                                <option value={'Soltero/a'}>Soltero/a</option>\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className={styles.input}>\n                        <TextField\n                            id='birth'\n                            label='Birthday'\n                            name='birth_date'\n                            type='date'\n                            variant='outlined'\n                            // style={{width:'177px'}}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            onChange={handleDateChange}\n                            value={dateInputs.birth_date}\n                            error={!!errors.dateErrors.birth_date}\n                            helperText={\n                                errors.dateErrors.birth_date &&\n                                errors.dateErrors.birth_date\n                            }\n                            onBlur={saveInLocalStorage}\n                        />\n                    </div>\n                </div>\n            </div>\n            <div className={styles.addressData}>\n                <label htmlFor=''>Dirección</label>\n                <div className={styles.input}>\n                    <TextField\n                        id='street_name-input'\n                        label='Calle'\n                        type='text'\n                        name='street_name'\n                        autoComplete='off'\n                        value={textInputsMix.street_name}\n                        variant='outlined'\n                        onChange={(e) => handleTextMixChange(e)}\n                        {...(errors.textMixErrors.street_name && {\n                            error: !!errors.textMixErrors.street_name,\n                            helperText: 'Calle invalida',\n                        })}\n                        onBlur={saveInLocalStorage}\n                    />\n                </div>\n                <div className={styles.input}>\n                    <TextField\n                        id='number-input'\n                        label='Numero'\n                        type='text'\n                        name='number'\n                        autoComplete='off'\n                        value={textInputsNum.number}\n                        variant='outlined'\n                        onChange={(e) => handleTextNumberChange(e)}\n                        {...(errors.textNumErrors.number && {\n                            error: !!errors.textNumErrors.number,\n                            helperText: 'Numero invalido',\n                        })}\n                        onBlur={saveInLocalStorage}\n                    />\n                </div>\n                <div className={styles.input}>\n                    <TextField\n                        id='floor-input'\n                        label='Piso'\n                        type='text'\n                        name='floor'\n                        autoComplete='off'\n                        value={apartmentInput.floor}\n                        variant='outlined'\n                        onChange={(e) =>\n                            setApartmentInput({\n                                [e.target.name]: e.target.value,\n                            })\n                        }\n                        onBlur={saveInLocalStorage}\n                    />\n                </div>\n                <div className={styles.input}>\n                    <TextField\n                        id='apartment-input'\n                        label='Depto'\n                        type='text'\n                        name='apartment'\n                        autoComplete='off'\n                        value={apartmentInput.apartment}\n                        variant='outlined'\n                        onChange={(e) =>\n                            setApartmentInput({\n                                [e.target.name]: e.target.value,\n                            })\n                        }\n                        onBlur={saveInLocalStorage}\n                    />\n                </div>\n                <div className={styles.input}>\n                    <FormControl variant='outlined'>\n                        <InputLabel htmlFor='State-select'>\n                            Provincia\n                        </InputLabel>\n                        <Select\n                            native\n                            value={selectInputs.state}\n                            onChange={(e) => handleSelectChange(e)}\n                            label='Provincia'\n                            name='state'\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            inputProps={{\n                                id: 'state-select',\n                                style: { width: '177px' },\n                            }}\n                            onBlur={saveInLocalStorage}\n                        >\n                            <option aria-label='None' value='' />\n                            {states}\n                        </Select>\n                    </FormControl>\n                </div>\n                <div className={styles.input}>\n                    <FormControl variant='outlined'>\n                        <InputLabel htmlFor='locality-select'>\n                            Localidad\n                        </InputLabel>\n                        <Select\n                            native\n                            value={selectInputs.locality}\n                            onChange={(e) => handleSelectChange(e)}\n                            label='Localidad'\n                            name='locality'\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            inputProps={{\n                                id: 'locality-select',\n                                style: { width: '177px' },\n                            }}\n                            onBlur={saveInLocalStorage}\n                        >\n                            <option aria-label='None' value='' />\n                            {localities}\n                        </Select>\n                    </FormControl>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default DatosFamiliar;\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/MyPlan/CompareMyPlan.jsx",["554"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  FormControl,\n  Select,\n  MenuItem\n} from '@material-ui/core';\nimport {Check, Clear} from '@material-ui/icons';\nimport supabase from '../../../supabase.config';\n\n// Estilos usados en componentes de MUI.\nconst useStyles = makeStyles({\n  formcont: {\n    width: '100%',\n    boxShadow: \"none\",\n    color: \"#000000\",\n    verticalAlign: \"middle\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  },\n  headcell: {\n    fontSize: 18,\n    verticalAlign: \"middle\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  },\n  cell: {\n    verticalAlign: \"middle\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  },\n  centeredcell:{\n    verticalAlign: \"middle\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  }\n});\n\nexport default function CompareMyPlan({ plandata, familymembers }) {\n  const classes = useStyles();\n\n  // Datos del plan actual\n  let { id: actual_plan_id, name: actual_plan_name, price: actual_plan_price, benefits: actual_plan_benefits } = plandata;\n\n\n\n  // Estado del planes a mostrar en selector (distintos al actual)\n  let [otherPlans, setOtherPlans] = useState(null);\n\n  // Función que se trae todos los planes de la base\n  // de datos con id distinta del actual actual_plan_id\n  async function getPlans(idplanactual) {\n    const { data: showplans } = await supabase\n      .from('plans')\n      .select('id, name,price')\n      .neq('id', idplanactual)\n\n    // Ordena el arreglo de planes por nombre de menor a mayor\n    showplans.sort(function (a, b) {\n      //parseInt(a.name.trim().slice(7))) - parseInt(a.name.trim().slice(7)))\n      return parseInt(a.name.trim().slice(7)) - parseInt(b.name.trim().slice(7));\n    })\n    setOtherPlans(showplans)\n    // console.log(showplans);\n  }\n\n  useEffect(() => {\n    if (actual_plan_id) {\n      getPlans(actual_plan_id);\n    }\n  }, [actual_plan_id]);//[]\n\n  // Estado de todos los beneficios del plan a comparar\n  let [compBenefs, setCompBenefs] = useState(null);\n\n  // Función que se trae todos los beneficios de la base\n  // de datos que están en el plan con id especificada.\n  async function getBenef(idplan) {\n    let { data: benefs } = await supabase\n      .from('plans_benefits')\n      .select(`\n          plan: plan_id (id,name,price),\n          benefits: benefit_id (id,title)\n        `)\n      .eq('plan_id', idplan)\n\n    let arrbnfs = benefs.map(b => ({\n      id: b.benefits.id,\n      title: b.benefits.title,\n    }))\n\n    // Ordena el arreglo por id\n    arrbnfs.sort(function (a, b) {\n      return a.id - b.id;\n    })\n\n    setCompBenefs(arrbnfs);\n    // console.log('acá:', arrbnfs)\n    return;\n  }\n\n  // Estado del plan seleccionado para comparar\n  let [compPlan, setCompPlan] = useState({ id: null, name: null, price: null });\n\n  // Estado de todos los beneficios a comparar\n  let [allbenefs, setAllbenefs] = useState(actual_plan_benefits);\n\n\n  let handleChange = (event) => {\n    event.preventDefault();\n    setCompPlan(event.target.value);\n    // console.log('seleccionaste: ', event.target.value) \n  };\n\n  // Cuando fijó el plan recarga\n  useEffect(() => {\n    if (compPlan.id) {\n      // console.log('seleccionaste: ', compPlan.id, compPlan);\n      getBenef(compPlan.id);\n    }\n  }, [compPlan]);\n\n  // Función que devuelve un arreglo con todos los beneficios\n  // sin duplicar.\n  function mergeBenefsOnUnique(arr1, arr2) {\n    let all = arr1.concat(arr2);\n    let arr = all.filter((e, index) => {\n      return all.indexOf(e) === index;\n    })\n    setAllbenefs(arr);\n    return;\n  }\n\n  // Una vez que cargó los beneficios del plan a comparar recarga\n  useEffect(() => {\n    if (compBenefs) {\n      // console.log('acá2:', compBenefs)\n      mergeBenefsOnUnique(actual_plan_benefits, compBenefs)\n      // console.log('acá3:', allbenefs)\n    }\n  }, [actual_plan_benefits, compBenefs]);\n\n  useEffect(() => {\n    // if (allbenefs) {\n    //   console.log('acá3:', allbenefs)\n    //   console.log('acá4:', compBenefs)\n    // }\n  }, [allbenefs]);\n\n  //verifBenef(benef.id,actual_plan_benefits)<p><Check/></p>\n\n  let verifBenef = (id, arr) => {\n    return arr.some(e => e.id === id) ?  <Check/> : <Clear/>\n  }\n\n  return (\n    <div>\n      <TableContainer style={{ background: '#f1f1f1' }} >\n        <Table aria-label='caption table'>\n          <TableHead style={{ background: '#d7f7f5' }}>\n            <TableRow className={classes.cell} >\n              <TableCell className={classes.headcell} style={{ width: 500 }}>\n                Beneficios\n              </TableCell>\n              <TableCell className={classes.headcell} style={{ width: 200 }}>\n                {actual_plan_name} (actual)\n              </TableCell>\n              <TableCell className={classes.cell} style={{ width: 200 }}>\n                <FormControl className={classes.formControl}>\n                  {/* Celda con plan a comparar  */}\n                  <Select\n                    // multiple\n                    displayEmpty\n                    disableUnderline\n                    className={classes.headcell}\n                    value={compPlan}\n                    onChange={handleChange}\n                    // input={<Input />}\n                    renderValue={(selected) => {\n                      if (selected.id === null) {\n                        // Esto es lo que muestra antes de seleccionar\n                        return <>Plan a comparar</>;\n                      }\n                      return selected.name;\n                    }}\n                  >\n                    {otherPlans && otherPlans.map((plan, index) => (\n                      <MenuItem key={index} value={plan} >\n                        {plan.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {allbenefs && allbenefs.map((benef, index) => (\n              <TableRow>\n                {/* columna 2 */}\n                <TableCell\n                  key={index}\n                >\n                  {benef.title}\n                </TableCell>\n\n                {/* columna 2 */}\n                <TableCell\n                  component='th'\n                  scope='row'\n                  className={classes.centeredcell}\n                >\n                  {verifBenef(benef.id, actual_plan_benefits)}\n                </TableCell>\n                {/* columna 3 */}\n                {compBenefs ? <TableCell\n                  component='th'\n                  scope='row'\n                  className={classes.centeredcell}\n                >\n                  {compPlan.id && verifBenef(benef.id,compBenefs)}\n                </TableCell> : \n                <TableCell\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                 \n              </TableCell> }\n              </TableRow>\n            ))}\n\n            {/* Fila con importes  */}\n            <TableRow>\n              <TableCell\n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n              >\n                Importe individual: \n              </TableCell>\n              <TableCell\n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                $ {actual_plan_price}\n              </TableCell>\n              {compBenefs ? <TableCell \n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                $ {compPlan.price}\n              </TableCell>: \n                <TableCell\n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                 \n              </TableCell> }\n            </TableRow>\n            {familymembers && <TableRow>\n              <TableCell\n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n              >\n                Total por grupo familiar:\n              </TableCell>\n              <TableCell\n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                $ {actual_plan_price * familymembers}\n              </TableCell>\n              {compBenefs ? <TableCell \n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                $ {compPlan.price * familymembers}\n              </TableCell>: \n                <TableCell\n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                 \n              </TableCell> }\n            </TableRow>}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  )\n}\n","/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/AffiliateDoctors/Favs.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/AffiliateDoctors/SearchDoctors.jsx",[],"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/UserFamilyMembers/Validator.js",[],{"ruleId":"555","replacedBy":"556"},{"ruleId":"557","replacedBy":"558"},{"ruleId":"559","severity":1,"message":"560","line":11,"column":8,"nodeType":"561","messageId":"562","endLine":11,"endColumn":14},{"ruleId":"559","severity":1,"message":"563","line":12,"column":8,"nodeType":"561","messageId":"562","endLine":12,"endColumn":14},{"ruleId":"564","severity":1,"message":"565","line":21,"column":9,"nodeType":"566","endLine":21,"endColumn":45},{"ruleId":"564","severity":1,"message":"565","line":33,"column":9,"nodeType":"566","endLine":33,"endColumn":83},{"ruleId":"564","severity":1,"message":"565","line":45,"column":9,"nodeType":"566","endLine":45,"endColumn":82},{"ruleId":"564","severity":1,"message":"565","line":57,"column":9,"nodeType":"566","endLine":57,"endColumn":44},{"ruleId":"564","severity":1,"message":"565","line":69,"column":9,"nodeType":"566","endLine":69,"endColumn":82},{"ruleId":"564","severity":1,"message":"565","line":81,"column":9,"nodeType":"566","endLine":81,"endColumn":81},{"ruleId":"564","severity":1,"message":"565","line":93,"column":9,"nodeType":"566","endLine":93,"endColumn":81},{"ruleId":"564","severity":1,"message":"565","line":105,"column":9,"nodeType":"566","endLine":105,"endColumn":82},{"ruleId":"567","severity":1,"message":"568","line":119,"column":1,"nodeType":"569","messageId":"570","endLine":260,"endColumn":13},{"ruleId":"571","severity":1,"message":"572","line":119,"column":1,"nodeType":"569","messageId":"573","endLine":260,"endColumn":13},{"ruleId":"559","severity":1,"message":"574","line":185,"column":28,"nodeType":"561","messageId":"562","endLine":185,"endColumn":35},{"ruleId":"559","severity":1,"message":"575","line":202,"column":28,"nodeType":"561","messageId":"562","endLine":202,"endColumn":35},{"ruleId":"559","severity":1,"message":"576","line":5,"column":5,"nodeType":"561","messageId":"562","endLine":5,"endColumn":9},{"ruleId":"577","severity":1,"message":"578","line":490,"column":41,"nodeType":"579","messageId":"580","endLine":490,"endColumn":70},{"ruleId":"559","severity":1,"message":"581","line":3,"column":8,"nodeType":"561","messageId":"562","endLine":3,"endColumn":12},{"ruleId":"559","severity":1,"message":"582","line":18,"column":8,"nodeType":"561","messageId":"562","endLine":18,"endColumn":18},{"ruleId":"559","severity":1,"message":"583","line":20,"column":8,"nodeType":"561","messageId":"562","endLine":20,"endColumn":24},{"ruleId":"559","severity":1,"message":"584","line":25,"column":8,"nodeType":"561","messageId":"562","endLine":25,"endColumn":21},{"ruleId":"559","severity":1,"message":"585","line":32,"column":5,"nodeType":"561","messageId":"562","endLine":32,"endColumn":11},{"ruleId":"559","severity":1,"message":"586","line":37,"column":5,"nodeType":"561","messageId":"562","endLine":37,"endColumn":15},{"ruleId":"559","severity":1,"message":"587","line":41,"column":5,"nodeType":"561","messageId":"562","endLine":41,"endColumn":14},{"ruleId":"559","severity":1,"message":"588","line":44,"column":8,"nodeType":"561","messageId":"562","endLine":44,"endColumn":20},{"ruleId":"559","severity":1,"message":"589","line":91,"column":9,"nodeType":"561","messageId":"562","endLine":91,"endColumn":25},{"ruleId":"559","severity":1,"message":"590","line":94,"column":9,"nodeType":"561","messageId":"562","endLine":94,"endColumn":20},{"ruleId":"559","severity":1,"message":"591","line":95,"column":9,"nodeType":"561","messageId":"562","endLine":95,"endColumn":17},{"ruleId":"559","severity":1,"message":"590","line":214,"column":13,"nodeType":"561","messageId":"562","endLine":214,"endColumn":24},{"ruleId":"559","severity":1,"message":"592","line":214,"column":41,"nodeType":"561","messageId":"562","endLine":214,"endColumn":51},{"ruleId":"559","severity":1,"message":"593","line":214,"column":59,"nodeType":"561","messageId":"562","endLine":214,"endColumn":66},{"ruleId":"559","severity":1,"message":"594","line":217,"column":12,"nodeType":"561","messageId":"562","endLine":217,"endColumn":25},{"ruleId":"559","severity":1,"message":"595","line":272,"column":24,"nodeType":"561","messageId":"562","endLine":272,"endColumn":28},{"ruleId":"559","severity":1,"message":"596","line":407,"column":12,"nodeType":"561","messageId":"562","endLine":407,"endColumn":22},{"ruleId":"559","severity":1,"message":"597","line":407,"column":24,"nodeType":"561","messageId":"562","endLine":407,"endColumn":37},{"ruleId":"559","severity":1,"message":"598","line":408,"column":12,"nodeType":"561","messageId":"562","endLine":408,"endColumn":29},{"ruleId":"559","severity":1,"message":"599","line":408,"column":31,"nodeType":"561","messageId":"562","endLine":408,"endColumn":51},{"ruleId":"559","severity":1,"message":"600","line":412,"column":11,"nodeType":"561","messageId":"562","endLine":412,"endColumn":17},{"ruleId":"601","severity":1,"message":"602","line":436,"column":9,"nodeType":"603","messageId":"604","endLine":436,"endColumn":21},{"ruleId":"559","severity":1,"message":"605","line":452,"column":38,"nodeType":"561","messageId":"562","endLine":452,"endColumn":54},{"ruleId":"559","severity":1,"message":"606","line":462,"column":40,"nodeType":"561","messageId":"562","endLine":462,"endColumn":51},{"ruleId":"559","severity":1,"message":"607","line":16,"column":8,"nodeType":"561","messageId":"562","endLine":16,"endColumn":14},{"ruleId":"559","severity":1,"message":"608","line":4,"column":8,"nodeType":"561","messageId":"562","endLine":4,"endColumn":22},{"ruleId":"567","severity":1,"message":"609","line":128,"column":1,"nodeType":"569","messageId":"610","endLine":174,"endColumn":2},{"ruleId":"559","severity":1,"message":"611","line":3,"column":8,"nodeType":"561","messageId":"562","endLine":3,"endColumn":11},{"ruleId":"559","severity":1,"message":"612","line":4,"column":19,"nodeType":"561","messageId":"562","endLine":4,"endColumn":25},{"ruleId":"559","severity":1,"message":"613","line":30,"column":11,"nodeType":"561","messageId":"562","endLine":30,"endColumn":18},{"ruleId":"559","severity":1,"message":"614","line":5,"column":29,"nodeType":"561","messageId":"562","endLine":5,"endColumn":32},{"ruleId":"615","severity":1,"message":"616","line":148,"column":47,"nodeType":"617","messageId":"618","endLine":148,"endColumn":48,"suggestions":"619"},{"ruleId":"620","severity":1,"message":"621","line":177,"column":13,"nodeType":"622","messageId":"623","endLine":182,"endColumn":23},{"ruleId":"624","severity":1,"message":"625","line":247,"column":8,"nodeType":"626","endLine":247,"endColumn":10,"suggestions":"627"},{"ruleId":"624","severity":1,"message":"625","line":250,"column":8,"nodeType":"626","endLine":250,"endColumn":21,"suggestions":"628"},{"ruleId":"559","severity":1,"message":"629","line":20,"column":36,"nodeType":"561","messageId":"562","endLine":20,"endColumn":47},{"ruleId":"559","severity":1,"message":"630","line":126,"column":38,"nodeType":"561","messageId":"562","endLine":126,"endColumn":51},{"ruleId":"559","severity":1,"message":"631","line":194,"column":26,"nodeType":"561","messageId":"562","endLine":194,"endColumn":39},{"ruleId":"559","severity":1,"message":"632","line":194,"column":41,"nodeType":"561","messageId":"562","endLine":194,"endColumn":45},{"ruleId":"559","severity":1,"message":"633","line":12,"column":8,"nodeType":"561","messageId":"562","endLine":12,"endColumn":14},{"ruleId":"559","severity":1,"message":"634","line":5,"column":8,"nodeType":"561","messageId":"562","endLine":5,"endColumn":19},{"ruleId":"559","severity":1,"message":"635","line":16,"column":36,"nodeType":"561","messageId":"562","endLine":16,"endColumn":45},{"ruleId":"559","severity":1,"message":"636","line":2,"column":22,"nodeType":"561","messageId":"562","endLine":2,"endColumn":30},"no-native-reassign",["637"],"no-negated-in-lhs",["638"],"no-unused-vars","'linked' is defined but never used.","Identifier","unusedVar","'github' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","'partner' is assigned a value but never used.","'address' is assigned a value but never used.","'List' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'clsx' is defined but never used.","'DeleteIcon' is defined but never used.","'CircularProgress' is defined but never used.","'AdminMedicAdd' is defined but never used.","'Avatar' is defined but never used.","'InputLabel' is defined but never used.","'TextField' is defined but never used.","'calculateAge' is defined but never used.","'onSelectAllClick' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'toShowRows' is assigned a value but never used.","'setRows' is assigned a value but never used.","'selectedState' is assigned a value but never used.","'show' is assigned a value but never used.","'listMedics' is assigned a value but never used.","'setListMedics' is assigned a value but never used.","'medicSpecialities' is assigned a value but never used.","'setMedicSpecialities' is assigned a value but never used.","'MySwal' is assigned a value but never used.","no-dupe-keys","Duplicate key 'order_status'.","ObjectExpression","unexpected","'errorFetchOrders' is assigned a value but never used.","'errorStatus' is assigned a value but never used.","'styles' is defined but never used.","'FormHelperText' is defined but never used.","Block is redundant.","redundantBlock","'Pdf' is defined but never used.","'Button' is defined but never used.","'classes' is assigned a value but never used.","'Box' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["639","640"],"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchOrders'. Either include it or remove the dependency array.","ArrayExpression",["641"],["642"],"'fetchMyPlan' is assigned a value but never used.","'onRequestSort' is assigned a value but never used.","'setToShowRows' is assigned a value but never used.","'rows' is assigned a value but never used.","'Styles' is defined but never used.","'Declaration' is defined but never used.","'errorProv' is assigned a value but never used.","'useTheme' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"643","fix":"644","desc":"645"},{"messageId":"646","fix":"647","desc":"648"},{"desc":"649","fix":"650"},{"desc":"651","fix":"652"},"removeEscape",{"range":"653","text":"654"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"655","text":"656"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [fetchOrders]",{"range":"657","text":"658"},"Update the dependencies array to be: [fetchOrders, inputSearch]",{"range":"659","text":"660"},[4049,4050],"",[4049,4049],"\\",[8179,8181],"[fetchOrders]",[8247,8260],"[fetchOrders, inputSearch]"]