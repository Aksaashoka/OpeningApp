{"ast":null,"code":"var _jsxFileName = \"/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/MedicProfile/MedicProfile.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport supabase from '../../../supabase.config';\nimport './MedicProfile.css';\nimport Swal from 'sweetalert2';\nimport { Autocomplete } from '@material-ui/lab';\nimport { Button, TextField, IconButton } from '@material-ui/core';\nimport { AccountCircleRounded } from '@material-ui/icons'; // Estilos usados en componentes de MUI.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    //className={classes.root}\n    maxWidth: 345\n  },\n  media: {\n    height: 140\n  },\n  modButton: {\n    height: 40,\n    backgroundColor: '#41aea9',\n    color: '#000000',\n    fontWeight: 600,\n    alignSelf: 'flex-end',\n    marginRight: 30\n  },\n  modInput: {\n    marginBottom: 15,\n    width: '100%',\n    background: 'white'\n  },\n  selInput: {\n    marginBottom: 15,\n    width: '100%',\n    background: 'white'\n  },\n  autoInput: {\n    width: '100%',\n    marginBottom: 15,\n    background: 'white'\n  },\n  picUpload: {\n    color: '#fff',\n    width: '150px',\n    height: '150px'\n  }\n});\nexport default function MedicProfile({\n  firebase\n}) {\n  _s();\n\n  // Estilos para MUI.\n  let classes = useStyles(); // Estado que guarda localmente los datos del perfil del usuario.\n\n  let [user, setUser] = useState(null); // Función que a partir del número de documento (que obtiene\n  // del localStorage), se trae la información del usuario\n  // de la base de datos.\n\n  let fetchUserData = async document => {\n    let {\n      data: userInfo,\n      error: errorFetchUser\n    } = await supabase.from('medics').select('dni, name, lastname, phone_number, birthdate, email, address (id,street, street_number,floor, department,localities (id,name, postal_code, states (id,name)))').eq('dni', document); // console.log(userInfo[0]);\n\n    setUser({\n      dni: userInfo[0].dni,\n      name: userInfo[0].name,\n      lastname: userInfo[0].lastname,\n      birthdate: userInfo[0].birthdate,\n      email: userInfo[0].email,\n      phone: userInfo[0].phone_number,\n      street: userInfo[0].address[0].street,\n      street_number: userInfo[0].address[0].street_number,\n      floor: userInfo[0].address[0].floor,\n      department: userInfo[0].address[0].department,\n      locality_id: userInfo[0].address[0].id,\n      locality: userInfo[0].address[0].localities.name,\n      state: userInfo[0].address[0].localities.states.name,\n      state_id: userInfo[0].address[0].localities.states.id,\n      postal_code: userInfo[0].address[0].localities.postal_code\n    });\n    if (errorFetchUser) return console.log(errorFetchUser);\n  }; // Al cargar la página por primera vez, se trae del localStorage\n  // el dni del usuario y carga en user los datos que se trae\n  // de la base de datos.\n\n\n  const userDni = JSON.parse(localStorage.getItem('userdata'));\n  useEffect(() => {\n    fetchUserData(userDni.dni); //eslint-disable-next-line\n  }, []); // Función que calcula la edad en base a la F.Nac.\n\n  function getAge(date) {\n    var today = new Date();\n    var birthdate = new Date(date);\n    var age = today.getFullYear() - birthdate.getFullYear();\n    var m = today.getMonth() - birthdate.getMonth();\n\n    if (m < 0 || m === 0 && today.getDate() < birthdate.getDate()) {\n      age--;\n    }\n\n    return age;\n  } // Estado de modificación del perfil del usuario\n  // (si modifica o deja como está)\n\n\n  let [modify, setModify] = useState(false); // Función de cambio de estado de modificación\n  // al hacer click en modificar.\n\n  function handleclick(e) {\n    //submit\n    // Cuando hace click en modificar ...\n    if (!modify) {\n      setModify(true);\n    }\n  } // Provincias a mostrar en el selector.\n\n\n  let [allstates, setAllstates] = useState(null); // Función que obtiene las provincias de la base de datos,\n  // y las guarda como un arreglo en el estado allstates.\n\n  async function getStates() {\n    try {\n      let {\n        data: states\n      } = await supabase.from('states').select('id , name');\n      setAllstates(states.map(e => ({\n        state_id: e.id,\n        state_name: e.name\n      })));\n    } catch (err) {\n      console.error(err);\n    }\n\n    return;\n  } // Cuando hace click en modificar se trae las provincias.\n  // y las guarda en el estado allstates.\n\n\n  useEffect(() => {\n    if (modify) {\n      getStates();\n    }\n  }, [modify]); // Renderiza el selector de provincias cuando se carga allstates.\n\n  useEffect(() => {}, [allstates]); // Estado local donde guarda los datos modificables del perfil del usuario.\n\n  let [modInfo, setModInfo] = useState(null); // Cuando hago click en modificar, guarda por primera en el\n  //  estado modInfo todos los datos que ya tenía del usuario.\n\n  useEffect(() => {\n    //modInfo.street.length\n    if (modify && !!user.name.length) {\n      // console.log(user);\n      // setea los datos que puede modificar\n      setModInfo({\n        email: user.email,\n        phone: user.phone,\n        street: user.street,\n        street_number: user.street_number,\n        floor: user.floor,\n        department: user.department,\n        locality_id: user.locality_id,\n        locality: user.locality,\n        state: user.state,\n        state_id: user.state_id,\n        postal_code: user.postal_code\n      });\n    }\n  }, [user, modify]); // let [textInputs, setTextInputs] = useState({})\n  // Estado de errores por cada input modificable.\n\n  let [error, setError] = useState({\n    street: '',\n    street_number: '',\n    floor: '',\n    department: '',\n    email: '',\n    phone: '',\n    // state: '', <-- No tiene error x q viene del selector\n    locality: '',\n    postal_code: '' // locality_id:\n\n  }); // Cuando cambio un dato del usuario setea el error y modifica\n  // el estado (modInfo) en donde se guarda .\n\n  let handlechange = e => {\n    // ver que el input tenga los mismos nombres\n    let item = e.target.name;\n\n    switch (item) {\n      case 'street':\n        // Que no esté vacío ni espacios\n        // ^[a-zA-ZÀ-ÿ\\u00f1\\u00d1]+(\\s*[a-zA-ZÀ-ÿ\\u00f1\\u00d1]*)*[a-zA-ZÀ-ÿ\\u00f1\\u00d1]+$\n        let streetreg = /[0-9a-zA-ZÀ-ÿ\\u00f1\\u00d1.]+[ ]?[0-9a-z A-ZÀ-ÿ\\u00f1\\u00d1]*$/;\n        setError(error => ({ ...error,\n          [e.target.name]: streetreg.test(e.target.value) ? '' : 'No puede quedar incompleto o en blanco.'\n        }));\n        setModInfo({ ...modInfo,\n          [e.target.name]: e.target.value\n        });\n        break;\n\n      case 'street_number':\n        // let snumregex = /^[0-9]{1,10}$/;\n        let snumregex = /^\\d{1,10}$/;\n        setError(error => ({ ...error,\n          [e.target.name]: snumregex.test(e.target.value) ? '' : 'Sólo admite números'\n        }));\n        setModInfo({ ...modInfo,\n          [e.target.name]: e.target.value\n        });\n        break;\n\n      case 'floor':\n        setModInfo({ ...modInfo,\n          [e.target.name]: e.target.value\n        });\n        break;\n\n      case 'department':\n        setModInfo({ ...modInfo,\n          [e.target.name]: e.target.value\n        });\n        break;\n\n      case 'email':\n        let emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\n        setError(error => ({ ...error,\n          [e.target.name]: emailRegex.test(e.target.value) ? '' : 'Debe ser un email válido'\n        }));\n        setModInfo({ ...modInfo,\n          [e.target.name]: e.target.value\n        });\n        break;\n\n      case 'phone':\n        setError(error => ({ ...error,\n          [e.target.name]: /^[0-9]{5,9}$/.test(e.target.value) ? '' : 'De 5 (fijo) a 9 (cel sin 15 ni cod. área) cifras.'\n        }));\n        setModInfo({ ...modInfo,\n          [e.target.name]: e.target.value\n        });\n        break;\n\n      case 'state':\n        // Si cambio la provincia tengo que sacar el código postal\n        // id de provincia y la localidad que estaba por defecto.\n        function findStateId(provincia, allstates) {\n          let idfound = allstates.filter(state => state.state_name === provincia)[0].state_id;\n          return idfound;\n        }\n\n        setModInfo({ ...modInfo,\n          state: e.target.value,\n          locality_id: '',\n          locality: '',\n          state_id: findStateId(e.target.value, allstates),\n          postal_code: ''\n        });\n        break;\n\n      case 'postal_code':\n        setError(error => ({ ...error,\n          [e.target.name]: /^[0-9]{4}$/.test(e.target.value) ? '' : 'Debe ser un número de 4 cifras'\n        }));\n        setModInfo({ ...modInfo,\n          [e.target.name]: e.target.value\n        });\n        break;\n\n      default:\n        break;\n    }\n  }; // Cuando cambio una localidad setea el error, modifica\n  // el estado (modInfo) en donde se guarda y el código postal.\n\n\n  let handlechange2 = (e, value) => {\n    // Que no sea string vacío\n    let cityregex = /[\\S]/;\n    setError(error => ({ ...error,\n      locality: cityregex.test(value) ? '' : 'No puede quedar incompleto.'\n    }));\n\n    async function setInfoLocality(city, modInfo) {\n      try {\n        let {\n          data: infolocality\n        } = await supabase.from('localities').select('id,name,postal_code').eq('state_id', modInfo.state_id).eq('name', city);\n        console.log(infolocality[0]);\n        setModInfo({ ...modInfo,\n          locality: infolocality[0].name,\n          locality_id: infolocality[0].id,\n          postal_code: infolocality[0].postal_code\n        });\n      } catch (err) {\n        console.error(err);\n      }\n\n      return;\n    }\n\n    setInfoLocality(value, modInfo);\n  };\n\n  let validate = modInfo => {\n    return Object.values(error).every(x => x === ''); //si no tiene ningún mensaje de error devuelve true\n  }; // Cada vez que se modifica modInfo renderiza.\n  // Ciudades a cargar en el selector.\n\n\n  let [showCities, setShowCities] = useState(null); // Función que filtra las ciudades según la provincia ingresada\n\n  async function getCities(idprovincia, modInfo) {\n    //modInfo.state_id\n    try {\n      let {\n        data: infolocality\n      } = await supabase.from('localities').select('id,name,postal_code').eq('state_id', idprovincia); // console.log(infolocality);\n\n      setShowCities(infolocality.map(e => e.name)); // setAllstates(states.map(e => e.name));\n    } catch (err) {\n      console.error(err);\n    }\n\n    return;\n  } // Cuando actualiza la provincia cambia las ciudades a mostrar\n\n\n  useEffect(() => {\n    if (modInfo) {\n      getCities(modInfo.state_id);\n    }\n  }, [modInfo]); //----------------------------------------------------\n\n  async function handlesubmit() {\n    // Guardar datos en supabase !!!!!\n    if (validate()) {\n      //Update admins table (si modifico email o teléfono)\n      let modifyAdminsT = async (user, modInfo) => {\n        await supabase.from('medics').update({\n          phone_number: modInfo.phone,\n          email: modInfo.email\n        }).eq('dni', user.dni);\n      };\n\n      modifyAdminsT(user, modInfo); //Update address table (si modifico dirección o localidad)\n\n      let modifyAddressT = async (user, modInfo) => {\n        let {\n          error\n        } = await supabase.from('address').update({\n          street: modInfo.street,\n          street_number: modInfo.street_number,\n          floor: modInfo.floor || '',\n          department: modInfo.department || '',\n          locality_id: modInfo.locality_id\n        }).eq('medic_id', user.dni);\n        if (error) console.log(error);\n      };\n\n      modifyAddressT(user, modInfo); // console.log('Guardó', modInfo);\n\n      setModify(false);\n      setModInfo(null);\n      setUser(null);\n      let userDni = JSON.parse(localStorage.getItem('userdata')).dni;\n      fetchUserData(userDni);\n      await Swal.fire({\n        title: 'Exito!',\n        text: 'Sus datos fueron guardados',\n        icon: 'success',\n        confirmButtonText: 'OK'\n      });\n      window.location.reload();\n    } else {}\n  } //----------------------------------------------------\n\n\n  const handleFile = e => {\n    const file = e.target.files[0];\n    picUpload(file);\n  };\n\n  const picUpload = async file => {\n    const extension = file.name.slice(file.name.lastIndexOf('.'));\n    const userUid = firebase.auth().currentUser.uid;\n\n    try {\n      await firebase.storage().ref(`users/${userUid}/profile${extension}`).put(file);\n      let imgSrc = await firebase.storage().ref(`users/${userUid}/profile${extension}`).getDownloadURL();\n      let newLS = { ...userDni,\n        avatar_url: imgSrc\n      };\n      localStorage.setItem('userdata', JSON.stringify(newLS));\n      window.location.reload();\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ProfilePage_Cont\",\n    children: user && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info_cont\",\n      children: [!modify ?\n      /*#__PURE__*/\n      // Si no modifica usa los datos de user.\n      _jsxDEV(\"div\", {\n        className: \"input_info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"Mi Perfil\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"on_line_cont\",\n          children: userDni.avatar_url ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont imgContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `${userDni.avatar_url}`,\n              alt: \"Profile pic.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"changeImg\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                accept: \"image/*\",\n                className: \"picUpload\",\n                id: \"icon-button-file\",\n                type: \"file\",\n                onChange: handleFile\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"icon-button-file\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  className: classes.picUpload,\n                  \"aria-label\": \"upload picture\",\n                  component: \"span\",\n                  children: \"Cambiar Imagen\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 461,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont imgContainer\",\n            children: [/*#__PURE__*/_jsxDEV(AccountCircleRounded, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"changeImg\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                accept: \"image/*\",\n                className: \"picUpload\",\n                id: \"icon-button-file\",\n                type: \"file\",\n                onChange: handleFile\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"icon-button-file\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  className: classes.picUpload,\n                  \"aria-label\": \"upload picture\",\n                  component: \"span\",\n                  children: \"Cambiar Imagen\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"on_line_cont\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_title\",\n              children: \"Nombre:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_info\",\n              children: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_title\",\n              children: \"Apellido:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_info\",\n              children: user.lastname\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_title\",\n              children: \"Edad:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_info\",\n              children: getAge(user.birthdate)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"on_line_cont\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_title\",\n              children: \"F. Nacimiento:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_info\",\n              children: user.birthdate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"on_line_cont\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_title\",\n              children: \"email:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_info\",\n              children: user.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_title\",\n              children: \"Tel\\xE9fono:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_info\",\n              children: user.phone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"on_line_cont\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_title\",\n              children: \"Calle:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_info\",\n              children: [' ', user.street]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_title\",\n              children: \"N\\xFAmero:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_info\",\n              children: [' ', user.street_number]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 33\n          }, this), user.floor && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_title\",\n              children: \"Piso:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_info\",\n              children: [' ', user.floor]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 37\n          }, this), user.department && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_title\",\n              children: \"Dto:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_info\",\n              children: [' ', user.department]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"on_line_cont\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_title\",\n              children: \"Ciudad:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_info\",\n              children: user.locality\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_title\",\n              children: \"C\\xF3digo Postal:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_info\",\n              children: user.postal_code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"on_line_cont\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"one_info_cont\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_title\",\n              children: \"Provincia:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile_info\",\n              children: user.state\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 25\n      }, this) :\n      /*#__PURE__*/\n      // Si modifica usa los datos de modInfo.\n      _jsxDEV(_Fragment, {\n        children: modInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modif_info\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"mod_form_cont\",\n            noValidate: true,\n            autoComplete: \"off\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form_left_col\",\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                name: \"street\",\n                id: \"streetInput\",\n                className: classes.modInput,\n                label: \"Calle\",\n                variant: \"outlined\",\n                defaultValue: modInfo.street,\n                onChange: handlechange,\n                error: error.street,\n                helperText: error.street\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 603,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                name: \"street_number\",\n                id: \"street_numberInput\",\n                className: classes.modInput,\n                label: \"N\\xFAmero\",\n                variant: \"outlined\",\n                defaultValue: modInfo.street_number,\n                onChange: handlechange,\n                error: error.street_number,\n                helperText: error.street_number\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 614,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                name: \"floor\",\n                id: \"floorInput\",\n                className: classes.modInput,\n                label: \"Piso\",\n                variant: \"outlined\",\n                defaultValue: modInfo.floor,\n                onChange: handlechange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 627,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                name: \"department\",\n                id: \"departmentInput\",\n                className: classes.modInput,\n                label: \"Departamento\",\n                variant: \"outlined\",\n                defaultValue: modInfo.department,\n                onChange: handlechange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 636,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                name: \"email\",\n                id: \"emailInput\",\n                className: classes.modInput,\n                label: \"email\",\n                variant: \"outlined\",\n                defaultValue: modInfo.email,\n                onChange: handlechange,\n                error: error.email,\n                helperText: error.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 647,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form_right_col\",\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                name: \"phone\",\n                id: \"phoneInput\",\n                className: classes.modInput,\n                defaultValue: modInfo.phone,\n                label: \"Tel\\xE9fono\",\n                variant: \"outlined\",\n                onChange: handlechange,\n                error: error.phone,\n                helperText: error.phone\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 661,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"stateInput\",\n                select: true,\n                label: \"Provincia\",\n                value: modInfo.state,\n                onChange: handlechange // helperText=\"Seleccione una provincia\"\n                ,\n                variant: \"outlined\",\n                name: \"state\",\n                className: classes.selInput,\n                children: allstates && allstates.map((state, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  className: \"inputSel\",\n                  value: state.state_name,\n                  children: state.state_name\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 687,\n                  columnNumber: 61\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 673,\n                columnNumber: 45\n              }, this), showCities && /*#__PURE__*/_jsxDEV(Autocomplete, {\n                id: \"cityInput\",\n                name: \"locality\" //  Acá va el arreglo a mostrar en el selector\n                ,\n                options: showCities,\n                autoHighlight: true,\n                label: \"Localidad\",\n                value: modInfo.locality,\n                variant: \"outlined\",\n                onChange: handlechange2,\n                className: classes.autoInput,\n                getOptionLabel: option => option,\n                error: error.locality,\n                helperText: error.locality,\n                renderOption: option => option,\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                  id: \"cityInputopt\",\n                  name: \"cityOpt\",\n                  ...params,\n                  label: \"Localidad\",\n                  variant: \"outlined\" // placeholder=\"Favorites\"\n                  ,\n                  inputProps: { ...params.inputProps,\n                    autoComplete: 'new-password' // disable autocomplete and autofill\n\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 726,\n                  columnNumber: 57\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 704,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                name: \"postal_code\",\n                className: classes.modInput,\n                label: \"C\\xF3digo Postal\",\n                variant: \"outlined\",\n                defaultValue: modInfo.postal_code,\n                value: modInfo.postal_code,\n                onChange: handlechange,\n                error: error.postal_code,\n                helperText: error.postal_code\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 744,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                id: \"savebtn\",\n                disabled: !validate(),\n                variant: \"contained\",\n                className: classes.modButton,\n                onClick: handlesubmit,\n                children: \"Guardar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 757,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 33\n        }, this)\n      }, void 0, false), !modify && /*#__PURE__*/_jsxDEV(Button, {\n        id: \"modbtn\",\n        variant: \"contained\",\n        className: classes.modButton,\n        onClick: handleclick,\n        children: \"Modificar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 773,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 438,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MedicProfile, \"e0zpOpZgnGcziVFPpjJw6o/RYgA=\", false, function () {\n  return [useStyles];\n});\n\n_c = MedicProfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"MedicProfile\");","map":{"version":3,"sources":["/home/alan/Escritorio/Integra/IntegraApp/src/components/Medic/MedicProfile/MedicProfile.jsx"],"names":["React","useState","useEffect","makeStyles","supabase","Swal","Autocomplete","Button","TextField","IconButton","AccountCircleRounded","useStyles","root","maxWidth","media","height","modButton","backgroundColor","color","fontWeight","alignSelf","marginRight","modInput","marginBottom","width","background","selInput","autoInput","picUpload","MedicProfile","firebase","classes","user","setUser","fetchUserData","document","data","userInfo","error","errorFetchUser","from","select","eq","dni","name","lastname","birthdate","email","phone","phone_number","street","address","street_number","floor","department","locality_id","id","locality","localities","state","states","state_id","postal_code","console","log","userDni","JSON","parse","localStorage","getItem","getAge","date","today","Date","age","getFullYear","m","getMonth","getDate","modify","setModify","handleclick","e","allstates","setAllstates","getStates","map","state_name","err","modInfo","setModInfo","length","setError","handlechange","item","target","streetreg","test","value","snumregex","emailRegex","findStateId","provincia","idfound","filter","handlechange2","cityregex","setInfoLocality","city","infolocality","validate","Object","values","every","x","showCities","setShowCities","getCities","idprovincia","handlesubmit","modifyAdminsT","update","modifyAddressT","fire","title","text","icon","confirmButtonText","window","location","reload","handleFile","file","files","extension","slice","lastIndexOf","userUid","auth","currentUser","uid","storage","ref","put","imgSrc","getDownloadURL","newLS","avatar_url","setItem","stringify","message","index","option","params","inputProps","autoComplete"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport supabase from '../../../supabase.config';\nimport './MedicProfile.css';\nimport Swal from 'sweetalert2';\nimport { Autocomplete } from '@material-ui/lab';\nimport { Button, TextField, IconButton } from '@material-ui/core';\nimport { AccountCircleRounded } from '@material-ui/icons';\n\n// Estilos usados en componentes de MUI.\nconst useStyles = makeStyles({\n    root: {\n        //className={classes.root}\n        maxWidth: 345,\n    },\n    media: {\n        height: 140,\n    },\n    modButton: {\n        height: 40,\n        backgroundColor: '#41aea9',\n        color: '#000000',\n        fontWeight: 600,\n        alignSelf: 'flex-end',\n        marginRight: 30,\n    },\n    modInput: {\n        marginBottom: 15,\n        width: '100%',\n        background: 'white',\n    },\n    selInput: {\n        marginBottom: 15,\n        width: '100%',\n        background: 'white',\n    },\n    autoInput: {\n        width: '100%',\n        marginBottom: 15,\n        background: 'white',\n    },\n    picUpload: {\n        color: '#fff',\n        width: '150px',\n        height: '150px',\n    },\n});\n\nexport default function MedicProfile({ firebase }) {\n    // Estilos para MUI.\n    let classes = useStyles();\n\n    // Estado que guarda localmente los datos del perfil del usuario.\n    let [user, setUser] = useState(null);\n\n    // Función que a partir del número de documento (que obtiene\n    // del localStorage), se trae la información del usuario\n    // de la base de datos.\n    let fetchUserData = async (document) => {\n        let { data: userInfo, error: errorFetchUser } = await supabase\n            .from('medics')\n            .select(\n                'dni, name, lastname, phone_number, birthdate, email, address (id,street, street_number,floor, department,localities (id,name, postal_code, states (id,name)))'\n            )\n            .eq('dni', document);\n        // console.log(userInfo[0]);\n\n        setUser({\n            dni: userInfo[0].dni,\n            name: userInfo[0].name,\n            lastname: userInfo[0].lastname,\n            birthdate: userInfo[0].birthdate,\n            email: userInfo[0].email,\n            phone: userInfo[0].phone_number,\n            street: userInfo[0].address[0].street,\n            street_number: userInfo[0].address[0].street_number,\n            floor: userInfo[0].address[0].floor,\n            department: userInfo[0].address[0].department,\n            locality_id: userInfo[0].address[0].id,\n            locality: userInfo[0].address[0].localities.name,\n            state: userInfo[0].address[0].localities.states.name,\n            state_id: userInfo[0].address[0].localities.states.id,\n            postal_code: userInfo[0].address[0].localities.postal_code,\n        });\n        if (errorFetchUser) return console.log(errorFetchUser);\n    };\n\n    // Al cargar la página por primera vez, se trae del localStorage\n    // el dni del usuario y carga en user los datos que se trae\n    // de la base de datos.\n    const userDni = JSON.parse(localStorage.getItem('userdata'));\n    useEffect(() => {\n        fetchUserData(userDni.dni);\n        //eslint-disable-next-line\n    }, []);\n\n    // Función que calcula la edad en base a la F.Nac.\n    function getAge(date) {\n        var today = new Date();\n        var birthdate = new Date(date);\n        var age = today.getFullYear() - birthdate.getFullYear();\n        var m = today.getMonth() - birthdate.getMonth();\n\n        if (m < 0 || (m === 0 && today.getDate() < birthdate.getDate())) {\n            age--;\n        }\n\n        return age;\n    }\n\n    // Estado de modificación del perfil del usuario\n    // (si modifica o deja como está)\n    let [modify, setModify] = useState(false);\n\n    // Función de cambio de estado de modificación\n    // al hacer click en modificar.\n    function handleclick(e) {\n        //submit\n        // Cuando hace click en modificar ...\n        if (!modify) {\n            setModify(true);\n        }\n    }\n\n    // Provincias a mostrar en el selector.\n    let [allstates, setAllstates] = useState(null);\n\n    // Función que obtiene las provincias de la base de datos,\n    // y las guarda como un arreglo en el estado allstates.\n    async function getStates() {\n        try {\n            let { data: states } = await supabase\n                .from('states')\n                .select('id , name');\n\n            setAllstates(\n                states.map((e) => ({ state_id: e.id, state_name: e.name }))\n            );\n        } catch (err) {\n            console.error(err);\n        }\n        return;\n    }\n\n    // Cuando hace click en modificar se trae las provincias.\n    // y las guarda en el estado allstates.\n    useEffect(() => {\n        if (modify) {\n            getStates();\n        }\n    }, [modify]);\n\n    // Renderiza el selector de provincias cuando se carga allstates.\n    useEffect(() => {}, [allstates]);\n\n    // Estado local donde guarda los datos modificables del perfil del usuario.\n    let [modInfo, setModInfo] = useState(null);\n\n    // Cuando hago click en modificar, guarda por primera en el\n    //  estado modInfo todos los datos que ya tenía del usuario.\n    useEffect(() => {\n        //modInfo.street.length\n        if (modify && !!user.name.length) {\n            // console.log(user);\n\n            // setea los datos que puede modificar\n            setModInfo({\n                email: user.email,\n                phone: user.phone,\n                street: user.street,\n                street_number: user.street_number,\n                floor: user.floor,\n                department: user.department,\n                locality_id: user.locality_id,\n                locality: user.locality,\n                state: user.state,\n                state_id: user.state_id,\n                postal_code: user.postal_code,\n            });\n        }\n    }, [user, modify]);\n\n    // let [textInputs, setTextInputs] = useState({})\n    // Estado de errores por cada input modificable.\n    let [error, setError] = useState({\n        street: '',\n        street_number: '',\n        floor: '',\n        department: '',\n        email: '',\n        phone: '',\n        // state: '', <-- No tiene error x q viene del selector\n        locality: '',\n        postal_code: '',\n        // locality_id:\n    });\n\n    // Cuando cambio un dato del usuario setea el error y modifica\n    // el estado (modInfo) en donde se guarda .\n    let handlechange = (e) => {\n        // ver que el input tenga los mismos nombres\n        let item = e.target.name;\n        switch (item) {\n            case 'street': // Que no esté vacío ni espacios\n                // ^[a-zA-ZÀ-ÿ\\u00f1\\u00d1]+(\\s*[a-zA-ZÀ-ÿ\\u00f1\\u00d1]*)*[a-zA-ZÀ-ÿ\\u00f1\\u00d1]+$\n                let streetreg =\n                    /[0-9a-zA-ZÀ-ÿ\\u00f1\\u00d1.]+[ ]?[0-9a-z A-ZÀ-ÿ\\u00f1\\u00d1]*$/;\n\n                setError((error) => ({\n                    ...error,\n                    [e.target.name]: streetreg.test(e.target.value)\n                        ? ''\n                        : 'No puede quedar incompleto o en blanco.',\n                }));\n                setModInfo({ ...modInfo, [e.target.name]: e.target.value });\n                break;\n            case 'street_number':\n                // let snumregex = /^[0-9]{1,10}$/;\n                let snumregex = /^\\d{1,10}$/;\n                setError((error) => ({\n                    ...error,\n                    [e.target.name]: snumregex.test(e.target.value)\n                        ? ''\n                        : 'Sólo admite números',\n                }));\n                setModInfo({ ...modInfo, [e.target.name]: e.target.value });\n                break;\n            case 'floor':\n                setModInfo({ ...modInfo, [e.target.name]: e.target.value });\n                break;\n            case 'department':\n                setModInfo({ ...modInfo, [e.target.name]: e.target.value });\n                break;\n            case 'email':\n                let emailRegex =\n                    /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\n\n                setError((error) => ({\n                    ...error,\n                    [e.target.name]: emailRegex.test(e.target.value)\n                        ? ''\n                        : 'Debe ser un email válido',\n                }));\n                setModInfo({ ...modInfo, [e.target.name]: e.target.value });\n                break;\n            case 'phone':\n                setError((error) => ({\n                    ...error,\n                    [e.target.name]: /^[0-9]{5,9}$/.test(e.target.value)\n                        ? ''\n                        : 'De 5 (fijo) a 9 (cel sin 15 ni cod. área) cifras.',\n                }));\n                setModInfo({ ...modInfo, [e.target.name]: e.target.value });\n                break;\n            case 'state':\n                // Si cambio la provincia tengo que sacar el código postal\n                // id de provincia y la localidad que estaba por defecto.\n                function findStateId(provincia, allstates) {\n                    let idfound = allstates.filter(\n                        (state) => state.state_name === provincia\n                    )[0].state_id;\n                    return idfound;\n                }\n                setModInfo({\n                    ...modInfo,\n                    state: e.target.value,\n                    locality_id: '',\n                    locality: '',\n                    state_id: findStateId(e.target.value, allstates),\n                    postal_code: '',\n                });\n                break;\n            case 'postal_code':\n                setError((error) => ({\n                    ...error,\n                    [e.target.name]: /^[0-9]{4}$/.test(e.target.value)\n                        ? ''\n                        : 'Debe ser un número de 4 cifras',\n                }));\n                setModInfo({ ...modInfo, [e.target.name]: e.target.value });\n                break;\n            default:\n                break;\n        }\n    };\n\n    // Cuando cambio una localidad setea el error, modifica\n    // el estado (modInfo) en donde se guarda y el código postal.\n    let handlechange2 = (e, value) => {\n        // Que no sea string vacío\n        let cityregex = /[\\S]/;\n\n        setError((error) => ({\n            ...error,\n            locality: cityregex.test(value)\n                ? ''\n                : 'No puede quedar incompleto.',\n        }));\n\n        async function setInfoLocality(city, modInfo) {\n            try {\n                let { data: infolocality } = await supabase\n                    .from('localities')\n                    .select('id,name,postal_code')\n                    .eq('state_id', modInfo.state_id)\n                    .eq('name', city);\n\n                console.log(infolocality[0]);\n\n                setModInfo({\n                    ...modInfo,\n                    locality: infolocality[0].name,\n                    locality_id: infolocality[0].id,\n                    postal_code: infolocality[0].postal_code,\n                });\n            } catch (err) {\n                console.error(err);\n            }\n            return;\n        }\n\n        setInfoLocality(value, modInfo);\n    };\n\n    let validate = (modInfo) => {\n        return Object.values(error).every((x) => x === '');\n        //si no tiene ningún mensaje de error devuelve true\n    };\n\n    // Cada vez que se modifica modInfo renderiza.\n\n    // Ciudades a cargar en el selector.\n    let [showCities, setShowCities] = useState(null);\n\n    // Función que filtra las ciudades según la provincia ingresada\n    async function getCities(idprovincia, modInfo) {\n        //modInfo.state_id\n        try {\n            let { data: infolocality } = await supabase\n                .from('localities')\n                .select('id,name,postal_code')\n                .eq('state_id', idprovincia);\n\n            // console.log(infolocality);\n            setShowCities(infolocality.map((e) => e.name));\n            // setAllstates(states.map(e => e.name));\n        } catch (err) {\n            console.error(err);\n        }\n        return;\n    }\n\n    // Cuando actualiza la provincia cambia las ciudades a mostrar\n    useEffect(() => {\n        if (modInfo) {\n            getCities(modInfo.state_id);\n        }\n    }, [modInfo]);\n\n    //----------------------------------------------------\n    async function handlesubmit() {\n        // Guardar datos en supabase !!!!!\n\n        if (validate()) {\n            //Update admins table (si modifico email o teléfono)\n            let modifyAdminsT = async (user, modInfo) => {\n                await supabase\n                    .from('medics')\n                    .update({\n                        phone_number: modInfo.phone,\n                        email: modInfo.email,\n                    })\n                    .eq('dni', user.dni);\n            };\n            modifyAdminsT(user, modInfo);\n\n            //Update address table (si modifico dirección o localidad)\n            let modifyAddressT = async (user, modInfo) => {\n                let { error } = await supabase\n                    .from('address')\n                    .update({\n                        street: modInfo.street,\n                        street_number: modInfo.street_number,\n                        floor: modInfo.floor || '',\n                        department: modInfo.department || '',\n                        locality_id: modInfo.locality_id,\n                    })\n                    .eq('medic_id', user.dni);\n                if (error) console.log(error);\n            };\n            modifyAddressT(user, modInfo);\n\n            // console.log('Guardó', modInfo);\n            setModify(false);\n            setModInfo(null);\n            setUser(null);\n            let userDni = JSON.parse(localStorage.getItem('userdata')).dni;\n            fetchUserData(userDni);\n            await Swal.fire({\n                title: 'Exito!',\n                text: 'Sus datos fueron guardados',\n                icon: 'success',\n                confirmButtonText: 'OK',\n            });\n            window.location.reload();\n        } else {\n        }\n    }\n    //----------------------------------------------------\n\n    const handleFile = (e) => {\n        const file = e.target.files[0];\n        picUpload(file);\n    };\n\n    const picUpload = async (file) => {\n        const extension = file.name.slice(file.name.lastIndexOf('.'));\n        const userUid = firebase.auth().currentUser.uid;\n        try {\n            await firebase\n                .storage()\n                .ref(`users/${userUid}/profile${extension}`)\n                .put(file);\n            let imgSrc = await firebase\n                .storage()\n                .ref(`users/${userUid}/profile${extension}`)\n                .getDownloadURL();\n            let newLS = { ...userDni, avatar_url: imgSrc };\n\n            localStorage.setItem('userdata', JSON.stringify(newLS));\n            window.location.reload();\n        } catch (error) {\n            console.log(error.message);\n        }\n    };\n\n    return (\n        <div className='ProfilePage_Cont'>\n            {user && (\n                <div className='info_cont'>\n                    {!modify ? (\n                        // Si no modifica usa los datos de user.\n                        <div className='input_info'>\n                            <h1 className='title'>Mi Perfil</h1>\n                            <div className='on_line_cont'>\n                                {userDni.avatar_url ? (\n                                    <div className='one_info_cont imgContainer'>\n                                        <img\n                                            src={`${userDni.avatar_url}`}\n                                            alt='Profile pic.'\n                                        />\n                                        <div className='changeImg'>\n                                            <input\n                                                accept='image/*'\n                                                className='picUpload'\n                                                id='icon-button-file'\n                                                type='file'\n                                                onChange={handleFile}\n                                            />\n                                            <label htmlFor='icon-button-file'>\n                                                <IconButton\n                                                    className={\n                                                        classes.picUpload\n                                                    }\n                                                    aria-label='upload picture'\n                                                    component='span'\n                                                >\n                                                    Cambiar Imagen\n                                                </IconButton>\n                                            </label>\n                                        </div>\n                                    </div>\n                                ) : (\n                                    <div className='one_info_cont imgContainer'>\n                                        <AccountCircleRounded />\n                                        <div className='changeImg'>\n                                            <input\n                                                accept='image/*'\n                                                className='picUpload'\n                                                id='icon-button-file'\n                                                type='file'\n                                                onChange={handleFile}\n                                            />\n                                            <label htmlFor='icon-button-file'>\n                                                <IconButton\n                                                    className={\n                                                        classes.picUpload\n                                                    }\n                                                    aria-label='upload picture'\n                                                    component='span'\n                                                >\n                                                    Cambiar Imagen\n                                                </IconButton>\n                                            </label>\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                            <div className='on_line_cont'>\n                                <div className='one_info_cont'>\n                                    <p className='profile_title'>Nombre:</p>\n                                    <p className='profile_info'>{user.name}</p>\n                                </div>\n                                <div className='one_info_cont'>\n                                    <p className='profile_title'>Apellido:</p>\n                                    <p className='profile_info'>\n                                        {user.lastname}\n                                    </p>\n                                </div>\n                                <div className='one_info_cont'>\n                                    <p className='profile_title'>Edad:</p>\n                                    <p className='profile_info'>\n                                        {getAge(user.birthdate)}\n                                    </p>\n                                </div>\n                            </div>\n                            <div className='on_line_cont'>\n                                <div className='one_info_cont'>\n                                    <p className='profile_title'>\n                                        F. Nacimiento:\n                                    </p>\n                                    <p className='profile_info'>\n                                        {user.birthdate}\n                                    </p>\n                                </div>\n                            </div>\n                            <div className='on_line_cont'>\n                                <div className='one_info_cont'>\n                                    <p className='profile_title'>email:</p>\n                                    <p className='profile_info'>{user.email}</p>\n                                </div>\n                                <div className='one_info_cont'>\n                                    <p className='profile_title'>Teléfono:</p>\n                                    <p className='profile_info'>{user.phone}</p>\n                                </div>\n                            </div>\n                            <div className='on_line_cont'>\n                                <div className='one_info_cont'>\n                                    <p className='profile_title'>Calle:</p>\n                                    <p className='profile_info'>\n                                        {' '}\n                                        {user.street}\n                                    </p>\n                                    <p className='profile_title'>Número:</p>\n                                    <p className='profile_info'>\n                                        {' '}\n                                        {user.street_number}\n                                    </p>\n                                </div>\n                                {user.floor && (\n                                    <div className='one_info_cont'>\n                                        <p className='profile_title'>Piso:</p>\n                                        <p className='profile_info'>\n                                            {' '}\n                                            {user.floor}\n                                        </p>\n                                    </div>\n                                )}\n                                {user.department && (\n                                    <div className='one_info_cont'>\n                                        <p className='profile_title'>Dto:</p>\n                                        <p className='profile_info'>\n                                            {' '}\n                                            {user.department}\n                                        </p>\n                                    </div>\n                                )}\n                            </div>\n                            <div className='on_line_cont'>\n                                <div className='one_info_cont'>\n                                    <p className='profile_title'>Ciudad:</p>\n                                    <p className='profile_info'>\n                                        {user.locality}\n                                    </p>\n                                </div>\n                                <div className='one_info_cont'>\n                                    <p className='profile_title'>\n                                        Código Postal:\n                                    </p>\n                                    <p className='profile_info'>\n                                        {user.postal_code}\n                                    </p>\n                                </div>\n                            </div>\n                            <div className='on_line_cont'>\n                                <div className='one_info_cont'>\n                                    <p className='profile_title'>Provincia:</p>\n                                    <p className='profile_info'>{user.state}</p>\n                                </div>\n                            </div>\n                        </div>\n                    ) : (\n                        // Si modifica usa los datos de modInfo.\n                        <>\n                            {modInfo && (\n                                <div className='modif_info'>\n                                    <form\n                                        className='mod_form_cont'\n                                        noValidate\n                                        autoComplete='off'\n                                    >\n                                        <div className='form_left_col'>\n                                            <TextField\n                                                name='street'\n                                                id='streetInput'\n                                                className={classes.modInput}\n                                                label='Calle'\n                                                variant='outlined'\n                                                defaultValue={modInfo.street}\n                                                onChange={handlechange}\n                                                error={error.street}\n                                                helperText={error.street}\n                                            />\n                                            <TextField\n                                                name='street_number'\n                                                id='street_numberInput'\n                                                className={classes.modInput}\n                                                label='Número'\n                                                variant='outlined'\n                                                defaultValue={\n                                                    modInfo.street_number\n                                                }\n                                                onChange={handlechange}\n                                                error={error.street_number}\n                                                helperText={error.street_number}\n                                            />\n                                            <TextField\n                                                name='floor'\n                                                id='floorInput'\n                                                className={classes.modInput}\n                                                label='Piso'\n                                                variant='outlined'\n                                                defaultValue={modInfo.floor}\n                                                onChange={handlechange}\n                                            />\n                                            <TextField\n                                                name='department'\n                                                id='departmentInput'\n                                                className={classes.modInput}\n                                                label='Departamento'\n                                                variant='outlined'\n                                                defaultValue={\n                                                    modInfo.department\n                                                }\n                                                onChange={handlechange}\n                                            />\n                                            <TextField\n                                                name='email'\n                                                id='emailInput'\n                                                className={classes.modInput}\n                                                label='email'\n                                                variant='outlined'\n                                                defaultValue={modInfo.email}\n                                                onChange={handlechange}\n                                                error={error.email}\n                                                helperText={error.email}\n                                            />\n                                        </div>\n\n                                        <div className='form_right_col'>\n                                            <TextField\n                                                name='phone'\n                                                id='phoneInput'\n                                                className={classes.modInput}\n                                                defaultValue={modInfo.phone}\n                                                label='Teléfono'\n                                                variant='outlined'\n                                                onChange={handlechange}\n                                                error={error.phone}\n                                                helperText={error.phone}\n                                            />\n\n                                            <TextField\n                                                id='stateInput'\n                                                select\n                                                label='Provincia'\n                                                value={modInfo.state}\n                                                onChange={handlechange}\n                                                // helperText=\"Seleccione una provincia\"\n                                                variant='outlined'\n                                                name='state'\n                                                className={classes.selInput}\n                                            >\n                                                {allstates &&\n                                                    allstates.map(\n                                                        (state, index) => (\n                                                            <option\n                                                                className='inputSel'\n                                                                key={index}\n                                                                value={\n                                                                    state.state_name\n                                                                }\n                                                            >\n                                                                {\n                                                                    state.state_name\n                                                                }\n                                                            </option>\n                                                        )\n                                                    )}\n                                            </TextField>\n\n                                            {/* cities */}\n                                            {showCities && (\n                                                <Autocomplete\n                                                    id='cityInput'\n                                                    name='locality'\n                                                    //  Acá va el arreglo a mostrar en el selector\n                                                    options={showCities}\n                                                    autoHighlight\n                                                    label='Localidad'\n                                                    value={modInfo.locality}\n                                                    variant='outlined'\n                                                    onChange={handlechange2}\n                                                    className={\n                                                        classes.autoInput\n                                                    }\n                                                    getOptionLabel={(option) =>\n                                                        option\n                                                    }\n                                                    error={error.locality}\n                                                    helperText={error.locality}\n                                                    renderOption={(option) =>\n                                                        option\n                                                    }\n                                                    renderInput={(params) => (\n                                                        <TextField\n                                                            id='cityInputopt'\n                                                            name='cityOpt'\n                                                            {...params}\n                                                            label='Localidad'\n                                                            variant='outlined'\n                                                            // placeholder=\"Favorites\"\n\n                                                            inputProps={{\n                                                                ...params.inputProps,\n                                                                autoComplete:\n                                                                    'new-password', // disable autocomplete and autofill\n                                                            }}\n                                                        />\n                                                    )}\n                                                />\n                                            )}\n\n                                            <TextField\n                                                name='postal_code'\n                                                className={classes.modInput}\n                                                label='Código Postal'\n                                                variant='outlined'\n                                                defaultValue={\n                                                    modInfo.postal_code\n                                                }\n                                                value={modInfo.postal_code}\n                                                onChange={handlechange}\n                                                error={error.postal_code}\n                                                helperText={error.postal_code}\n                                            />\n                                            <Button\n                                                id='savebtn'\n                                                disabled={!validate()}\n                                                variant='contained'\n                                                className={classes.modButton}\n                                                onClick={handlesubmit}\n                                            >\n                                                Guardar\n                                            </Button>\n                                        </div>\n                                    </form>\n                                </div>\n                            )}\n                        </>\n                    )}\n                    {!modify && (\n                        <Button\n                            id='modbtn'\n                            variant='contained'\n                            className={classes.modButton}\n                            onClick={handleclick}\n                        >\n                            Modificar\n                        </Button>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}