{"ast":null,"code":"var _jsxFileName = \"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/AdminPlans.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPlans, getBenefits } from '../../../../actions/getter.action.js';\nimport { CircularProgress } from '@material-ui/core';\nimport 'firebase/auth';\nimport styles from './AdminPlans.module.css';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content'; // Table\n\nimport PlansTable from './PlansTable.jsx'; // Supa\n\nimport supabase from '../../../../supabase.config'; // Pop ups\n\nimport ModifyPlan from './ModifyPlan.jsx';\nimport PlanDetails from './PlanDetails.jsx';\nimport DeletePlan from './DeletePlan.jsx';\nimport PlanState from './PlanState.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AdminPlans({\n  firebase\n}) {\n  _s();\n\n  const allPlans = useSelector(state => state.plans.allPlans);\n  const allBenefits = useSelector(state => state.plans.allBenefits);\n  const MySwal = withReactContent(Swal);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getPlans());\n    dispatch(getBenefits()); //eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    prueba(); //eslint-disable-next-line\n  }, [allPlans]);\n  const [openModify, setOpenModify] = useState(false);\n  const [openDelete, setOpenDelete] = useState(false);\n  const [openDetails, setOpenDetails] = useState(false);\n  const [openState, setOpenState] = useState(false);\n  const [deletePlan, setDeletePlan] = useState({\n    id_plan: '',\n    name: '',\n    price: '',\n    benefits: []\n  });\n  const [planDetail, setPlanDetail] = useState({\n    id_plan: '',\n    name: '',\n    price: '',\n    benefits: []\n  });\n  const [modalPlan, setModalPlan] = useState({\n    id_plan: '',\n    name: '',\n    price: '',\n    benefits: []\n  });\n  const [planState, setPlanState] = useState({\n    id_plan: '',\n    active: false\n  });\n  const [password, setPassword] = useState({\n    password: '',\n    error: false\n  });\n  const [plansForTable, setPlansForTable] = useState([]);\n\n  const prueba = async () => {\n    const plans = [];\n\n    for (const plan of allPlans) {\n      const {\n        count\n      } = await supabase.from('partners').select('plan_id', {\n        count: 'exact'\n      }).eq('plan_id', plan.id);\n      plans.push({\n        id: 'name',\n        id_plan: plan.id,\n        name: plan.name,\n        price: plan.price,\n        benefits: plan.benefits,\n        description: plan.description,\n        active: plan.active,\n        users: count\n      });\n    }\n\n    setPlansForTable(plans);\n  }; // Modals open\n\n\n  const handleOpenModalModify = plan => {\n    setModalPlan({\n      id_plan: plan.id_plan,\n      name: plan.name,\n      price: plan.price,\n      benefits: plan.benefits.map(benefit => benefit.title)\n    });\n    setOpenModify(true);\n  };\n\n  const handleOpenModalDelete = plan => {\n    setDeletePlan({\n      id_plan: plan.id_plan,\n      name: plan.name,\n      price: plan.price,\n      benefits: plan.benefits,\n      users: plan.users\n    });\n    setOpenDelete(true);\n  };\n\n  const handleOpenModalDetails = plan => {\n    setPlanDetail({\n      id_plan: plan.id_plan,\n      name: plan.name,\n      price: plan.price,\n      benefits: plan.benefits\n    });\n    setOpenDetails(true);\n  };\n\n  const handleOpenModalState = plan => {\n    setPlanState({\n      id_plan: plan.id_plan,\n      active: plan.active\n    });\n    setOpenState(true);\n  }; // Modals close\n\n\n  const handleCloseModalModify = () => {\n    setOpenModify(false);\n  };\n\n  const handleCloseModalDelete = () => {\n    setPassword({\n      password: '',\n      error: false\n    });\n    setOpenDelete(false);\n  };\n\n  const handleCloseModalDetails = () => {\n    setOpenDetails(false);\n  };\n\n  const handleCloseModalState = () => {\n    setOpenState(false);\n  }; // Modify Modal Field Changes\n\n\n  const handleChangeModalModify = e => {\n    setModalPlan({ ...modalPlan,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleAutoCompleteModify = arrayOfStringBenefits => {\n    setModalPlan({ ...modalPlan,\n      benefits: arrayOfStringBenefits\n    });\n  }; // Submits\n\n\n  const handleSubmitModify = async e => {\n    e.preventDefault();\n    let flag = false;\n    let benefitsArray = [];\n\n    for (const benefit of modalPlan.benefits) {\n      benefitsArray.push({\n        plan_id: modalPlan.id_plan,\n        benefit_id: benefit.id\n      });\n    }\n\n    await supabase.from('plans').update({\n      name: e.target[0].value,\n      price: e.target[1].value\n    }).eq('id', modalPlan.id_plan);\n\n    if (benefitsArray.length !== 0 && benefitsArray[0].benefit_id) {\n      await supabase.from('plans_benefits').delete().eq('plan_id', modalPlan.id_plan);\n      await supabase.from('plans_benefits').insert(benefitsArray);\n    } else {\n      if (benefitsArray.length === 0) {\n        flag = true;\n      }\n    }\n\n    handleCloseModalModify();\n\n    if (flag) {\n      MySwal.fire({\n        title: 'El plan debe tener al menos 1 beneficio',\n        icon: 'error'\n      });\n    } else {\n      MySwal.fire({\n        title: 'Se modificó el plan con exito!.',\n        icon: 'success'\n      }).then(() => window.location.reload());\n    }\n  };\n\n  const handleSubmitDelete = async (e, id) => {\n    e.preventDefault();\n\n    try {\n      let userData = JSON.parse(localStorage.getItem('userdata'));\n      await firebase.auth().signInWithEmailAndPassword(userData.email, e.target[0].value);\n      setPassword({\n        password: '',\n        error: false\n      });\n      await supabase.from('plans_benefits').delete().eq('plan_id', id);\n      await supabase.from('plans').delete().eq('id', id);\n      handleCloseModalDelete();\n      MySwal.fire({\n        title: 'Se elimino el plan con exito!.',\n        icon: 'success'\n      }).then(() => window.location.reload());\n    } catch (error) {\n      setPassword({\n        password: '',\n        error: true\n      });\n      handleCloseModalDelete();\n      MySwal.fire({\n        title: 'Contraseña Incorrecta',\n        icon: 'error'\n      });\n    }\n  };\n\n  if (allPlans.length === 0 || plansForTable.length === 0) return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 16\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    style: {\n      filter: openModify || openDelete ? 'blur(4px)' : 'none'\n    } // PARA PONER EL FONDO BLURRY\n    ,\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.plansContainer,\n      children: /*#__PURE__*/_jsxDEV(PlansTable, {\n        plans: plansForTable,\n        handleOpenModalModify: handleOpenModalModify,\n        handleOpenModalDelete: handleOpenModalDelete,\n        handleOpenModalDetails: handleOpenModalDetails,\n        handleOpenModalState: handleOpenModalState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModifyPlan, {\n      open: openModify,\n      handleSubmit: handleSubmitModify,\n      handleChangeModal: handleChangeModalModify,\n      handleCloseModal: handleCloseModalModify,\n      handleAutoComplete: handleAutoCompleteModify,\n      modalPlan: modalPlan,\n      allBenefits: allBenefits\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DeletePlan, {\n      open: openDelete,\n      deletePlan: deletePlan,\n      handleSubmit: handleSubmitDelete,\n      handleCloseModal: handleCloseModalDelete,\n      password: password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PlanDetails, {\n      open: openDetails,\n      planDetail: planDetail,\n      handleCloseModal: handleCloseModalDetails,\n      password: password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PlanState, {\n      open: openState,\n      planState: planState,\n      handleCloseModal: handleCloseModalState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AdminPlans, \"Fdcr5YBDdaY7aTAC+Lo/Eo4+meE=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = AdminPlans;\nexport default AdminPlans;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminPlans\");","map":{"version":3,"sources":["/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/AdminPlans/AdminPlans.jsx"],"names":["React","useEffect","useState","useSelector","useDispatch","getPlans","getBenefits","CircularProgress","styles","Swal","withReactContent","PlansTable","supabase","ModifyPlan","PlanDetails","DeletePlan","PlanState","AdminPlans","firebase","allPlans","state","plans","allBenefits","MySwal","dispatch","prueba","openModify","setOpenModify","openDelete","setOpenDelete","openDetails","setOpenDetails","openState","setOpenState","deletePlan","setDeletePlan","id_plan","name","price","benefits","planDetail","setPlanDetail","modalPlan","setModalPlan","planState","setPlanState","active","password","setPassword","error","plansForTable","setPlansForTable","plan","count","from","select","eq","id","push","description","users","handleOpenModalModify","map","benefit","title","handleOpenModalDelete","handleOpenModalDetails","handleOpenModalState","handleCloseModalModify","handleCloseModalDelete","handleCloseModalDetails","handleCloseModalState","handleChangeModalModify","e","target","value","handleAutoCompleteModify","arrayOfStringBenefits","handleSubmitModify","preventDefault","flag","benefitsArray","plan_id","benefit_id","update","length","delete","insert","fire","icon","then","window","location","reload","handleSubmitDelete","userData","JSON","parse","localStorage","getItem","auth","signInWithEmailAndPassword","email","container","filter","plansContainer"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,sCAAtC;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,OAAO,eAAP;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,gBAAP,MAA6B,2BAA7B,C,CAEA;;AAEA,OAAOC,UAAP,MAAuB,kBAAvB,C,CAEA;;AAEA,OAAOC,QAAP,MAAqB,6BAArB,C,CAEA;;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAkC;AAAA;;AAC9B,QAAMC,QAAQ,GAAGhB,WAAW,CAAEiB,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYF,QAAxB,CAA5B;AACA,QAAMG,WAAW,GAAGnB,WAAW,CAAEiB,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYC,WAAxB,CAA/B;AACA,QAAMC,MAAM,GAAGb,gBAAgB,CAACD,IAAD,CAA/B;AACA,QAAMe,QAAQ,GAAGpB,WAAW,EAA5B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZuB,IAAAA,QAAQ,CAACnB,QAAQ,EAAT,CAAR;AACAmB,IAAAA,QAAQ,CAAClB,WAAW,EAAZ,CAAR,CAFY,CAGZ;AACH,GAJQ,EAIN,EAJM,CAAT;AAMAL,EAAAA,SAAS,CAAC,MAAM;AACZwB,IAAAA,MAAM,GADM,CAEZ;AACH,GAHQ,EAGN,CAACN,QAAD,CAHM,CAAT;AAKA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BzB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAAC0B,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAAC4B,WAAD,EAAcC,cAAd,IAAgC7B,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAAC8B,SAAD,EAAYC,YAAZ,IAA4B/B,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACgC,UAAD,EAAaC,aAAb,IAA8BjC,QAAQ,CAAC;AACzCkC,IAAAA,OAAO,EAAE,EADgC;AAEzCC,IAAAA,IAAI,EAAE,EAFmC;AAGzCC,IAAAA,KAAK,EAAE,EAHkC;AAIzCC,IAAAA,QAAQ,EAAE;AAJ+B,GAAD,CAA5C;AAMA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BvC,QAAQ,CAAC;AACzCkC,IAAAA,OAAO,EAAE,EADgC;AAEzCC,IAAAA,IAAI,EAAE,EAFmC;AAGzCC,IAAAA,KAAK,EAAE,EAHkC;AAIzCC,IAAAA,QAAQ,EAAE;AAJ+B,GAAD,CAA5C;AAMA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BzC,QAAQ,CAAC;AACvCkC,IAAAA,OAAO,EAAE,EAD8B;AAEvCC,IAAAA,IAAI,EAAE,EAFiC;AAGvCC,IAAAA,KAAK,EAAE,EAHgC;AAIvCC,IAAAA,QAAQ,EAAE;AAJ6B,GAAD,CAA1C;AAMA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4B3C,QAAQ,CAAC;AACvCkC,IAAAA,OAAO,EAAE,EAD8B;AAEvCU,IAAAA,MAAM,EAAE;AAF+B,GAAD,CAA1C;AAKA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B9C,QAAQ,CAAC;AAAE6C,IAAAA,QAAQ,EAAE,EAAZ;AAAgBE,IAAAA,KAAK,EAAE;AAAvB,GAAD,CAAxC;AAEA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCjD,QAAQ,CAAC,EAAD,CAAlD;;AAEA,QAAMuB,MAAM,GAAG,YAAY;AACvB,UAAMJ,KAAK,GAAG,EAAd;;AAEA,SAAK,MAAM+B,IAAX,IAAmBjC,QAAnB,EAA6B;AACzB,YAAM;AAAEkC,QAAAA;AAAF,UAAY,MAAMzC,QAAQ,CAC3B0C,IADmB,CACd,UADc,EAEnBC,MAFmB,CAEZ,SAFY,EAED;AAAEF,QAAAA,KAAK,EAAE;AAAT,OAFC,EAGnBG,EAHmB,CAGhB,SAHgB,EAGLJ,IAAI,CAACK,EAHA,CAAxB;AAIApC,MAAAA,KAAK,CAACqC,IAAN,CAAW;AACPD,QAAAA,EAAE,EAAE,MADG;AAEPrB,QAAAA,OAAO,EAAEgB,IAAI,CAACK,EAFP;AAGPpB,QAAAA,IAAI,EAAEe,IAAI,CAACf,IAHJ;AAIPC,QAAAA,KAAK,EAAEc,IAAI,CAACd,KAJL;AAKPC,QAAAA,QAAQ,EAAEa,IAAI,CAACb,QALR;AAMPoB,QAAAA,WAAW,EAAEP,IAAI,CAACO,WANX;AAOPb,QAAAA,MAAM,EAAEM,IAAI,CAACN,MAPN;AAQPc,QAAAA,KAAK,EAAEP;AARA,OAAX;AAUH;;AACDF,IAAAA,gBAAgB,CAAC9B,KAAD,CAAhB;AACH,GApBD,CAhD8B,CAsE9B;;;AAEA,QAAMwC,qBAAqB,GAAIT,IAAD,IAAU;AACpCT,IAAAA,YAAY,CAAC;AACTP,MAAAA,OAAO,EAAEgB,IAAI,CAAChB,OADL;AAETC,MAAAA,IAAI,EAAEe,IAAI,CAACf,IAFF;AAGTC,MAAAA,KAAK,EAAEc,IAAI,CAACd,KAHH;AAITC,MAAAA,QAAQ,EAAEa,IAAI,CAACb,QAAL,CAAcuB,GAAd,CAAmBC,OAAD,IAAaA,OAAO,CAACC,KAAvC;AAJD,KAAD,CAAZ;AAMArC,IAAAA,aAAa,CAAC,IAAD,CAAb;AACH,GARD;;AAUA,QAAMsC,qBAAqB,GAAIb,IAAD,IAAU;AACpCjB,IAAAA,aAAa,CAAC;AACVC,MAAAA,OAAO,EAAEgB,IAAI,CAAChB,OADJ;AAEVC,MAAAA,IAAI,EAAEe,IAAI,CAACf,IAFD;AAGVC,MAAAA,KAAK,EAAEc,IAAI,CAACd,KAHF;AAIVC,MAAAA,QAAQ,EAAEa,IAAI,CAACb,QAJL;AAKVqB,MAAAA,KAAK,EAAER,IAAI,CAACQ;AALF,KAAD,CAAb;AAOA/B,IAAAA,aAAa,CAAC,IAAD,CAAb;AACH,GATD;;AAWA,QAAMqC,sBAAsB,GAAId,IAAD,IAAU;AACrCX,IAAAA,aAAa,CAAC;AACVL,MAAAA,OAAO,EAAEgB,IAAI,CAAChB,OADJ;AAEVC,MAAAA,IAAI,EAAEe,IAAI,CAACf,IAFD;AAGVC,MAAAA,KAAK,EAAEc,IAAI,CAACd,KAHF;AAIVC,MAAAA,QAAQ,EAAEa,IAAI,CAACb;AAJL,KAAD,CAAb;AAMAR,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH,GARD;;AAUA,QAAMoC,oBAAoB,GAAIf,IAAD,IAAU;AACnCP,IAAAA,YAAY,CAAC;AACTT,MAAAA,OAAO,EAAEgB,IAAI,CAAChB,OADL;AAETU,MAAAA,MAAM,EAAEM,IAAI,CAACN;AAFJ,KAAD,CAAZ;AAIAb,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAND,CAvG8B,CA+G9B;;;AAEA,QAAMmC,sBAAsB,GAAG,MAAM;AACjCzC,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAFD;;AAIA,QAAM0C,sBAAsB,GAAG,MAAM;AACjCrB,IAAAA,WAAW,CAAC;AAAED,MAAAA,QAAQ,EAAE,EAAZ;AAAgBE,MAAAA,KAAK,EAAE;AAAvB,KAAD,CAAX;AACApB,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAHD;;AAKA,QAAMyC,uBAAuB,GAAG,MAAM;AAClCvC,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH,GAFD;;AAIA,QAAMwC,qBAAqB,GAAG,MAAM;AAChCtC,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAFD,CA9H8B,CAkI9B;;;AAEA,QAAMuC,uBAAuB,GAAIC,CAAD,IAAO;AACnC9B,IAAAA,YAAY,CAAC,EAAE,GAAGD,SAAL;AAAgB,OAAC+B,CAAC,CAACC,MAAF,CAASrC,IAAV,GAAiBoC,CAAC,CAACC,MAAF,CAASC;AAA1C,KAAD,CAAZ;AACH,GAFD;;AAIA,QAAMC,wBAAwB,GAAIC,qBAAD,IAA2B;AACxDlC,IAAAA,YAAY,CAAC,EAAE,GAAGD,SAAL;AAAgBH,MAAAA,QAAQ,EAAEsC;AAA1B,KAAD,CAAZ;AACH,GAFD,CAxI8B,CA4I9B;;;AAEA,QAAMC,kBAAkB,GAAG,MAAOL,CAAP,IAAa;AACpCA,IAAAA,CAAC,CAACM,cAAF;AACA,QAAIC,IAAI,GAAG,KAAX;AACA,QAAIC,aAAa,GAAG,EAApB;;AACA,SAAK,MAAMlB,OAAX,IAAsBrB,SAAS,CAACH,QAAhC,EAA0C;AACtC0C,MAAAA,aAAa,CAACvB,IAAd,CAAmB;AACfwB,QAAAA,OAAO,EAAExC,SAAS,CAACN,OADJ;AAEf+C,QAAAA,UAAU,EAAEpB,OAAO,CAACN;AAFL,OAAnB;AAIH;;AACD,UAAM7C,QAAQ,CACT0C,IADC,CACI,OADJ,EAED8B,MAFC,CAEM;AAAE/C,MAAAA,IAAI,EAAEoC,CAAC,CAACC,MAAF,CAAS,CAAT,EAAYC,KAApB;AAA2BrC,MAAAA,KAAK,EAAEmC,CAAC,CAACC,MAAF,CAAS,CAAT,EAAYC;AAA9C,KAFN,EAGDnB,EAHC,CAGE,IAHF,EAGQd,SAAS,CAACN,OAHlB,CAAN;;AAKA,QAAI6C,aAAa,CAACI,MAAd,KAAyB,CAAzB,IAA8BJ,aAAa,CAAC,CAAD,CAAb,CAAiBE,UAAnD,EAA+D;AAC3D,YAAMvE,QAAQ,CACT0C,IADC,CACI,gBADJ,EAEDgC,MAFC,GAGD9B,EAHC,CAGE,SAHF,EAGad,SAAS,CAACN,OAHvB,CAAN;AAIA,YAAMxB,QAAQ,CAAC0C,IAAT,CAAc,gBAAd,EAAgCiC,MAAhC,CAAuCN,aAAvC,CAAN;AACH,KAND,MAMO;AACH,UAAIA,aAAa,CAACI,MAAd,KAAyB,CAA7B,EAAgC;AAC5BL,QAAAA,IAAI,GAAG,IAAP;AACH;AACJ;;AAEDZ,IAAAA,sBAAsB;;AACtB,QAAIY,IAAJ,EAAU;AACNzD,MAAAA,MAAM,CAACiE,IAAP,CAAY;AACRxB,QAAAA,KAAK,EAAE,yCADC;AAERyB,QAAAA,IAAI,EAAE;AAFE,OAAZ;AAIH,KALD,MAKO;AACHlE,MAAAA,MAAM,CAACiE,IAAP,CAAY;AACRxB,QAAAA,KAAK,EAAE,iCADC;AAERyB,QAAAA,IAAI,EAAE;AAFE,OAAZ,EAGGC,IAHH,CAGQ,MAAMC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAHd;AAIH;AACJ,GAvCD;;AAyCA,QAAMC,kBAAkB,GAAG,OAAOrB,CAAP,EAAUhB,EAAV,KAAiB;AACxCgB,IAAAA,CAAC,CAACM,cAAF;;AACA,QAAI;AACA,UAAIgB,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAf;AACA,YAAMjF,QAAQ,CACTkF,IADC,GAEDC,0BAFC,CAE0BN,QAAQ,CAACO,KAFnC,EAE0C7B,CAAC,CAACC,MAAF,CAAS,CAAT,EAAYC,KAFtD,CAAN;AAGA3B,MAAAA,WAAW,CAAC;AAAED,QAAAA,QAAQ,EAAE,EAAZ;AAAgBE,QAAAA,KAAK,EAAE;AAAvB,OAAD,CAAX;AACA,YAAMrC,QAAQ,CAAC0C,IAAT,CAAc,gBAAd,EAAgCgC,MAAhC,GAAyC9B,EAAzC,CAA4C,SAA5C,EAAuDC,EAAvD,CAAN;AACA,YAAM7C,QAAQ,CAAC0C,IAAT,CAAc,OAAd,EAAuBgC,MAAvB,GAAgC9B,EAAhC,CAAmC,IAAnC,EAAyCC,EAAzC,CAAN;AACAY,MAAAA,sBAAsB;AACtB9C,MAAAA,MAAM,CAACiE,IAAP,CAAY;AACRxB,QAAAA,KAAK,EAAE,gCADC;AAERyB,QAAAA,IAAI,EAAE;AAFE,OAAZ,EAGGC,IAHH,CAGQ,MAAMC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAHd;AAIH,KAbD,CAaE,OAAO5C,KAAP,EAAc;AACZD,MAAAA,WAAW,CAAC;AAAED,QAAAA,QAAQ,EAAE,EAAZ;AAAgBE,QAAAA,KAAK,EAAE;AAAvB,OAAD,CAAX;AACAoB,MAAAA,sBAAsB;AACtB9C,MAAAA,MAAM,CAACiE,IAAP,CAAY;AACRxB,QAAAA,KAAK,EAAE,uBADC;AAERyB,QAAAA,IAAI,EAAE;AAFE,OAAZ;AAIH;AACJ,GAvBD;;AAyBA,MAAItE,QAAQ,CAACkE,MAAT,KAAoB,CAApB,IAAyBnC,aAAa,CAACmC,MAAd,KAAyB,CAAtD,EACI,oBAAO,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AAEJ,sBACI;AACI,IAAA,SAAS,EAAE7E,MAAM,CAAC+F,SADtB;AAEI,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE9E,UAAU,IAAIE,UAAd,GAA2B,WAA3B,GAAyC;AAAnD,KAFX,CAEwE;AAFxE;AAAA,4BAII;AAAS,MAAA,SAAS,EAAEpB,MAAM,CAACiG,cAA3B;AAAA,6BACI,QAAC,UAAD;AACI,QAAA,KAAK,EAAEvD,aADX;AAEI,QAAA,qBAAqB,EAAEW,qBAF3B;AAGI,QAAA,qBAAqB,EAAEI,qBAH3B;AAII,QAAA,sBAAsB,EAAEC,sBAJ5B;AAKI,QAAA,oBAAoB,EAAEC;AAL1B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJJ,eAaI,QAAC,UAAD;AACI,MAAA,IAAI,EAAEzC,UADV;AAEI,MAAA,YAAY,EAAEoD,kBAFlB;AAGI,MAAA,iBAAiB,EAAEN,uBAHvB;AAII,MAAA,gBAAgB,EAAEJ,sBAJtB;AAKI,MAAA,kBAAkB,EAAEQ,wBALxB;AAMI,MAAA,SAAS,EAAElC,SANf;AAOI,MAAA,WAAW,EAAEpB;AAPjB;AAAA;AAAA;AAAA;AAAA,YAbJ,eAsBI,QAAC,UAAD;AACI,MAAA,IAAI,EAAEM,UADV;AAEI,MAAA,UAAU,EAAEM,UAFhB;AAGI,MAAA,YAAY,EAAE4D,kBAHlB;AAII,MAAA,gBAAgB,EAAEzB,sBAJtB;AAKI,MAAA,QAAQ,EAAEtB;AALd;AAAA;AAAA;AAAA;AAAA,YAtBJ,eA6BI,QAAC,WAAD;AACI,MAAA,IAAI,EAAEjB,WADV;AAEI,MAAA,UAAU,EAAEU,UAFhB;AAGI,MAAA,gBAAgB,EAAE8B,uBAHtB;AAII,MAAA,QAAQ,EAAEvB;AAJd;AAAA;AAAA;AAAA;AAAA,YA7BJ,eAmCI,QAAC,SAAD;AACI,MAAA,IAAI,EAAEf,SADV;AAEI,MAAA,SAAS,EAAEY,SAFf;AAGI,MAAA,gBAAgB,EAAE2B;AAHtB;AAAA;AAAA;AAAA;AAAA,YAnCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2CH;;GA9PQtD,U;UACYd,W,EACGA,W,EAEHC,W;;;KAJZa,U;AAgQT,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPlans, getBenefits } from '../../../../actions/getter.action.js';\nimport { CircularProgress } from '@material-ui/core';\nimport 'firebase/auth';\nimport styles from './AdminPlans.module.css';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\n\n// Table\n\nimport PlansTable from './PlansTable.jsx';\n\n// Supa\n\nimport supabase from '../../../../supabase.config';\n\n// Pop ups\n\nimport ModifyPlan from './ModifyPlan.jsx';\nimport PlanDetails from './PlanDetails.jsx';\nimport DeletePlan from './DeletePlan.jsx';\nimport PlanState from './PlanState.jsx';\n\nfunction AdminPlans({ firebase }) {\n    const allPlans = useSelector((state) => state.plans.allPlans);\n    const allBenefits = useSelector((state) => state.plans.allBenefits);\n    const MySwal = withReactContent(Swal);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getPlans());\n        dispatch(getBenefits());\n        //eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        prueba();\n        //eslint-disable-next-line\n    }, [allPlans]);\n\n    const [openModify, setOpenModify] = useState(false);\n    const [openDelete, setOpenDelete] = useState(false);\n    const [openDetails, setOpenDetails] = useState(false);\n    const [openState, setOpenState] = useState(false);\n    const [deletePlan, setDeletePlan] = useState({\n        id_plan: '',\n        name: '',\n        price: '',\n        benefits: [],\n    });\n    const [planDetail, setPlanDetail] = useState({\n        id_plan: '',\n        name: '',\n        price: '',\n        benefits: [],\n    });\n    const [modalPlan, setModalPlan] = useState({\n        id_plan: '',\n        name: '',\n        price: '',\n        benefits: [],\n    });\n    const [planState, setPlanState] = useState({\n        id_plan: '',\n        active: false,\n    });\n\n    const [password, setPassword] = useState({ password: '', error: false });\n\n    const [plansForTable, setPlansForTable] = useState([]);\n\n    const prueba = async () => {\n        const plans = [];\n\n        for (const plan of allPlans) {\n            const { count } = await supabase\n                .from('partners')\n                .select('plan_id', { count: 'exact' })\n                .eq('plan_id', plan.id);\n            plans.push({\n                id: 'name',\n                id_plan: plan.id,\n                name: plan.name,\n                price: plan.price,\n                benefits: plan.benefits,\n                description: plan.description,\n                active: plan.active,\n                users: count,\n            });\n        }\n        setPlansForTable(plans);\n    };\n\n    // Modals open\n\n    const handleOpenModalModify = (plan) => {\n        setModalPlan({\n            id_plan: plan.id_plan,\n            name: plan.name,\n            price: plan.price,\n            benefits: plan.benefits.map((benefit) => benefit.title),\n        });\n        setOpenModify(true);\n    };\n\n    const handleOpenModalDelete = (plan) => {\n        setDeletePlan({\n            id_plan: plan.id_plan,\n            name: plan.name,\n            price: plan.price,\n            benefits: plan.benefits,\n            users: plan.users,\n        });\n        setOpenDelete(true);\n    };\n\n    const handleOpenModalDetails = (plan) => {\n        setPlanDetail({\n            id_plan: plan.id_plan,\n            name: plan.name,\n            price: plan.price,\n            benefits: plan.benefits,\n        });\n        setOpenDetails(true);\n    };\n\n    const handleOpenModalState = (plan) => {\n        setPlanState({\n            id_plan: plan.id_plan,\n            active: plan.active,\n        });\n        setOpenState(true);\n    };\n\n    // Modals close\n\n    const handleCloseModalModify = () => {\n        setOpenModify(false);\n    };\n\n    const handleCloseModalDelete = () => {\n        setPassword({ password: '', error: false });\n        setOpenDelete(false);\n    };\n\n    const handleCloseModalDetails = () => {\n        setOpenDetails(false);\n    };\n\n    const handleCloseModalState = () => {\n        setOpenState(false);\n    };\n\n    // Modify Modal Field Changes\n\n    const handleChangeModalModify = (e) => {\n        setModalPlan({ ...modalPlan, [e.target.name]: e.target.value });\n    };\n\n    const handleAutoCompleteModify = (arrayOfStringBenefits) => {\n        setModalPlan({ ...modalPlan, benefits: arrayOfStringBenefits });\n    };\n\n    // Submits\n\n    const handleSubmitModify = async (e) => {\n        e.preventDefault();\n        let flag = false;\n        let benefitsArray = [];\n        for (const benefit of modalPlan.benefits) {\n            benefitsArray.push({\n                plan_id: modalPlan.id_plan,\n                benefit_id: benefit.id,\n            });\n        }\n        await supabase\n            .from('plans')\n            .update({ name: e.target[0].value, price: e.target[1].value })\n            .eq('id', modalPlan.id_plan);\n\n        if (benefitsArray.length !== 0 && benefitsArray[0].benefit_id) {\n            await supabase\n                .from('plans_benefits')\n                .delete()\n                .eq('plan_id', modalPlan.id_plan);\n            await supabase.from('plans_benefits').insert(benefitsArray);\n        } else {\n            if (benefitsArray.length === 0) {\n                flag = true;\n            }\n        }\n\n        handleCloseModalModify();\n        if (flag) {\n            MySwal.fire({\n                title: 'El plan debe tener al menos 1 beneficio',\n                icon: 'error',\n            });\n        } else {\n            MySwal.fire({\n                title: 'Se modificó el plan con exito!.',\n                icon: 'success',\n            }).then(() => window.location.reload());\n        }\n    };\n\n    const handleSubmitDelete = async (e, id) => {\n        e.preventDefault();\n        try {\n            let userData = JSON.parse(localStorage.getItem('userdata'));\n            await firebase\n                .auth()\n                .signInWithEmailAndPassword(userData.email, e.target[0].value);\n            setPassword({ password: '', error: false });\n            await supabase.from('plans_benefits').delete().eq('plan_id', id);\n            await supabase.from('plans').delete().eq('id', id);\n            handleCloseModalDelete();\n            MySwal.fire({\n                title: 'Se elimino el plan con exito!.',\n                icon: 'success',\n            }).then(() => window.location.reload());\n        } catch (error) {\n            setPassword({ password: '', error: true });\n            handleCloseModalDelete();\n            MySwal.fire({\n                title: 'Contraseña Incorrecta',\n                icon: 'error',\n            });\n        }\n    };\n\n    if (allPlans.length === 0 || plansForTable.length === 0)\n        return <CircularProgress />;\n\n    return (\n        <div\n            className={styles.container}\n            style={{ filter: openModify || openDelete ? 'blur(4px)' : 'none' }} // PARA PONER EL FONDO BLURRY\n        >\n            <section className={styles.plansContainer}>\n                <PlansTable\n                    plans={plansForTable}\n                    handleOpenModalModify={handleOpenModalModify}\n                    handleOpenModalDelete={handleOpenModalDelete}\n                    handleOpenModalDetails={handleOpenModalDetails}\n                    handleOpenModalState={handleOpenModalState}\n                />\n            </section>\n            <ModifyPlan\n                open={openModify}\n                handleSubmit={handleSubmitModify}\n                handleChangeModal={handleChangeModalModify}\n                handleCloseModal={handleCloseModalModify}\n                handleAutoComplete={handleAutoCompleteModify}\n                modalPlan={modalPlan}\n                allBenefits={allBenefits}\n            />\n            <DeletePlan\n                open={openDelete}\n                deletePlan={deletePlan}\n                handleSubmit={handleSubmitDelete}\n                handleCloseModal={handleCloseModalDelete}\n                password={password}\n            />\n            <PlanDetails\n                open={openDetails}\n                planDetail={planDetail}\n                handleCloseModal={handleCloseModalDetails}\n                password={password}\n            />\n            <PlanState\n                open={openState}\n                planState={planState}\n                handleCloseModal={handleCloseModalState}\n            />\n        </div>\n    );\n}\n\nexport default AdminPlans;\n"]},"metadata":{},"sourceType":"module"}