{"ast":null,"code":"import supabase from '../../../supabase.config';\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc, props) {\n    this.fetchState = async () => {\n      let {\n        data\n      } = await supabase.from('states').select('*');\n      this.states.push(data);\n    };\n\n    this.fetchInstitutions = async () => {\n      let {\n        data\n      } = await supabase.from('institutions').select('*');\n      this.number.push(data);\n    };\n\n    this.fetchDNI = async () => {\n      let {\n        data\n      } = await supabase.from('partners').select('dni, name, birthdate, phone_number, plans(id, name, price)');\n      this.dni.push(data);\n    };\n\n    this.handlePlansList = () => {\n      const message = this.createChatBotMessage('👪 Aca podes encontrar toda la información que necesitas sobre planes:', {\n        widget: 'plansLinks'\n      });\n      this.updateChatbotState(message);\n    };\n\n    this.handleMyPlan = () => {\n      const message = this.createChatBotMessage('¿Cual es tu DNI?');\n      this.updateChatbotState(message);\n    };\n\n    this.auxiliar = dni => {};\n\n    this.handleDni = dni => {\n      let allDni = [];\n      let selected = [];\n      let index = 0;\n      let dniN = 0;\n\n      if (dni.length < 7) {\n        let message = this.createChatBotMessage('Tu DNI es demasiado corto');\n        this.updateChatbotState(message);\n      } else {\n        allDni = this.dni[0].map(d => d.dni);\n        selected = allDni.filter(d => {\n          //eslint-disable-next-line\n          return d == dni;\n        });\n\n        if (selected.length > 0) {\n          dniN = parseInt(dni);\n          index = allDni.indexOf(dniN);\n          let message = this.createChatBotMessage(`Hola ${this.dni[0][index].name}! Tu plan es: ${this.dni[0][index].plans.name} y el precio es: ${this.dni[0][index].plans.price}`);\n          this.ok.push(index);\n          this.updateChatbotState(message);\n        } else {\n          let message = this.createChatBotMessage('Tu plan no se encontro');\n          this.updateChatbotState(message);\n        }\n      }\n    };\n\n    this.handlePhoneNumber = num => {\n      let aux = 0;\n      aux = this.ok[1];\n\n      if (this.dni[0][aux].phone_number[this.dni[0][aux].phone_numberphone_number.length] === num[2] && this.dni[0][aux].phone_number[this.dni[0][aux].phone_numberphone_number.length - 1] === num[1] && this.dni[0][aux].phone_number[this.dni[0][aux].phone_numberphone_number.length] - 2 === num[0]) {\n        let message = this.createChatBotMessage(`Hola ${this.dni[0][aux].name}! Tu plan es: ${this.dni[0][aux].plans.name} y el precio es: ${this.dni[0].this.ok[1].plans.price}`);\n        this.updateChatbotState(message);\n      } else {\n        let message = 'tu plan no se encontro';\n        this.updateChatbotState(message);\n      }\n    };\n\n    this.handleFAQList = () => {\n      const message = this.createChatBotMessage('✔️Aca podes encontrar las preguntas mas frecuentes entre nuestros usuarios:', {\n        widget: 'FAQLinks'\n      });\n      this.updateChatbotState(message);\n    };\n\n    this.handleFormList = () => {\n      const message = this.createChatBotMessage(' 🧾Podes llenar este formulario para recibir mas información en tu correo electrónico:', {\n        widget: 'formLinks'\n      });\n      this.updateChatbotState(message);\n    };\n\n    this.handleEmergencyList = () => {\n      const message = this.createChatBotMessage(`☎️ El numero de emergencia para todo el pais es:  ${this.number[0].map(n => n.phone_number)}  `);\n      this.updateChatbotState(message);\n    };\n\n    this.handleStatesList = () => {\n      const message = this.createChatBotMessage(`📍 Las provincias en las que ofrecemos cobertura son: ${this.states[0].map(s => ` ${s.name}`)}`, {\n        widget: 'StatesLinks'\n      });\n      this.updateChatbotState(message);\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    this.states = [];\n    this.number = [];\n    this.dni = [];\n    this.ok = [];\n    this.fetchState();\n    this.fetchInstitutions();\n    this.fetchDNI();\n  }\n\n  thanks() {\n    const message = this.createChatBotMessage('👍¡De nada! Espero haberte ayudado. ¿Te gustaría saber algo mas?', {\n      widget: 'options'\n    });\n    this.updateChatbotState(message);\n  }\n\n  greet() {\n    const message = this.createChatBotMessage('¿Como te puedo ayudar? Podés elegir una opción o intentar escribir algo 😁', {\n      widget: 'options'\n    });\n    this.updateChatbotState(message);\n  }\n\n  sorry() {\n    const message = this.createChatBotMessage('😔 Perdón, no te entendí. Podes probar con otra palabra o elegir una de las opciones: ', {\n      widget: 'options'\n    });\n    this.updateChatbotState(message);\n  }\n\n  updateChatbotState(message) {\n    this.setState(prevState => ({ ...prevState,\n      messages: [...prevState.messages, message]\n    }));\n  }\n\n}\n\nexport default ActionProvider; //Si el DNI existe, hacer un find con ese dni, agarrar el indice y fijarse el plans de ese indice\n//selected no se llena conel filtrado","map":{"version":3,"sources":["/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/Chatbot/ActionProvider.jsx"],"names":["supabase","ActionProvider","constructor","createChatBotMessage","setStateFunc","props","fetchState","data","from","select","states","push","fetchInstitutions","number","fetchDNI","dni","handlePlansList","message","widget","updateChatbotState","handleMyPlan","auxiliar","handleDni","allDni","selected","index","dniN","length","map","d","filter","parseInt","indexOf","name","plans","price","ok","handlePhoneNumber","num","aux","phone_number","phone_numberphone_number","this","handleFAQList","handleFormList","handleEmergencyList","n","handleStatesList","s","setState","thanks","greet","sorry","prevState","messages"],"mappings":"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","sourcesContent":["import supabase from '../../../supabase.config';\nclass ActionProvider {\n    constructor(createChatBotMessage, setStateFunc, props) {\n        this.createChatBotMessage = createChatBotMessage;\n        this.setState = setStateFunc;\n        this.states = [];\n        this.number = [];\n        this.dni = [];\n        this.ok = [];\n        this.fetchState();\n        this.fetchInstitutions();\n        this.fetchDNI();\n    }\n    fetchState = async () => {\n        let { data } = await supabase.from('states').select('*');\n        this.states.push(data);\n    };\n    fetchInstitutions = async () => {\n        let { data } = await supabase.from('institutions').select('*');\n        this.number.push(data);\n    };\n\n    fetchDNI = async () => {\n        let { data } = await supabase\n            .from('partners')\n            .select(\n                'dni, name, birthdate, phone_number, plans(id, name, price)'\n            );\n        this.dni.push(data);\n    };\n\n    thanks() {\n        const message = this.createChatBotMessage(\n            '👍¡De nada! Espero haberte ayudado. ¿Te gustaría saber algo mas?',\n            {\n                widget: 'options',\n            }\n        );\n        this.updateChatbotState(message);\n    }\n    greet() {\n        const message = this.createChatBotMessage(\n            '¿Como te puedo ayudar? Podés elegir una opción o intentar escribir algo 😁',\n            {\n                widget: 'options',\n            }\n        );\n        this.updateChatbotState(message);\n    }\n    sorry() {\n        const message = this.createChatBotMessage(\n            '😔 Perdón, no te entendí. Podes probar con otra palabra o elegir una de las opciones: ',\n            {\n                widget: 'options',\n            }\n        );\n        this.updateChatbotState(message);\n    }\n    handlePlansList = () => {\n        const message = this.createChatBotMessage(\n            '👪 Aca podes encontrar toda la información que necesitas sobre planes:',\n            {\n                widget: 'plansLinks',\n            }\n        );\n\n        this.updateChatbotState(message);\n    };\n    handleMyPlan = () => {\n        const message = this.createChatBotMessage('¿Cual es tu DNI?');\n\n        this.updateChatbotState(message);\n    };\n\n    auxiliar = (dni) => {};\n\n    handleDni = (dni) => {\n        let allDni = [];\n        let selected = [];\n        let index = 0;\n        let dniN = 0;\n        if (dni.length < 7) {\n            let message = this.createChatBotMessage(\n                'Tu DNI es demasiado corto'\n            );\n            this.updateChatbotState(message);\n        } else {\n            allDni = this.dni[0].map((d) => d.dni);\n            selected = allDni.filter((d) => {\n                //eslint-disable-next-line\n                return d == dni;\n            });\n            if (selected.length > 0) {\n                dniN = parseInt(dni);\n                index = allDni.indexOf(dniN);\n                let message = this.createChatBotMessage(\n                    `Hola ${this.dni[0][index].name}! Tu plan es: ${this.dni[0][index].plans.name} y el precio es: ${this.dni[0][index].plans.price}`\n                );\n                this.ok.push(index);\n                this.updateChatbotState(message);\n            } else {\n                let message = this.createChatBotMessage(\n                    'Tu plan no se encontro'\n                );\n                this.updateChatbotState(message);\n            }\n        }\n    };\n\n    handlePhoneNumber = (num) => {\n        let aux = 0;\n        aux = this.ok[1];\n        if (\n            this.dni[0][aux].phone_number[\n                this.dni[0][aux].phone_numberphone_number.length\n            ] === num[2] &&\n            this.dni[0][aux].phone_number[\n                this.dni[0][aux].phone_numberphone_number.length - 1\n            ] === num[1] &&\n            this.dni[0][aux].phone_number[\n                this.dni[0][aux].phone_numberphone_number.length\n            ] -\n                2 ===\n                num[0]\n        ) {\n            let message = this.createChatBotMessage(\n                `Hola ${this.dni[0][aux].name}! Tu plan es: ${this.dni[0][aux].plans.name} y el precio es: ${this.dni[0].this.ok[1].plans.price}`\n            );\n            this.updateChatbotState(message);\n        } else {\n            let message = 'tu plan no se encontro';\n            this.updateChatbotState(message);\n        }\n    };\n\n    handleFAQList = () => {\n        const message = this.createChatBotMessage(\n            '✔️Aca podes encontrar las preguntas mas frecuentes entre nuestros usuarios:',\n            {\n                widget: 'FAQLinks',\n            }\n        );\n\n        this.updateChatbotState(message);\n    };\n    handleFormList = () => {\n        const message = this.createChatBotMessage(\n            ' 🧾Podes llenar este formulario para recibir mas información en tu correo electrónico:',\n            {\n                widget: 'formLinks',\n            }\n        );\n\n        this.updateChatbotState(message);\n    };\n    handleEmergencyList = () => {\n        const message = this.createChatBotMessage(\n            `☎️ El numero de emergencia para todo el pais es:  ${this.number[0].map(\n                (n) => n.phone_number\n            )}  `\n        );\n\n        this.updateChatbotState(message);\n    };\n    handleStatesList = () => {\n        const message = this.createChatBotMessage(\n            `📍 Las provincias en las que ofrecemos cobertura son: ${this.states[0].map(\n                (s) => ` ${s.name}`\n            )}`,\n            {\n                widget: 'StatesLinks',\n            }\n        );\n\n        this.updateChatbotState(message);\n    };\n\n    updateChatbotState(message) {\n        this.setState((prevState) => ({\n            ...prevState,\n            messages: [...prevState.messages, message],\n        }));\n    }\n}\n\nexport default ActionProvider;\n//Si el DNI existe, hacer un find con ese dni, agarrar el indice y fijarse el plans de ese indice\n\n//selected no se llena conel filtrado\n"]},"metadata":{},"sourceType":"module"}