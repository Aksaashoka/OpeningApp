{"ast":null,"code":"const validator = (input, tipo) => {\n  const errors = {};\n  let size = Object.keys(input).length;\n  let contador = 0;\n\n  if (tipo === 'number') {\n    for (const key in input) {\n      if (input[key] === 'hide') ++contador;else if (!/^\\d*$/.test(input[key]) || !input[key]) {\n        //comprabar que solo haya numeros sin otros caracter\n        errors[key] = 'Datos invalidos,solo se admiten numeros sin puntos ni comas.';\n      } else ++contador;\n    }\n\n    if (contador === size) errors.textNumComplete = true;else errors.textNumComplete = false;\n  }\n\n  if (tipo === 'text') {\n    // let size = Object.keys(input).length;\n    // let contador = 0;\n    for (const key in input) {\n      //comprobar si es un numero\n      if (input[key] === 'hide') ++contador;else if (!/^[A-Za-z\\s]+$/g.test(input[key])) {\n        //es un string, valido que sean solo letras y espacios\n        errors[key] = 'Datos invalidos.';\n      } else ++contador;\n    }\n\n    if (contador === size) errors.textComplete = true;else errors.textComplete = false;\n  }\n\n  if (tipo === 'mix') {\n    for (const key in input) {\n      // console.log(`aca esta el mix ${key} y lo otro es ${typeof input[key]}`)\n      if (input[key] === 'hide') ++contador;else if (!/^[A-Za-z0-9\\s]+$/g.test(input[key])) {\n        errors[key] = 'Datos invalidos.';\n      } else ++contador;\n    }\n\n    if (contador === size) errors.textMixComplete = true;else errors.textMixComplete = false;\n  }\n\n  if (tipo === 'email') {\n    for (const key in input) {\n      if (input[key] === 'hide') ++contador;else if (!/[a-zA-Z0-9]+[.]?([a-zA-Z0-9]+)?[@][a-z]{3,9}[.][a-z]{2,5}/g.test(input[key])) {\n        errors[key] = 'Email invalidos.';\n      } else ++contador;\n    }\n\n    if (contador === size) errors.emailComplete = true;else errors.emailComplete = false;\n  }\n\n  if (tipo === 'radio') {\n    for (const key in input) {\n      if (input[key] === 'hide') ++contador;else if (!input[key]) errors[key] = 'Debe seleccionar una opci贸n';else ++contador;\n    }\n\n    if (contador === size) errors.radComplete = true;else errors.radComplete = false;\n  }\n\n  if (tipo === 'date') {\n    for (const key in input) {\n      if (!input[key]) errors[key] = 'Debe seleccionar una opci贸n';else if (input[key] !== 'hide') {\n        //es una fecha\n        let aux = new Date(input[key]);\n\n        if (Date.now() < Date.parse(aux)) {\n          errors[key] = 'Debe seleccionar una fecha anterior a la actual';\n        } else ++contador;\n      } else ++contador;\n    }\n\n    if (contador === size) errors.dateComplete = true;else errors.dateComplete = false;\n  }\n\n  return errors;\n};\n\nexport default validator;","map":{"version":3,"sources":["/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/RegStepForm/Validator.js"],"names":["validator","input","tipo","errors","size","Object","keys","length","contador","key","test","textNumComplete","textComplete","textMixComplete","emailComplete","radComplete","aux","Date","now","parse","dateComplete"],"mappings":"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","sourcesContent":["const validator = (input, tipo) => {\n    const errors = {};\n    let size = Object.keys(input).length;\n    let contador = 0;\n\n    if (tipo === 'number') {\n        for (const key in input) {\n            if (input[key] === 'hide') ++contador;\n            else if (!/^\\d*$/.test(input[key]) || !input[key]) {\n                //comprabar que solo haya numeros sin otros caracter\n                errors[key] =\n                    'Datos invalidos,solo se admiten numeros sin puntos ni comas.';\n            } else ++contador;\n        }\n        if (contador === size) errors.textNumComplete = true;\n        else errors.textNumComplete = false;\n    }\n\n    if (tipo === 'text') {\n        // let size = Object.keys(input).length;\n        // let contador = 0;\n        for (const key in input) {\n            //comprobar si es un numero\n            if (input[key] === 'hide') ++contador;\n            else if (!/^[A-Za-z\\s]+$/g.test(input[key])) {\n                //es un string, valido que sean solo letras y espacios\n                errors[key] = 'Datos invalidos.';\n            } else ++contador;\n        }\n        if (contador === size) errors.textComplete = true;\n        else errors.textComplete = false;\n    }\n\n    if (tipo === 'mix') {\n        for (const key in input) {\n            // console.log(`aca esta el mix ${key} y lo otro es ${typeof input[key]}`)\n            if (input[key] === 'hide') ++contador;\n            else if (!/^[A-Za-z0-9\\s]+$/g.test(input[key])) {\n                errors[key] = 'Datos invalidos.';\n            } else ++contador;\n        }\n        if (contador === size) errors.textMixComplete = true;\n        else errors.textMixComplete = false;\n    }\n    if (tipo === 'email') {\n        for (const key in input) {\n            if (input[key] === 'hide') ++contador;\n            else if (\n                !/[a-zA-Z0-9]+[.]?([a-zA-Z0-9]+)?[@][a-z]{3,9}[.][a-z]{2,5}/g.test(\n                    input[key]\n                )\n            ) {\n                errors[key] = 'Email invalidos.';\n            } else ++contador;\n        }\n        if (contador === size) errors.emailComplete = true;\n        else errors.emailComplete = false;\n    }\n    if (tipo === 'radio') {\n        for (const key in input) {\n            if (input[key] === 'hide') ++contador;\n            else if (!input[key]) errors[key] = 'Debe seleccionar una opci贸n';\n            else ++contador;\n        }\n        if (contador === size) errors.radComplete = true;\n        else errors.radComplete = false;\n    }\n\n    if (tipo === 'date') {\n        for (const key in input) {\n            if (!input[key]) errors[key] = 'Debe seleccionar una opci贸n';\n            else if (input[key] !== 'hide') {\n                //es una fecha\n                let aux = new Date(input[key]);\n                if (Date.now() < Date.parse(aux)) {\n                    errors[key] =\n                        'Debe seleccionar una fecha anterior a la actual';\n                } else ++contador;\n            } else ++contador;\n        }\n        if (contador === size) errors.dateComplete = true;\n        else errors.dateComplete = false;\n    }\n    return errors;\n};\nexport default validator;\n"]},"metadata":{},"sourceType":"module"}