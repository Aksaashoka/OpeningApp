{"ast":null,"code":"var _jsxFileName = \"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/NewBenef/NewBenef.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport supabase from '../../../../supabase.config';\nimport { makeStyles, lighten } from '@material-ui/core/styles';\nimport { TextField, Button } from '@material-ui/core';\nimport './NewBenef.css';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  nbcontainer: {\n    paddingTop: 25,\n    paddingLeft: 25,\n    backgroundColor: '#fafafa'\n  },\n  root: {\n    width: '500px',\n    padding: 0,\n    alignItems: 'center'\n  },\n  benefT: {\n    width: '100%',\n    marginBottom: 15\n  },\n  detail: {\n    width: '500px',\n    marginBottom: 15,\n    backgroundColor: '#ffffff'\n  },\n  category: {\n    width: '300px',\n    marginBottom: 15,\n    backgroundColor: '#ffffff'\n  },\n  activo: {\n    color: '#676161de'\n  },\n  saveButton: {\n    color: '#fafafa',\n    padding: theme.spacing(0.5),\n    border: '3px solid #2c7f7b',\n    backgroundColor: '#2c7f7b',\n    fontWeight: 'bold',\n    fontSize: '15px',\n    '&:hover': {\n      backgroundColor: lighten('#fafafa', 0.2),\n      color: '#2c7f7b',\n      padding: theme.spacing(0.5)\n    }\n  }\n}));\nexport default function NewBenef() {\n  _s();\n\n  const classes = useStyles(); // // Estado donde voy a guardar los beneficios traidos desde la base\n  // // de datos para poner en el selector.\n  // let [categories, setCategories] = useState(null);\n  // // Función que se trae las categorías de la base de datos\n  // // y los cuarda en el estado local 'benefSupa'.\n  // async function getCategories() {\n  //   try{\n  //   let { data: categs } = await supabase.from('categories').select('*');\n  //   console.log(categs)\n  //   setCategories(categs);\n  //   } catch (error){\n  //     console.log(error)\n  //   }\n  //   return;\n  // }\n  // // Carga las categorías a usar en el selector\n  // useEffect(() => {\n  //   getCategories();\n  // }, []);\n  // // Carga las categorías a usar en el selector\n  // useEffect(() => {\n  //   if (categories) {\n  //     console.log(categories)\n  //   }\n  // }, [categories]);\n\n  const [state, setState] = React.useState({\n    title: null,\n    description: '' // category: null,\n\n  }); // Estado de errores para poder guardar el beneficio\n\n  let [error, setError] = useState({\n    title: '' // title: 'No puede quedar incompleto o en blanco.',\n    // description: 'No puede quedar incompleto o en blanco.',\n    // category: 'Debe pertenecer al menos a una categoría.',\n\n  });\n  useEffect(() => {// setError({\n    //   title: 'No puede quedar incompleto o en blanco.',\n    //   // description: 'No puede quedar incompleto o en blanco.',\n    //   // category: 'Debe pertenecer al menos a una categoría.',\n    // });\n  }, []);\n  useEffect(() => {// console.log('state', state);\n  }, [error, state]); // // Selección de la categoría\n  // let handleselect = (event, value) => {\n  //   setState({ ...state, benefit: value });\n  // }\n  // Cambios en los inputs\n\n  let handlechange = event => {\n    let item = event.target.name;\n\n    switch (item) {\n      case 'title':\n        // Que no esté vacío ni sean solo espacios\n        let titlereg = /[0-9a-zA-ZÀ-ÿ\\u00f1\\u00d1.]+[ ]?[0-9a-z A-ZÀ-ÿ\\u00f1\\u00d1][:punct:]*$/;\n        setError(error => ({ ...error,\n          title: titlereg.test(event.target.value) ? '' : 'No puede quedar incompleto o en blanco.'\n        }));\n        setState({ ...state,\n          title: event.target.value\n        });\n        break;\n\n      case 'description':\n        // let descreg =\n        //   /[0-9a-zA-ZÀ-ÿ\\u00f1\\u00d1\\.]+[ ]?[0-9a-z A-ZÀ-ÿ\\u00f1\\u00d1][:punct:]*$/;\n        // setError((error) => ({\n        //   ...error,\n        //   description: descreg.test(event.target.value)\n        //     ? ''\n        //     : 'No puede quedar incompleto o en blanco.',\n        // }));\n        setState({ ...state,\n          description: event.target.value\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {// console.log('state', state);\n  }, [error, state]); // Función que verifica que no haya errores en los inputs\n  // para habilitar el botón de guardar el plan.\n\n  let validate = modInfo => {\n    return Object.values(error).every(x => x === ''); //si no tiene ningún mensaje de error devuelve true\n  };\n\n  async function handlesubmit(e) {\n    e.preventDefault(); // Agrega el nuevo beneficio en la tabla benefits.\n\n    async function addNewBenef(state) {\n      await supabase.from('benefits').insert([{\n        title: state.title,\n        description: state.description // category_id: state.category.id\n\n      }]);\n    }\n\n    await addNewBenef(state);\n    await Swal.fire({\n      title: 'Exito!',\n      text: 'Sus datos fueron guardados',\n      icon: 'success',\n      confirmButtonText: 'OK'\n    }); // Luego limpia\n\n    setState({\n      title: '',\n      description: '',\n      category: null\n    });\n    setError({// title: 'No puede quedar incompleto o en blanco.',\n      // description: 'No puede quedar incompleto o en blanco.',\n      // category: 'Debe pertenecer al menos a una categoría.',\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.nbcontainer,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.root,\n      noValidate: true,\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputsCont\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          id: \"title\",\n          name: \"title\",\n          className: classes.benefT,\n          label: \"T\\xEDtulo del beneficio\",\n          value: state.title,\n          onChange: handlechange,\n          error: error.title,\n          helperText: error.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"detalleInput\",\n          name: \"description\",\n          className: classes.detail,\n          label: \"Descripci\\xF3n\",\n          variant: \"outlined\",\n          value: state.description,\n          onChange: handlechange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        width: \"100%\",\n        align: \"right\",\n        children: !!state.title && /*#__PURE__*/_jsxDEV(Button, {\n          id: \"savebtn\",\n          disabled: !validate(),\n          variant: \"contained\",\n          className: classes.saveButton,\n          onClick: handlesubmit,\n          children: \"Guardar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NewBenef, \"9P3xeqWBxHgA4Lh3DAlwKefOFYE=\", false, function () {\n  return [useStyles];\n});\n\n_c = NewBenef;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewBenef\");","map":{"version":3,"sources":["/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/NewBenef/NewBenef.jsx"],"names":["React","useState","useEffect","supabase","makeStyles","lighten","TextField","Button","Swal","useStyles","theme","nbcontainer","paddingTop","paddingLeft","backgroundColor","root","width","padding","alignItems","benefT","marginBottom","detail","category","activo","color","saveButton","spacing","border","fontWeight","fontSize","NewBenef","classes","state","setState","title","description","error","setError","handlechange","event","item","target","name","titlereg","test","value","validate","modInfo","Object","values","every","x","handlesubmit","e","preventDefault","addNewBenef","from","insert","fire","text","icon","confirmButtonText"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport supabase from '../../../../supabase.config';\nimport { makeStyles, lighten } from '@material-ui/core/styles';\nimport { TextField, Button } from '@material-ui/core';\nimport './NewBenef.css';\nimport Swal from 'sweetalert2';\n\nconst useStyles = makeStyles((theme) => ({\n    nbcontainer: {\n        paddingTop: 25,\n        paddingLeft: 25,\n        backgroundColor: '#fafafa',\n    },\n    root: {\n        width: '500px',\n        padding: 0,\n        alignItems: 'center',\n    },\n    benefT: {\n        width: '100%',\n        marginBottom: 15,\n    },\n    detail: {\n        width: '500px',\n        marginBottom: 15,\n        backgroundColor: '#ffffff',\n    },\n    category: {\n        width: '300px',\n        marginBottom: 15,\n        backgroundColor: '#ffffff',\n    },\n    activo: {\n        color: '#676161de',\n    },\n    saveButton: {\n        color: '#fafafa',\n        padding: theme.spacing(0.5),\n        border: '3px solid #2c7f7b',\n        backgroundColor: '#2c7f7b',\n        fontWeight: 'bold',\n        fontSize: '15px',\n        '&:hover': {\n            backgroundColor: lighten('#fafafa', 0.2),\n            color: '#2c7f7b',\n            padding: theme.spacing(0.5),\n        },\n    },\n}));\n\nexport default function NewBenef() {\n    const classes = useStyles();\n\n    // // Estado donde voy a guardar los beneficios traidos desde la base\n    // // de datos para poner en el selector.\n    // let [categories, setCategories] = useState(null);\n\n    // // Función que se trae las categorías de la base de datos\n    // // y los cuarda en el estado local 'benefSupa'.\n    // async function getCategories() {\n    //   try{\n    //   let { data: categs } = await supabase.from('categories').select('*');\n    //   console.log(categs)\n    //   setCategories(categs);\n    //   } catch (error){\n    //     console.log(error)\n    //   }\n    //   return;\n    // }\n\n    // // Carga las categorías a usar en el selector\n    // useEffect(() => {\n    //   getCategories();\n    // }, []);\n\n    // // Carga las categorías a usar en el selector\n    // useEffect(() => {\n    //   if (categories) {\n    //     console.log(categories)\n    //   }\n    // }, [categories]);\n\n    const [state, setState] = React.useState({\n        title: null,\n        description: '',\n        // category: null,\n    });\n\n    // Estado de errores para poder guardar el beneficio\n    let [error, setError] = useState({\n        title: '',\n        // title: 'No puede quedar incompleto o en blanco.',\n        // description: 'No puede quedar incompleto o en blanco.',\n        // category: 'Debe pertenecer al menos a una categoría.',\n    });\n\n    useEffect(() => {\n        // setError({\n        //   title: 'No puede quedar incompleto o en blanco.',\n        //   // description: 'No puede quedar incompleto o en blanco.',\n        //   // category: 'Debe pertenecer al menos a una categoría.',\n        // });\n    }, []);\n\n    useEffect(() => {\n        // console.log('state', state);\n    }, [error, state]);\n\n    // // Selección de la categoría\n    // let handleselect = (event, value) => {\n    //   setState({ ...state, benefit: value });\n    // }\n\n    // Cambios en los inputs\n    let handlechange = (event) => {\n        let item = event.target.name;\n        switch (item) {\n            case 'title': // Que no esté vacío ni sean solo espacios\n                let titlereg =\n                    /[0-9a-zA-ZÀ-ÿ\\u00f1\\u00d1.]+[ ]?[0-9a-z A-ZÀ-ÿ\\u00f1\\u00d1][:punct:]*$/;\n\n                setError((error) => ({\n                    ...error,\n                    title: titlereg.test(event.target.value)\n                        ? ''\n                        : 'No puede quedar incompleto o en blanco.',\n                }));\n                setState({ ...state, title: event.target.value });\n                break;\n\n            case 'description':\n                // let descreg =\n                //   /[0-9a-zA-ZÀ-ÿ\\u00f1\\u00d1\\.]+[ ]?[0-9a-z A-ZÀ-ÿ\\u00f1\\u00d1][:punct:]*$/;\n\n                // setError((error) => ({\n                //   ...error,\n                //   description: descreg.test(event.target.value)\n                //     ? ''\n                //     : 'No puede quedar incompleto o en blanco.',\n                // }));\n                setState({ ...state, description: event.target.value });\n                break;\n\n            default:\n                break;\n        }\n    };\n\n    useEffect(() => {\n        // console.log('state', state);\n    }, [error, state]);\n\n    // Función que verifica que no haya errores en los inputs\n    // para habilitar el botón de guardar el plan.\n    let validate = (modInfo) => {\n        return Object.values(error).every((x) => x === '');\n        //si no tiene ningún mensaje de error devuelve true\n    };\n\n    async function handlesubmit(e) {\n        e.preventDefault();\n\n        // Agrega el nuevo beneficio en la tabla benefits.\n        async function addNewBenef(state) {\n            await supabase.from('benefits').insert([\n                {\n                    title: state.title,\n                    description: state.description,\n                    // category_id: state.category.id\n                },\n            ]);\n        }\n        await addNewBenef(state);\n\n        await Swal.fire({\n            title: 'Exito!',\n            text: 'Sus datos fueron guardados',\n            icon: 'success',\n            confirmButtonText: 'OK',\n        });\n\n        // Luego limpia\n        setState({ title: '', description: '', category: null });\n        setError({\n            // title: 'No puede quedar incompleto o en blanco.',\n            // description: 'No puede quedar incompleto o en blanco.',\n            // category: 'Debe pertenecer al menos a una categoría.',\n        });\n    }\n\n    return (\n        <div className={classes.nbcontainer}>\n            <form className={classes.root} noValidate autoComplete='off'>\n                <div className='inputsCont'>\n                    <TextField\n                        id='title'\n                        name='title'\n                        className={classes.benefT}\n                        label='Título del beneficio'\n                        value={state.title}\n                        onChange={handlechange}\n                        error={error.title}\n                        helperText={error.title}\n                    />\n                    <TextField\n                        id='detalleInput'\n                        name='description'\n                        className={classes.detail}\n                        label='Descripción'\n                        variant='outlined'\n                        value={state.description}\n                        onChange={handlechange}\n                    />\n\n                    {/* {categories && (\n            <Autocomplete\n              id='categoryInputa'\n              name='category'\n              className={classes.category}\n              //  Acá va el arreglo a mostrar en el selector\n              options={categories}\n              autoHighlight\n              label='categorya'\n              value={state.benefit}\n              variant='outlined'\n              onChange={handleselect}\n              getOptionLabel={option => option.description}\n              renderOption={option => option.description}\n              renderInput={params => (\n                categories && (\n                  <TextField\n                    id='categoryInput'\n                    name='category'\n                    {...params}\n                    label='Categoría'\n                    variant='outlined'\n                    error={error.category}\n                    helperText={error.category}\n                    inputProps={{\n                      ...params.inputProps,\n                      autoComplete:\n                        'new-password', // disable autocomplete and autofill\n                    }}\n                  />\n                )\n              )}\n            />\n          )} */}\n                </div>\n                <div width='100%' align='right'>\n                    {!!state.title && <Button\n                        id='savebtn'\n                        disabled={!validate()}\n                        variant='contained'\n                        className={classes.saveButton}\n                        onClick={handlesubmit}\n                    >\n                        Guardar\n                    </Button>}\n                </div>\n            </form>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}