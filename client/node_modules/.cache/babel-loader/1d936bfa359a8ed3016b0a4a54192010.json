{"ast":null,"code":"var _jsxFileName = \"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Speciality/FormSpecialities.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CircularProgress } from '@material-ui/core';\nimport TableSpecialities from './TableSpecialities.jsx';\nimport { getMedicSpecialities, addSpeciality } from '../../../actions/specialities.actions';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormSpecialities = () => {\n  _s();\n\n  //---STATES\n  const [rows, setRows] = useState([]);\n  const medic_specialities = useSelector(state => state.specialities.medic_specialities);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getMedicSpecialities());\n    setRows(medic_specialities); //eslint-disable-next-line\n  }, [medic_specialities]);\n\n  const handlerButtonClick = inputValue => {\n    //verificar que sean solo letras\n    if (!/^[A-Za-z\\s]+$/g.test(inputValue)) {\n      Swal.fire({\n        title: `La especialidad solo pueden ser letras.`,\n        icon: 'error'\n      });\n    } else {\n      //verificar si existe\n      let buscado = medic_specialities.find(item => item.name === inputValue);\n\n      if (!buscado) {\n        dispatch(addSpeciality(inputValue));\n        dispatch(getMedicSpecialities());\n        Swal.fire({\n          title: `La especialidad ${inputValue} se agrego con exito.`,\n          icon: 'success',\n          timer: 2000\n        });\n      } else Swal.fire({\n        title: `La especialidad ${inputValue.toUpperCase()} ya existe.`,\n        icon: 'info'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: rows.length === 0 ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(TableSpecialities, {\n      rows: rows,\n      handlerButtonClick: handlerButtonClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormSpecialities, \"6Kr1cAf+wUwCrCicozzKxIzH4WI=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = FormSpecialities;\nexport default FormSpecialities;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormSpecialities\");","map":{"version":3,"sources":["/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/Speciality/FormSpecialities.jsx"],"names":["React","useState","useEffect","useSelector","useDispatch","CircularProgress","TableSpecialities","getMedicSpecialities","addSpeciality","Swal","FormSpecialities","rows","setRows","medic_specialities","state","specialities","dispatch","handlerButtonClick","inputValue","test","fire","title","icon","buscado","find","item","name","timer","toUpperCase","length"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;AACA,SACIC,oBADJ,EAEIC,aAFJ,QAGO,uCAHP;AAIA,OAAOC,IAAP,MAAiB,aAAjB;;;AAIA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC3B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMY,kBAAkB,GAAGV,WAAW,CACjCW,KAAD,IAAWA,KAAK,CAACC,YAAN,CAAmBF,kBADI,CAAtC;AAGA,QAAMG,QAAQ,GAAGZ,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,QAAQ,CAACT,oBAAoB,EAArB,CAAR;AACAK,IAAAA,OAAO,CAACC,kBAAD,CAAP,CAFY,CAGZ;AACH,GAJQ,EAIN,CAACA,kBAAD,CAJM,CAAT;;AAMA,QAAMI,kBAAkB,GAAIC,UAAD,IAAgB;AACvC;AACA,QAAI,CAAC,iBAAiBC,IAAjB,CAAsBD,UAAtB,CAAL,EAAuC;AACnCT,MAAAA,IAAI,CAACW,IAAL,CAAU;AACNC,QAAAA,KAAK,EAAG,yCADF;AAENC,QAAAA,IAAI,EAAE;AAFA,OAAV;AAIH,KALD,MAKO;AACP;AACA,UAAIC,OAAO,GAAGV,kBAAkB,CAACW,IAAnB,CACTC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAcR,UADd,CAAd;;AAGA,UAAI,CAACK,OAAL,EAAc;AACVP,QAAAA,QAAQ,CAACR,aAAa,CAACU,UAAD,CAAd,CAAR;AACAF,QAAAA,QAAQ,CAACT,oBAAoB,EAArB,CAAR;AACAE,QAAAA,IAAI,CAACW,IAAL,CAAU;AACNC,UAAAA,KAAK,EAAG,mBAAkBH,UAAW,uBAD/B;AAENI,UAAAA,IAAI,EAAE,SAFA;AAGNK,UAAAA,KAAK,EAAE;AAHD,SAAV;AAKH,OARD,MASIlB,IAAI,CAACW,IAAL,CAAU;AACNC,QAAAA,KAAK,EAAG,mBAAkBH,UAAU,CAACU,WAAX,EAAyB,aAD7C;AAENN,QAAAA,IAAI,EAAE;AAFA,OAAV;AAIH;AAEJ,GA3BD;;AA8BA,sBACI;AAAA,cACKX,IAAI,CAACkB,MAAL,KAAgB,CAAhB,gBACG,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,YADH,gBAIG,QAAC,iBAAD;AAAmB,MAAA,IAAI,EAAElB,IAAzB;AAA+B,MAAA,kBAAkB,EAAEM;AAAnD;AAAA;AAAA;AAAA;AAAA;AALR;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAtDD;;GAAMP,gB;UAGyBP,W,EAGVC,W;;;KANfM,gB;AAwDN,eAAeA,gBAAf","sourcesContent":["import { React, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CircularProgress } from '@material-ui/core';\nimport TableSpecialities from './TableSpecialities.jsx';\nimport {\n    getMedicSpecialities,\n    addSpeciality,\n} from '../../../actions/specialities.actions';\nimport Swal from 'sweetalert2';\n\n\n\nconst FormSpecialities = () => {\n    //---STATES\n    const [rows, setRows] = useState([]);\n    const medic_specialities = useSelector(\n        (state) => state.specialities.medic_specialities\n    );\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getMedicSpecialities());\n        setRows(medic_specialities);\n        //eslint-disable-next-line\n    }, [medic_specialities]);\n\n    const handlerButtonClick = (inputValue) => {\n        //verificar que sean solo letras\n        if (!/^[A-Za-z\\s]+$/g.test(inputValue)){\n            Swal.fire({\n                title: `La especialidad solo pueden ser letras.`,\n                icon: 'error',\n            });\n        } else {\n        //verificar si existe\n        let buscado = medic_specialities.find(\n            (item) => item.name === inputValue\n        );\n        if (!buscado) {\n            dispatch(addSpeciality(inputValue));\n            dispatch(getMedicSpecialities());\n            Swal.fire({\n                title: `La especialidad ${inputValue} se agrego con exito.`,\n                icon: 'success',\n                timer: 2000,\n            })\n        } else\n            Swal.fire({\n                title: `La especialidad ${inputValue.toUpperCase()} ya existe.`,\n                icon: 'info',\n            });\n        }\n        \n    };\n\n\n    return (\n        <div>\n            {rows.length === 0 ? (\n                <CircularProgress/>\n            ) : (\n\n                <TableSpecialities rows={rows} handlerButtonClick={handlerButtonClick} />\n            )}\n        </div>\n    );\n};\n\nexport default FormSpecialities;\n"]},"metadata":{},"sourceType":"module"}