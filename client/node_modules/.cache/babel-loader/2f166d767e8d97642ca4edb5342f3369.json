{"ast":null,"code":"var _jsxFileName = \"/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/ComparativaP/AcccessibleTable.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Checkbox } from '@material-ui/core';\nimport supabase from '../../../supabase.config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({});\nexport default function AcccessibleTable({\n  plans\n}) {\n  _s();\n\n  const classes = useStyles();\n  let [compBenef, setCompBenef] = useState(null); // Guarda en el arreglo planNames sólo el número de plan\n\n  let planNames = plans.map(plan => plan.name.slice(7).trim());\n  let basicplan = planNames[0]; // Función que se trae todos los beneficios de la base\n  // de datos que no están en el plan básico.\n  // async function getBenefToCompare(idbasico) {\n\n  async function getBenefToCompare() {\n    // Se trae todos los beneficios\n    const {\n      data: benefs\n    } = await supabase.from('benefits').select('id, title, plans(id,name)'); // console.log(benefs);\n    // Se queda sólo con la información a utilizar\n\n    let arrbnfs = benefs.map(b => {\n      let arrplans = b.plans.map(plan => plan.name.slice(7).trim()); // ... y algo más\n\n      return {\n        title: b.title,\n        plans: arrplans,\n        weight: arrplans.length\n      };\n    }); // Quita los beneficios que ya están en el plan básico\n\n    let showbnfs = arrbnfs.filter(benef => !benef.plans.some(e => e === basicplan)); // Los ordena por aparición de mayor a menor\n\n    showbnfs.sort(function (a, b) {\n      return a.weight - b.weight;\n    }).reverse();\n    setCompBenef(showbnfs);\n    return;\n  }\n\n  useEffect(() => {\n    getBenefToCompare(); //eslint-disable-next-line\n  }, []);\n  useEffect(() => {// if (compBenef) {\n    //   console.log(compBenef);\n    // }\n  }, [compBenef]);\n\n  function controlCheck(benef, plan) {\n    return benef.plans.includes(plan);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    style: {\n      background: '#f1f1f1'\n    },\n    component: Paper,\n    children: planNames.slice(1).length && /*#__PURE__*/_jsxDEV(Table, {\n      className: classes.table,\n      \"aria-label\": \"caption table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        style: {\n          background: '#d7f7f5'\n        },\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            style: {\n              width: 400\n            },\n            children: \"BENEFICIOS EXTRA DE PLANES SUPERIORES\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this), planNames.slice(1).map((plan, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"center\",\n            children: [\"INTEGRA \", plan]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: [compBenef && compBenef.map((benef, index1) => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            component: \"th\",\n            scope: \"row\",\n            children: benef.title\n          }, index1, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 37\n          }, this), planNames.slice(1).map((plan, index2) => /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"center\",\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {\n              style: {\n                color: '#41aea9',\n                height: 2\n              },\n              edge: \"start\",\n              checked: controlCheck(benef, plan),\n              tabIndex: -1,\n              disableRipple: true\n            }, index2, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 45\n            }, this)\n          }, index2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 41\n          }, this))]\n        }, index1, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 33\n        }, this)), /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            style: {\n              background: '#d7f7f5'\n            },\n            component: \"th\",\n            scope: \"row\",\n            children: \"Importe:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this), plans.slice(1).map((plan, index3) => /*#__PURE__*/_jsxDEV(TableCell, {\n            style: {\n              background: '#d7f7f5'\n            },\n            align: \"center\",\n            children: [\"$ \", plan.price]\n          }, index3, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AcccessibleTable, \"rHo4moM1pHOh1KcIjMMiIx+8t0Q=\", false, function () {\n  return [useStyles];\n});\n\n_c = AcccessibleTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"AcccessibleTable\");","map":{"version":3,"sources":["/home/alan/Escritorio/Integra/IntegraApp/src/components/Guest/ComparativaP/AcccessibleTable.jsx"],"names":["React","useState","useEffect","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Checkbox","supabase","useStyles","AcccessibleTable","plans","classes","compBenef","setCompBenef","planNames","map","plan","name","slice","trim","basicplan","getBenefToCompare","data","benefs","from","select","arrbnfs","b","arrplans","title","weight","length","showbnfs","filter","benef","some","e","sort","a","reverse","controlCheck","includes","background","table","width","index","index1","index2","color","height","index3","price"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    Checkbox,\n} from '@material-ui/core';\nimport supabase from '../../../supabase.config';\n\nconst useStyles = makeStyles({});\n\nexport default function AcccessibleTable({ plans }) {\n    const classes = useStyles();\n\n    let [compBenef, setCompBenef] = useState(null);\n\n    // Guarda en el arreglo planNames sólo el número de plan\n    let planNames = plans.map((plan) => plan.name.slice(7).trim());\n    let basicplan = planNames[0];\n\n    // Función que se trae todos los beneficios de la base\n    // de datos que no están en el plan básico.\n    // async function getBenefToCompare(idbasico) {\n    async function getBenefToCompare() {\n        // Se trae todos los beneficios\n        const { data: benefs } = await supabase\n            .from('benefits')\n            .select('id, title, plans(id,name)');\n        // console.log(benefs);\n\n        // Se queda sólo con la información a utilizar\n        let arrbnfs = benefs.map((b) => {\n            let arrplans = b.plans.map((plan) => plan.name.slice(7).trim()); // ... y algo más\n            return { title: b.title, plans: arrplans, weight: arrplans.length };\n        });\n\n        // Quita los beneficios que ya están en el plan básico\n        let showbnfs = arrbnfs.filter(\n            (benef) => !benef.plans.some((e) => e === basicplan)\n        );\n\n        // Los ordena por aparición de mayor a menor\n        showbnfs\n            .sort(function (a, b) {\n                return a.weight - b.weight;\n            })\n            .reverse();\n\n        setCompBenef(showbnfs);\n\n        return;\n    }\n\n    useEffect(() => {\n        getBenefToCompare();\n        //eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        // if (compBenef) {\n        //   console.log(compBenef);\n        // }\n    }, [compBenef]);\n\n    function controlCheck(benef, plan) {\n        return benef.plans.includes(plan);\n    }\n\n    return (\n        <TableContainer style={{ background: '#f1f1f1' }} component={Paper}>\n            {/* Le saca el plan básico que ya está en el card */}\n            {planNames.slice(1).length && (\n                <Table className={classes.table} aria-label='caption table'>\n                    <TableHead style={{ background: '#d7f7f5' }}>\n                        <TableRow>\n                            <TableCell style={{ width: 400 }}>\n                                BENEFICIOS EXTRA DE PLANES SUPERIORES\n                            </TableCell>\n                            {planNames.slice(1).map((plan, index) => (\n                                <TableCell key={index} align='center'>\n                                    INTEGRA {plan}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {/* Crea la fila a partir del arreglo */}\n                        {compBenef &&\n                            compBenef.map((benef, index1) => (\n                                <TableRow key={index1}>\n                                    <TableCell\n                                        key={index1}\n                                        component='th'\n                                        scope='row'\n                                    >\n                                        {benef.title}\n                                    </TableCell>\n                                    {planNames.slice(1).map((plan, index2) => (\n                                        <TableCell key={index2} align='center'>\n                                            <Checkbox\n                                                key={index2}\n                                                style={{\n                                                    color: '#41aea9',\n                                                    height: 2,\n                                                }}\n                                                edge='start'\n                                                checked={controlCheck(\n                                                    benef,\n                                                    plan\n                                                )}\n                                                tabIndex={-1}\n                                                disableRipple\n                                            />\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            ))}\n                        {/* Fila con importes  */}\n                        <TableRow>\n                            <TableCell\n                                style={{ background: '#d7f7f5' }}\n                                component='th'\n                                scope='row'\n                            >\n                                Importe:\n                            </TableCell>\n                            {plans.slice(1).map((plan, index3) => (\n                                <TableCell\n                                    key={index3}\n                                    style={{ background: '#d7f7f5' }}\n                                    align='center'\n                                >\n                                    $ {plan.price}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            )}\n        </TableContainer>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}