{"ast":null,"code":"var _jsxFileName = \"/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/MyPlan/CompareMyPlan.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, FormControl, Select, MenuItem } from '@material-ui/core';\nimport { Check, Clear } from '@material-ui/icons';\nimport supabase from '../../../supabase.config'; // Estilos usados en componentes de MUI.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  formcont: {\n    width: '100%',\n    boxShadow: \"none\",\n    color: \"#000000\",\n    verticalAlign: \"middle\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  },\n  headcell: {\n    fontSize: 18,\n    verticalAlign: \"middle\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  },\n  cell: {\n    verticalAlign: \"middle\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  },\n  centeredcell: {\n    verticalAlign: \"middle\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  }\n});\nexport default function CompareMyPlan({\n  plandata,\n  familymembers\n}) {\n  _s();\n\n  const classes = useStyles(); // Datos del plan actual\n\n  let {\n    id: actual_plan_id,\n    name: actual_plan_name,\n    price: actual_plan_price,\n    benefits: actual_plan_benefits\n  } = plandata; // Estado del planes a mostrar en selector (distintos al actual)\n\n  let [otherPlans, setOtherPlans] = useState(null); // Función que se trae todos los planes de la base\n  // de datos con id distinta del actual actual_plan_id\n\n  async function getPlans(idplanactual) {\n    const {\n      data: showplans\n    } = await supabase.from('plans').select('id, name,price').neq('id', idplanactual); // Ordena el arreglo de planes por nombre de menor a mayor\n\n    showplans.sort(function (a, b) {\n      //parseInt(a.name.trim().slice(7))) - parseInt(a.name.trim().slice(7)))\n      return parseInt(a.name.trim().slice(7)) - parseInt(b.name.trim().slice(7));\n    });\n    setOtherPlans(showplans); // console.log(showplans);\n  }\n\n  useEffect(() => {\n    if (actual_plan_id) {\n      getPlans(actual_plan_id);\n    }\n  }, [actual_plan_id]); //[]\n  // Estado de todos los beneficios del plan a comparar\n\n  let [compBenefs, setCompBenefs] = useState(null); // Función que se trae todos los beneficios de la base\n  // de datos que están en el plan con id especificada.\n\n  async function getBenef(idplan) {\n    let {\n      data: benefs\n    } = await supabase.from('plans_benefits').select(`\n          plan: plan_id (id,name,price),\n          benefits: benefit_id (id,title)\n        `).eq('plan_id', idplan);\n    let arrbnfs = benefs.map(b => ({\n      id: b.benefits.id,\n      title: b.benefits.title\n    })); // Ordena el arreglo por id\n\n    arrbnfs.sort(function (a, b) {\n      return a.id - b.id;\n    });\n    setCompBenefs(arrbnfs); // console.log('acá:', arrbnfs)\n\n    return;\n  } // Estado del plan seleccionado para comparar\n\n\n  let [compPlan, setCompPlan] = useState({\n    id: null,\n    name: null,\n    price: null\n  }); // Estado de todos los beneficios a comparar\n\n  let [allbenefs, setAllbenefs] = useState(actual_plan_benefits);\n\n  let handleChange = event => {\n    event.preventDefault();\n    setCompPlan(event.target.value); // console.log('seleccionaste: ', event.target.value) \n  }; // Cuando fijó el plan recarga\n\n\n  useEffect(() => {\n    if (compPlan.id) {\n      // console.log('seleccionaste: ', compPlan.id, compPlan);\n      getBenef(compPlan.id);\n    }\n  }, [compPlan]); // Función que devuelve un arreglo con todos los beneficios\n  // sin duplicar.\n\n  function mergeBenefsOnUnique(arr1, arr2) {\n    let all = arr1.concat(arr2);\n    let arr = all.filter((e, index) => {\n      return all.indexOf(e) === index;\n    });\n    setAllbenefs(arr);\n    return;\n  } // Una vez que cargó los beneficios del plan a comparar recarga\n\n\n  useEffect(() => {\n    if (compBenefs) {\n      // console.log('acá2:', compBenefs)\n      mergeBenefsOnUnique(actual_plan_benefits, compBenefs); // console.log('acá3:', allbenefs)\n    }\n  }, [actual_plan_benefits, compBenefs]);\n  useEffect(() => {// if (allbenefs) {\n    //   console.log('acá3:', allbenefs)\n    //   console.log('acá4:', compBenefs)\n    // }\n  }, [allbenefs]); //verifBenef(benef.id,actual_plan_benefits)<p><Check/></p>\n\n  let verifBenef = (id, arr) => {\n    return arr.some(e => e.id === id) ? /*#__PURE__*/_jsxDEV(Check, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 42\n    }, this) : /*#__PURE__*/_jsxDEV(Clear, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 53\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TableContainer, {\n      style: {\n        background: '#f1f1f1'\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        \"aria-label\": \"caption table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          style: {\n            background: '#d7f7f5'\n          },\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            className: classes.cell,\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              className: classes.headcell,\n              style: {\n                width: 500\n              },\n              children: \"Beneficios\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              className: classes.headcell,\n              style: {\n                width: 200\n              },\n              children: [actual_plan_name, \" (actual)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              className: classes.cell,\n              style: {\n                width: 200\n              },\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                className: classes.formControl,\n                children: /*#__PURE__*/_jsxDEV(Select // multiple\n                , {\n                  displayEmpty: true,\n                  disableUnderline: true,\n                  className: classes.headcell,\n                  value: compPlan,\n                  onChange: handleChange // input={<Input />}\n                  ,\n                  renderValue: selected => {\n                    if (selected.id === null) {\n                      // Esto es lo que muestra antes de seleccionar\n                      return /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: \"Plan a comparar\"\n                      }, void 0, false);\n                    }\n\n                    return selected.name;\n                  },\n                  children: otherPlans && otherPlans.map((plan, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: plan,\n                    children: plan.name\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: [allbenefs && allbenefs.map((benef, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: benef.title\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              component: \"th\",\n              scope: \"row\",\n              className: classes.centeredcell,\n              children: verifBenef(benef.id, actual_plan_benefits)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this), compBenefs ? /*#__PURE__*/_jsxDEV(TableCell, {\n              component: \"th\",\n              scope: \"row\",\n              className: classes.centeredcell,\n              children: compPlan.id && verifBenef(benef.id, compBenefs)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 31\n            }, this) : /*#__PURE__*/_jsxDEV(TableCell, {\n              component: \"th\",\n              scope: \"row\",\n              className: classes.centeredcell\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                background: '#d7f7f5'\n              },\n              component: \"th\",\n              scope: \"row\",\n              children: \"Importe individual:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                background: '#d7f7f5'\n              },\n              component: \"th\",\n              scope: \"row\",\n              className: classes.centeredcell,\n              children: [\"$ \", actual_plan_price]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 15\n            }, this), compBenefs ? /*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                background: '#d7f7f5'\n              },\n              component: \"th\",\n              scope: \"row\",\n              className: classes.centeredcell,\n              children: [\"$ \", compPlan.price]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                background: '#d7f7f5'\n              },\n              component: \"th\",\n              scope: \"row\",\n              className: classes.centeredcell\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), familymembers && /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                background: '#d7f7f5'\n              },\n              component: \"th\",\n              scope: \"row\",\n              children: \"Total por grupo familiar:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                background: '#d7f7f5'\n              },\n              component: \"th\",\n              scope: \"row\",\n              className: classes.centeredcell,\n              children: [\"$ \", actual_plan_price * familymembers]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this), compBenefs ? /*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                background: '#d7f7f5'\n              },\n              component: \"th\",\n              scope: \"row\",\n              className: classes.centeredcell,\n              children: [\"$ \", compPlan.price * familymembers]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                background: '#d7f7f5'\n              },\n              component: \"th\",\n              scope: \"row\",\n              className: classes.centeredcell\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CompareMyPlan, \"AU+3rW0MG/4dpwCZF5se9lktvzg=\", false, function () {\n  return [useStyles];\n});\n\n_c = CompareMyPlan;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompareMyPlan\");","map":{"version":3,"sources":["/home/alan/Escritorio/Integra/IntegraApp/src/components/Affiliate/MyPlan/CompareMyPlan.jsx"],"names":["React","useState","useEffect","makeStyles","useTheme","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","FormControl","Select","MenuItem","Check","Clear","supabase","useStyles","formcont","width","boxShadow","color","verticalAlign","alignItems","textAlign","headcell","fontSize","cell","centeredcell","CompareMyPlan","plandata","familymembers","classes","id","actual_plan_id","name","actual_plan_name","price","actual_plan_price","benefits","actual_plan_benefits","otherPlans","setOtherPlans","getPlans","idplanactual","data","showplans","from","select","neq","sort","a","b","parseInt","trim","slice","compBenefs","setCompBenefs","getBenef","idplan","benefs","eq","arrbnfs","map","title","compPlan","setCompPlan","allbenefs","setAllbenefs","handleChange","event","preventDefault","target","value","mergeBenefsOnUnique","arr1","arr2","all","concat","arr","filter","e","index","indexOf","verifBenef","some","background","formControl","selected","plan","benef"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  FormControl,\n  Select,\n  MenuItem\n} from '@material-ui/core';\nimport {Check, Clear} from '@material-ui/icons';\nimport supabase from '../../../supabase.config';\n\n// Estilos usados en componentes de MUI.\nconst useStyles = makeStyles({\n  formcont: {\n    width: '100%',\n    boxShadow: \"none\",\n    color: \"#000000\",\n    verticalAlign: \"middle\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  },\n  headcell: {\n    fontSize: 18,\n    verticalAlign: \"middle\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  },\n  cell: {\n    verticalAlign: \"middle\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  },\n  centeredcell:{\n    verticalAlign: \"middle\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  }\n});\n\nexport default function CompareMyPlan({ plandata, familymembers }) {\n  const classes = useStyles();\n\n  // Datos del plan actual\n  let { id: actual_plan_id, name: actual_plan_name, price: actual_plan_price, benefits: actual_plan_benefits } = plandata;\n\n\n\n  // Estado del planes a mostrar en selector (distintos al actual)\n  let [otherPlans, setOtherPlans] = useState(null);\n\n  // Función que se trae todos los planes de la base\n  // de datos con id distinta del actual actual_plan_id\n  async function getPlans(idplanactual) {\n    const { data: showplans } = await supabase\n      .from('plans')\n      .select('id, name,price')\n      .neq('id', idplanactual)\n\n    // Ordena el arreglo de planes por nombre de menor a mayor\n    showplans.sort(function (a, b) {\n      //parseInt(a.name.trim().slice(7))) - parseInt(a.name.trim().slice(7)))\n      return parseInt(a.name.trim().slice(7)) - parseInt(b.name.trim().slice(7));\n    })\n    setOtherPlans(showplans)\n    // console.log(showplans);\n  }\n\n  useEffect(() => {\n    if (actual_plan_id) {\n      getPlans(actual_plan_id);\n    }\n  }, [actual_plan_id]);//[]\n\n  // Estado de todos los beneficios del plan a comparar\n  let [compBenefs, setCompBenefs] = useState(null);\n\n  // Función que se trae todos los beneficios de la base\n  // de datos que están en el plan con id especificada.\n  async function getBenef(idplan) {\n    let { data: benefs } = await supabase\n      .from('plans_benefits')\n      .select(`\n          plan: plan_id (id,name,price),\n          benefits: benefit_id (id,title)\n        `)\n      .eq('plan_id', idplan)\n\n    let arrbnfs = benefs.map(b => ({\n      id: b.benefits.id,\n      title: b.benefits.title,\n    }))\n\n    // Ordena el arreglo por id\n    arrbnfs.sort(function (a, b) {\n      return a.id - b.id;\n    })\n\n    setCompBenefs(arrbnfs);\n    // console.log('acá:', arrbnfs)\n    return;\n  }\n\n  // Estado del plan seleccionado para comparar\n  let [compPlan, setCompPlan] = useState({ id: null, name: null, price: null });\n\n  // Estado de todos los beneficios a comparar\n  let [allbenefs, setAllbenefs] = useState(actual_plan_benefits);\n\n\n  let handleChange = (event) => {\n    event.preventDefault();\n    setCompPlan(event.target.value);\n    // console.log('seleccionaste: ', event.target.value) \n  };\n\n  // Cuando fijó el plan recarga\n  useEffect(() => {\n    if (compPlan.id) {\n      // console.log('seleccionaste: ', compPlan.id, compPlan);\n      getBenef(compPlan.id);\n    }\n  }, [compPlan]);\n\n  // Función que devuelve un arreglo con todos los beneficios\n  // sin duplicar.\n  function mergeBenefsOnUnique(arr1, arr2) {\n    let all = arr1.concat(arr2);\n    let arr = all.filter((e, index) => {\n      return all.indexOf(e) === index;\n    })\n    setAllbenefs(arr);\n    return;\n  }\n\n  // Una vez que cargó los beneficios del plan a comparar recarga\n  useEffect(() => {\n    if (compBenefs) {\n      // console.log('acá2:', compBenefs)\n      mergeBenefsOnUnique(actual_plan_benefits, compBenefs)\n      // console.log('acá3:', allbenefs)\n    }\n  }, [actual_plan_benefits, compBenefs]);\n\n  useEffect(() => {\n    // if (allbenefs) {\n    //   console.log('acá3:', allbenefs)\n    //   console.log('acá4:', compBenefs)\n    // }\n  }, [allbenefs]);\n\n  //verifBenef(benef.id,actual_plan_benefits)<p><Check/></p>\n\n  let verifBenef = (id, arr) => {\n    return arr.some(e => e.id === id) ?  <Check/> : <Clear/>\n  }\n\n  return (\n    <div>\n      <TableContainer style={{ background: '#f1f1f1' }} >\n        <Table aria-label='caption table'>\n          <TableHead style={{ background: '#d7f7f5' }}>\n            <TableRow className={classes.cell} >\n              <TableCell className={classes.headcell} style={{ width: 500 }}>\n                Beneficios\n              </TableCell>\n              <TableCell className={classes.headcell} style={{ width: 200 }}>\n                {actual_plan_name} (actual)\n              </TableCell>\n              <TableCell className={classes.cell} style={{ width: 200 }}>\n                <FormControl className={classes.formControl}>\n                  {/* Celda con plan a comparar  */}\n                  <Select\n                    // multiple\n                    displayEmpty\n                    disableUnderline\n                    className={classes.headcell}\n                    value={compPlan}\n                    onChange={handleChange}\n                    // input={<Input />}\n                    renderValue={(selected) => {\n                      if (selected.id === null) {\n                        // Esto es lo que muestra antes de seleccionar\n                        return <>Plan a comparar</>;\n                      }\n                      return selected.name;\n                    }}\n                  >\n                    {otherPlans && otherPlans.map((plan, index) => (\n                      <MenuItem key={index} value={plan} >\n                        {plan.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {allbenefs && allbenefs.map((benef, index) => (\n              <TableRow>\n                {/* columna 2 */}\n                <TableCell\n                  key={index}\n                >\n                  {benef.title}\n                </TableCell>\n\n                {/* columna 2 */}\n                <TableCell\n                  component='th'\n                  scope='row'\n                  className={classes.centeredcell}\n                >\n                  {verifBenef(benef.id, actual_plan_benefits)}\n                </TableCell>\n                {/* columna 3 */}\n                {compBenefs ? <TableCell\n                  component='th'\n                  scope='row'\n                  className={classes.centeredcell}\n                >\n                  {compPlan.id && verifBenef(benef.id,compBenefs)}\n                </TableCell> : \n                <TableCell\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                 \n              </TableCell> }\n              </TableRow>\n            ))}\n\n            {/* Fila con importes  */}\n            <TableRow>\n              <TableCell\n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n              >\n                Importe individual: \n              </TableCell>\n              <TableCell\n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                $ {actual_plan_price}\n              </TableCell>\n              {compBenefs ? <TableCell \n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                $ {compPlan.price}\n              </TableCell>: \n                <TableCell\n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                 \n              </TableCell> }\n            </TableRow>\n            {familymembers && <TableRow>\n              <TableCell\n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n              >\n                Total por grupo familiar:\n              </TableCell>\n              <TableCell\n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                $ {actual_plan_price * familymembers}\n              </TableCell>\n              {compBenefs ? <TableCell \n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                $ {compPlan.price * familymembers}\n              </TableCell>: \n                <TableCell\n                style={{ background: '#d7f7f5' }}\n                component='th'\n                scope='row'\n                className={classes.centeredcell}\n              >\n                 \n              </TableCell> }\n            </TableRow>}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}