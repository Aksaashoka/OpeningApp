{"ast":null,"code":"var _jsxFileName = \"/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/NewPlan/NewPlan.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport supabase from '../../../../supabase.config';\nimport { makeStyles, withStyles, lighten } from '@material-ui/core/styles';\nimport { Autocomplete } from '@material-ui/lab';\nimport { TextField, Button, Box } from '@material-ui/core';\nimport './NewPlan.css';\nimport Swal from 'sweetalert2'; //Switch\n\nimport { FormGroup, Switch, Grid, Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  container: {\n    paddingTop: 25,\n    paddingLeft: 25,\n    backgroundColor: '#fafafa'\n  },\n  root: {\n    width: '500px',\n    padding: 0,\n    alignItems: 'center'\n  },\n  planT: {\n    width: '100%',\n    marginBottom: 15\n  },\n  importe: {\n    width: '30%',\n    marginBottom: 15,\n    backgroundColor: '#ffffff'\n  },\n  beneficio: {\n    width: '500px',\n    marginBottom: 15,\n    backgroundColor: '#ffffff'\n  },\n  activo: {\n    color: '#676161de'\n  },\n  saveButton: {\n    color: '#fafafa',\n    padding: theme.spacing(0.5),\n    border: '3px solid #2c7f7b',\n    backgroundColor: '#2c7f7b',\n    fontWeight: 'bold',\n    fontSize: '15px',\n    '&:hover': {\n      backgroundColor: lighten('#fafafa', 0.2),\n      color: '#2c7f7b',\n      padding: theme.spacing(0.5)\n    }\n  }\n}));\nconst AntSwitch = withStyles(theme => ({\n  root: {\n    width: 28,\n    height: 16,\n    padding: 0,\n    display: 'flex'\n  },\n  switchBase: {\n    padding: 2,\n    color: theme.palette.grey[500],\n    '&$checked': {\n      transform: 'translateX(12px)',\n      color: theme.palette.common.white,\n      '& + $track': {\n        opacity: 1,\n        backgroundColor: '#27978b',\n        borderColor: theme.palette.primary.main\n      }\n    }\n  },\n  thumb: {\n    width: 12,\n    height: 12,\n    boxShadow: 'none'\n  },\n  track: {\n    border: `1px solid ${theme.palette.grey[500]}`,\n    borderRadius: 16 / 2,\n    opacity: 1,\n    backgroundColor: theme.palette.common.white\n  },\n  checked: {}\n}))(Switch);\nexport default function NewPlan() {\n  _s();\n\n  const classes = useStyles(); // Estado donde voy a guardar los beneficios traidos desde la base\n  // de datos para poner en el selector.\n\n  let [benefits, setBenefits] = useState(null); // Función que se trae los beneficios de la base de datos\n  // y los cuarda en el estado local 'benefits'.\n\n  async function getBenefAsync() {\n    let {\n      data: benefs\n    } = await supabase.from('benefits').select('*');\n    setBenefits(benefs);\n  } // Carga los beneficios a usar en el selector\n\n\n  useEffect(() => {\n    getBenefAsync();\n  }, []); // recarga los beneficios a usar en el selector\n\n  useEffect(() => {// if(benefits){\n    //   console.log(benefits); //[{id: , title: , description:}]\n    // }\n  }, [benefits]); // Estado de información del plan a agregar\n\n  let [state, setState] = useState({\n    title: null,\n    price: null,\n    sbenefits: [],\n    active: true\n  }); // Estado de errores para poder guardar el plan\n\n  let [error, setError] = useState({\n    title: '',\n    price: '',\n    sbenefits: '',\n    active: ''\n  });\n  useEffect(() => {// setError({\n    //   title: 'No puede quedar incompleto o en blanco.',\n    //   price: 'Debe ser un número de 4 a 6 cifras',\n    //   sbenefits: 'Debe tener al menos un beneficio.',\n    //   active: '',\n    // });\n  }, []); // Cambios en los inputs (excepto en beneficio)\n\n  let handlechange = event => {\n    let item = event.target.name;\n    let value = event.target.value;\n\n    switch (item) {\n      case 'title':\n        // Que no esté vacío ni sean solo espacios\n        // console.log(event.target.value)\n        let titlereg = /[0-9a-zA-ZÀ-ÿ\\u00f1\\u00d1\\.]+[ ]?[0-9a-z A-ZÀ-ÿ\\u00f1\\u00d1][:punct:]*$/;\n        setError(error => ({ ...error,\n          title: titlereg.test(event.target.value) ? '' : 'No puede quedar incompleto o en blanco.'\n        }));\n        setState({ ...state,\n          title: event.target.value\n        });\n        break;\n\n      case 'price':\n        // Que sean solo números\n        if (value === null || value === '') {\n          setError(error => ({ ...error,\n            price: 'Debe ser un número de 4 a 6 cifras'\n          }));\n        } else {\n          setError(error => ({ ...error,\n            price: /^[0-9]{4,6}$/.test(value) ? '' : 'Debe ser un número de 4 a 6 cifras'\n          }));\n          setState({ ...state,\n            price: value\n          });\n          break;\n        }\n\n      case 'active':\n        setState({ ...state,\n          [event.target.name]: event.target.checked\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {// if (state.sbenefits.length) {\n    //   console.log('sbenefits', state.sbenefits);\n    // }\n  }, [error, state]); // Función que verifica que no haya errores en los inputs\n  // para habilitar el botón de guardar el plan.\n\n  let validate = modInfo => {\n    return Object.values(error).every(x => x === ''); //si no tiene ningún mensaje de error devuelve true\n  }; // Función que guarda la info del nuevo plan en la base de datos.\n\n\n  async function handlesubmit(e) {\n    e.preventDefault(); // Agrega el plan nuevo en la tabla de planes.\n\n    async function addNewPlan(state) {\n      await supabase.from('plans').insert([{\n        name: state.title,\n        price: state.price,\n        active: state.active\n      }]);\n    }\n\n    await addNewPlan(state); //Obtiene Id del plan nuevo\n\n    async function GetNewPlanId(state) {\n      try {\n        let {\n          data: idnewplan\n        } = await supabase.from('plans').select('id').eq('name', state.title);\n        return idnewplan[0].id;\n      } catch (err) {\n        console.error(err);\n      }\n\n      return;\n    }\n\n    let idplan = await GetNewPlanId(state); // Agrega cada beneficio al plan\n    // Busca el id del beneficio seleccionado y lo conecta.\n\n    async function addPlanBenef(idplan, sbenefits) {\n      //idbenef -> sbenefits\n      for (let i = 0; i < sbenefits.length; i++) {\n        let {\n          error\n        } = await supabase.from('plans_benefits').insert([{\n          plan_id: idplan,\n          benefit_id: sbenefits[i].id\n        }]);\n        if (error) console.log(error);\n      }\n    }\n\n    await addPlanBenef(idplan, state.sbenefits);\n    await Swal.fire({\n      title: 'Exito!',\n      text: 'Sus datos fueron guardados',\n      icon: 'success',\n      confirmButtonText: 'OK'\n    }); // Luego limpia\n\n    setState({\n      title: null,\n      price: null,\n      sbenefits: [],\n      active: true\n    });\n    setError({\n      title: '',\n      price: '',\n      sbenefits: '',\n      active: '' // title: 'No puede quedar incompleto o en blanco.',\n      // price: 'Debe ser un número de 4 a 6 cifras',\n      // sbenefits: 'Debe tener al menos un beneficio.',\n      // active: '',\n\n    });\n  } // Función que administra el selector de beneficios.\n\n\n  let handleAutoComplete = values => {\n    // console.log('seleccionaste :', values)\n    if (values.length === 0) {\n      setError(error => ({ ...error,\n        sbenefits: 'Debe tener al menos un beneficio.'\n      }));\n    } else {\n      setError(error => ({ ...error,\n        sbenefits: ''\n      }));\n    }\n\n    setState({ ...state,\n      sbenefits: values\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.root,\n      noValidate: true,\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.inputsCont,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          id: \"title\",\n          name: \"title\",\n          className: classes.planT,\n          label: \"Nombre del plan\",\n          value: state.title,\n          onChange: handlechange,\n          error: error.title,\n          helperText: error.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"importeInput\",\n          type: \"number\",\n          name: \"price\",\n          className: classes.importe,\n          label: \"Importe\",\n          variant: \"outlined\",\n          inputProps: {\n            min: 0\n          },\n          value: state.price,\n          onChange: handlechange,\n          error: error.price,\n          helperText: error.price\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }, this), benefits && /*#__PURE__*/_jsxDEV(Autocomplete, {\n          multiple: true,\n          limitTags: 2,\n          id: \"benefitInputa\" // name='benefit'\n          ,\n          className: classes.beneficio //  Acá va el arreglo a mostrar en el selector\n          ,\n          options: benefits,\n          getOptionLabel: option => option.title,\n          onChange: (event, value) => handleAutoComplete(value),\n          renderOption: option => option.title,\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n            id: \"benefitInput\",\n            name: \"benefit\",\n            ...params,\n            label: \"Beneficios\",\n            variant: \"outlined\",\n            error: error.sbenefits,\n            helperText: error.sbenefits,\n            className: classes.textField,\n            inputProps: { ...params.inputProps,\n              autoComplete: 'new-password' // disable autocomplete and autofill\n\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.activo,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Activo:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"div\",\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              component: \"label\",\n              label: 'on',\n              container: true,\n              alignItems: \"center\",\n              spacing: 1,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: \"No\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(AntSwitch, {\n                  checked: state.active,\n                  onChange: handlechange,\n                  name: \"active\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 358,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: \"Si\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        width: \"100%\",\n        align: \"right\",\n        children: !!state.title && !!state.price && !!state.sbenefits.length && /*#__PURE__*/_jsxDEV(Button, {\n          id: \"savebtn\",\n          disabled: !validate(),\n          variant: \"contained\",\n          className: classes.saveButton,\n          onClick: handlesubmit,\n          children: \"Guardar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 84\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NewPlan, \"VKM4GFcCMjJhPmt0XR5ilfm7rgk=\", false, function () {\n  return [useStyles];\n});\n\n_c = NewPlan;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPlan\");","map":{"version":3,"sources":["/home/alan/Escritorio/Integra/IntegraApp/src/components/Admin/AdminPlansManage/NewPlan/NewPlan.jsx"],"names":["React","useState","useEffect","supabase","makeStyles","withStyles","lighten","Autocomplete","TextField","Button","Box","Swal","FormGroup","Switch","Grid","Typography","useStyles","theme","container","paddingTop","paddingLeft","backgroundColor","root","width","padding","alignItems","planT","marginBottom","importe","beneficio","activo","color","saveButton","spacing","border","fontWeight","fontSize","AntSwitch","height","display","switchBase","palette","grey","transform","common","white","opacity","borderColor","primary","main","thumb","boxShadow","track","borderRadius","checked","NewPlan","classes","benefits","setBenefits","getBenefAsync","data","benefs","from","select","state","setState","title","price","sbenefits","active","error","setError","handlechange","event","item","target","name","value","titlereg","test","validate","modInfo","Object","values","every","x","handlesubmit","e","preventDefault","addNewPlan","insert","GetNewPlanId","idnewplan","eq","id","err","console","idplan","addPlanBenef","i","length","plan_id","benefit_id","log","fire","text","icon","confirmButtonText","handleAutoComplete","inputsCont","min","option","params","textField","inputProps","autoComplete"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport supabase from '../../../../supabase.config';\nimport { makeStyles, withStyles, lighten } from '@material-ui/core/styles';\nimport { Autocomplete } from '@material-ui/lab';\nimport { TextField, Button, Box } from '@material-ui/core';\nimport './NewPlan.css';\nimport Swal from 'sweetalert2';\n\n//Switch\nimport { FormGroup, Switch, Grid, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        paddingTop: 25,\n        paddingLeft: 25,\n        backgroundColor: '#fafafa',\n    },\n    root: {\n        width: '500px',\n        padding: 0,\n        alignItems: 'center',\n    },\n    planT: {\n        width: '100%',\n        marginBottom: 15,\n    },\n    importe: {\n        width: '30%',\n        marginBottom: 15,\n        backgroundColor: '#ffffff',\n    },\n    beneficio: {\n        width: '500px',\n        marginBottom: 15,\n        backgroundColor: '#ffffff',\n    },\n    activo: {\n        color: '#676161de',\n    },\n    saveButton: {\n        color: '#fafafa',\n        padding: theme.spacing(0.5),\n        border: '3px solid #2c7f7b',\n        backgroundColor: '#2c7f7b',\n        fontWeight: 'bold',\n        fontSize: '15px',\n        '&:hover': {\n            backgroundColor: lighten('#fafafa', 0.2),\n            color: '#2c7f7b',\n            padding: theme.spacing(0.5),\n        },\n    },\n}));\n\nconst AntSwitch = withStyles((theme) => ({\n    root: {\n        width: 28,\n        height: 16,\n        padding: 0,\n        display: 'flex',\n    },\n    switchBase: {\n        padding: 2,\n        color: theme.palette.grey[500],\n        '&$checked': {\n            transform: 'translateX(12px)',\n            color: theme.palette.common.white,\n            '& + $track': {\n                opacity: 1,\n                backgroundColor: '#27978b',\n                borderColor: theme.palette.primary.main,\n            },\n        },\n    },\n    thumb: {\n        width: 12,\n        height: 12,\n        boxShadow: 'none',\n    },\n    track: {\n        border: `1px solid ${theme.palette.grey[500]}`,\n        borderRadius: 16 / 2,\n        opacity: 1,\n        backgroundColor: theme.palette.common.white,\n    },\n    checked: {},\n}))(Switch);\n\nexport default function NewPlan() {\n    const classes = useStyles();\n\n    // Estado donde voy a guardar los beneficios traidos desde la base\n    // de datos para poner en el selector.\n    let [benefits, setBenefits] = useState(null);\n\n    // Función que se trae los beneficios de la base de datos\n    // y los cuarda en el estado local 'benefits'.\n    async function getBenefAsync() {\n        let { data: benefs } = await supabase.from('benefits').select('*');\n        setBenefits(benefs);\n    }\n\n    // Carga los beneficios a usar en el selector\n    useEffect(() => {\n        getBenefAsync();\n    }, []);\n\n    // recarga los beneficios a usar en el selector\n    useEffect(() => {\n        // if(benefits){\n        //   console.log(benefits); //[{id: , title: , description:}]\n        // }\n    }, [benefits]);\n\n    // Estado de información del plan a agregar\n    let [state, setState] = useState({\n        title: null,\n        price: null,\n        sbenefits: [],\n        active: true,\n    });\n\n    // Estado de errores para poder guardar el plan\n    let [error, setError] = useState({\n        title: '',\n        price: '',\n        sbenefits: '',\n        active: '',\n    });\n\n    useEffect(() => {\n        // setError({\n        //   title: 'No puede quedar incompleto o en blanco.',\n        //   price: 'Debe ser un número de 4 a 6 cifras',\n        //   sbenefits: 'Debe tener al menos un beneficio.',\n        //   active: '',\n        // });\n    }, []);\n\n    // Cambios en los inputs (excepto en beneficio)\n    let handlechange = (event) => {\n        let item = event.target.name;\n        let value = event.target.value;\n        switch (item) {\n            case 'title': // Que no esté vacío ni sean solo espacios\n                // console.log(event.target.value)\n                let titlereg =\n                    /[0-9a-zA-ZÀ-ÿ\\u00f1\\u00d1\\.]+[ ]?[0-9a-z A-ZÀ-ÿ\\u00f1\\u00d1][:punct:]*$/;\n\n                setError((error) => ({\n                    ...error,\n                    title: titlereg.test(event.target.value)\n                        ? ''\n                        : 'No puede quedar incompleto o en blanco.',\n                }));\n                setState({ ...state, title: event.target.value });\n                break;\n\n            case 'price': // Que sean solo números\n                if (value === null || value === '') {\n                    setError((error) => ({\n                        ...error,\n                        price: 'Debe ser un número de 4 a 6 cifras',\n                    }));\n                } else {\n                    setError((error) => ({\n                        ...error,\n                        price: /^[0-9]{4,6}$/.test(value)\n                            ? ''\n                            : 'Debe ser un número de 4 a 6 cifras',\n                    }));\n\n                    setState({ ...state, price: value });\n                    break;\n                }\n\n            case 'active':\n                setState({\n                    ...state,\n                    [event.target.name]: event.target.checked,\n                });\n                break;\n            default:\n                break;\n        }\n    };\n\n    useEffect(() => {\n        // if (state.sbenefits.length) {\n        //   console.log('sbenefits', state.sbenefits);\n        // }\n    }, [error, state]);\n\n    // Función que verifica que no haya errores en los inputs\n    // para habilitar el botón de guardar el plan.\n    let validate = (modInfo) => {\n        return Object.values(error).every((x) => x === '');\n        //si no tiene ningún mensaje de error devuelve true\n    };\n\n    // Función que guarda la info del nuevo plan en la base de datos.\n    async function handlesubmit(e) {\n        e.preventDefault();\n        // Agrega el plan nuevo en la tabla de planes.\n        async function addNewPlan(state) {\n            await supabase.from('plans').insert([\n                {\n                    name: state.title,\n                    price: state.price,\n                    active: state.active,\n                },\n            ]);\n        }\n        await addNewPlan(state);\n\n        //Obtiene Id del plan nuevo\n        async function GetNewPlanId(state) {\n            try {\n                let { data: idnewplan } = await supabase\n                    .from('plans')\n                    .select('id')\n                    .eq('name', state.title);\n\n                return idnewplan[0].id;\n            } catch (err) {\n                console.error(err);\n            }\n            return;\n        }\n\n        let idplan = await GetNewPlanId(state);\n\n        // Agrega cada beneficio al plan\n        // Busca el id del beneficio seleccionado y lo conecta.\n        async function addPlanBenef(idplan, sbenefits) {\n            //idbenef -> sbenefits\n            for (let i = 0; i < sbenefits.length; i++) {\n                let { error } = await supabase.from('plans_benefits').insert([\n                    {\n                        plan_id: idplan,\n                        benefit_id: sbenefits[i].id,\n                    },\n                ]);\n                if (error) console.log(error);\n            }\n        }\n        await addPlanBenef(idplan, state.sbenefits);\n\n        await Swal.fire({\n            title: 'Exito!',\n            text: 'Sus datos fueron guardados',\n            icon: 'success',\n            confirmButtonText: 'OK',\n        });\n\n        // Luego limpia\n        setState({ title: null, price: null, sbenefits: [], active: true });\n        setError({\n            title: '',\n            price: '',\n            sbenefits: '',\n            active: '',\n            // title: 'No puede quedar incompleto o en blanco.',\n            // price: 'Debe ser un número de 4 a 6 cifras',\n            // sbenefits: 'Debe tener al menos un beneficio.',\n            // active: '',\n        });\n    }\n\n    // Función que administra el selector de beneficios.\n    let handleAutoComplete = (values) => {\n        // console.log('seleccionaste :', values)\n        if (values.length === 0) {\n            setError((error) => ({\n                ...error,\n                sbenefits: 'Debe tener al menos un beneficio.',\n            }));\n        } else {\n            setError((error) => ({ ...error, sbenefits: '' }));\n        }\n        setState({ ...state, sbenefits: values });\n    };\n\n    return (\n        <div className={classes.container}>\n            <form className={classes.root} noValidate autoComplete='off'>\n                <div className={classes.inputsCont}>\n                    <TextField\n                        id='title'\n                        name='title'\n                        className={classes.planT}\n                        label='Nombre del plan'\n                        value={state.title}\n                        onChange={handlechange}\n                        error={error.title}\n                        helperText={error.title}\n                    />\n                    <TextField\n                        id='importeInput'\n                        type='number'\n                        name='price'\n                        className={classes.importe}\n                        label='Importe'\n                        variant='outlined'\n                        inputProps={{ min: 0 }}\n                        value={state.price}\n                        onChange={handlechange}\n                        error={error.price}\n                        helperText={error.price}\n                    />\n                    {benefits && (\n                        <Autocomplete\n                            multiple\n                            limitTags={2}\n                            id='benefitInputa'\n                            // name='benefit'\n                            className={classes.beneficio}\n                            //  Acá va el arreglo a mostrar en el selector\n                            options={benefits}\n                            getOptionLabel={(option) => option.title}\n                            onChange={(event, value) =>\n                                handleAutoComplete(value)\n                            }\n                            renderOption={(option) => option.title}\n                            renderInput={(params) => (\n                                <TextField\n                                    id='benefitInput'\n                                    name='benefit'\n                                    {...params}\n                                    label='Beneficios'\n                                    variant='outlined'\n                                    error={error.sbenefits}\n                                    helperText={error.sbenefits}\n                                    className={classes.textField}\n                                    inputProps={{\n                                        ...params.inputProps,\n                                        autoComplete: 'new-password', // disable autocomplete and autofill\n                                    }}\n                                />\n                            )}\n                        />\n                    )}\n                </div>\n                {/* switch */}\n                <div className={classes.activo}>\n                    <p>Activo:</p>\n                    <FormGroup>\n                        <Typography component='div'>\n                            <Grid\n                                component='label'\n                                label={'on'}\n                                container\n                                alignItems='center'\n                                spacing={1}\n                            >\n                                <Grid item>No</Grid>\n                                <Grid item>\n                                    <AntSwitch\n                                        checked={state.active}\n                                        onChange={handlechange}\n                                        name='active'\n                                    />\n                                </Grid>\n                                <Grid item>Si</Grid>\n                            </Grid>\n                        </Typography>\n                    </FormGroup>\n                </div>\n                <div width='100%' align='right'>\n                    {(!!state.title&&!!state.price && !!state.sbenefits.length) && <Button\n                        id='savebtn'\n                        disabled={!validate()}\n                        variant='contained'\n                        className={classes.saveButton}\n                        onClick={handlesubmit}\n                    >\n                        Guardar\n                    </Button>}\n                </div>\n            </form>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}